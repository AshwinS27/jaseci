{
    "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
    "name": "Jac Programming Language",
    "patterns": [
        {
            "include": "#comments"
        },
        {
            "include": "#keywords"
        },
        {
            "include": "#strings"
        },
        {
            "include": "#entity_block_definition"
        }
    ],
    "repository": {
        "keywords": {
            "patterns": [
                {
                    "name": "storage.modifier.jac",
                    "match": "\\b(import)\\b"
                },
                {
                    "match": "\\b(str|int|float|list|dict|bool|edge|graph|digraph|subgraph|test)\\b",
                    "name": "support.type.jac"
                },
                {
                    "name": "keyword.control.jac",
                    "match": "\\b(if|elif|else|while|for|take|ignore|skip|disengage|break|continue)\\b"
                },
                {
                    "match": "\\b(null|true|false)\\b",
                    "name": "constant.language.c"
                }
            ]
        },
        "entity_block_definition": {
            "begin": "^\\s*(node|walker)\\s+([A-Za-z][\\w]*)(\\s*({)|;)",
            "name": "source.jac.embedded.source",
            "beginCaptures": {
                "1": {
                    "name": "storage.type.entity.jac"
                },
                "2": {
                    "name": "entity.name.type.entity.jac"
                },
                "3": {
                    "name": "punctuation.definition.tag.jac"
                }
            },
            "end": "\\s*\\(}|;)",
            "endCaptures": {
                "0": {
                    "name": "punctuation.definition.tag.prisma"
                }
            }
        },
        "strings": {
            "patterns": [
                {
                    "include": "#double_quote"
                },
                {
                    "include": "#single_quote"
                }
            ]
        },
        "double_quote": {
            "name": "string.quoted.double.jac",
            "begin": "\"",
            "end": "\"",
            "patterns": [
                {
                    "name": "constant.character.escape.jac",
                    "match": "\\\\."
                }
            ]
        },
        "single_quote": {
            "name": "string.quoted.double.jac",
            "begin": "'",
            "end": "'",
            "patterns": [
                {
                    "name": "constant.character.escape.jac",
                    "match": "\\\\."
                }
            ]
        },
        "comments": {
            "patterns": [
                {
                    "include": "#number_comment"
                },
                {
                    "include": "#dblslash_comment"
                },
                {
                    "include": "#comment_block"
                }
            ]
        },
        "number_comment": {
            "name": "comment.line.number-sign.jac",
            "begin": "(\\#)",
            "beginCaptures": {
                "1": {
                    "name": "punctuation.definition.comment.jac"
                }
            },
            "end": "($)",
            "patterns": [
                {
                    "include": "#codetags"
                }
            ]
        },
        "dblslash_comment": {
            "name": "comment.line.double-slash.jac",
            "begin": "(\\/\\/)",
            "beginCaptures": {
                "1": {
                    "name": "punctuation.definition.comment.jac"
                }
            },
            "end": "(?=\\n)",
            "patterns": [
                {
                    "include": "#codetags"
                }
            ]
        },
        "comment_block": {
            "name": "comment.block.jac",
            "begin": "(\\/\\*)",
            "beginCaptures": {
                "1": {
                    "name": "punctuation.definition.comment.begin.jac"
                }
            },
            "end": "(\\*\\/)",
            "endCaptures": {
                "1": {
                    "name": "punctuation.definition.comment.end.jac"
                }
            },
            "patterns": [
                {
                    "include": "#codetags"
                }
            ]
        },
        "codetags": {
            "match": "(?:\\b(NOTE|XXX|HACK|FIXME|BUG|TODO)\\b)",
            "captures": {
                "1": {
                    "name": "keyword.codetag.notation.jac"
                }
            }
        }
    },
    "scopeName": "source.jac"
}