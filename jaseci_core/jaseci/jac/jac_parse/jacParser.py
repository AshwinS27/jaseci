# Generated from jac.g4 by ANTLR 4.9.2
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO


def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3d")
        buf.write("\u0412\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write("\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t")
        buf.write("&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.\t.\4")
        buf.write("/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t\64")
        buf.write("\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t")
        buf.write(";\4<\t<\4=\t=\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\t")
        buf.write("D\4E\tE\4F\tF\4G\tG\4H\tH\4I\tI\4J\tJ\4K\tK\4L\tL\4M\t")
        buf.write("M\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT\4U\tU\4V\t")
        buf.write("V\4W\tW\4X\tX\4Y\tY\4Z\tZ\4[\t[\4\\\t\\\4]\t]\4^\t^\4")
        buf.write("_\t_\4`\t`\4a\ta\4b\tb\4c\tc\4d\td\4e\te\4f\tf\3\2\5\2")
        buf.write("\u00ce\n\2\3\2\7\2\u00d1\n\2\f\2\16\2\u00d4\13\2\3\2\6")
        buf.write("\2\u00d7\n\2\r\2\16\2\u00d8\3\2\3\2\3\3\3\3\3\3\3\3\5")
        buf.write("\3\u00e1\n\3\3\3\3\3\3\3\3\3\3\3\3\4\3\4\3\4\5\4\u00eb")
        buf.write("\n\4\3\4\3\4\5\4\u00ef\n\4\3\4\3\4\3\4\5\4\u00f4\n\4\3")
        buf.write("\4\3\4\5\4\u00f8\n\4\3\4\3\4\3\4\5\4\u00fd\n\4\3\4\3\4")
        buf.write("\5\4\u0101\n\4\3\4\3\4\3\4\5\4\u0106\n\4\3\4\3\4\5\4\u010a")
        buf.write("\n\4\5\4\u010c\n\4\3\5\3\5\3\5\3\5\3\5\3\5\3\5\5\5\u0115")
        buf.write("\n\5\3\6\3\6\5\6\u0119\n\6\3\7\3\7\3\7\3\7\5\7\u011f\n")
        buf.write("\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\5\7\u0128\n\7\3\b\3\b\3")
        buf.write("\b\5\b\u012d\n\b\3\b\3\b\7\b\u0131\n\b\f\b\16\b\u0134")
        buf.write("\13\b\3\b\5\b\u0137\n\b\3\b\3\b\7\b\u013b\n\b\f\b\16\b")
        buf.write("\u013e\13\b\3\b\5\b\u0141\n\b\3\b\3\b\3\t\3\t\3\t\3\t")
        buf.write("\5\t\u0149\n\t\3\n\3\n\3\n\3\13\3\13\3\13\3\13\3\f\3\f")
        buf.write("\3\f\3\f\3\r\3\r\3\r\3\r\3\16\3\16\7\16\u015c\n\16\f\16")
        buf.write("\16\16\u015f\13\16\3\16\3\16\3\16\3\16\5\16\u0165\n\16")
        buf.write("\3\17\3\17\5\17\u0169\n\17\3\20\3\20\5\20\u016d\n\20\3")
        buf.write("\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21")
        buf.write("\3\21\5\21\u017b\n\21\3\22\3\22\3\22\3\22\3\22\3\22\3")
        buf.write("\22\3\22\3\22\3\22\5\22\u0187\n\22\3\23\3\23\3\23\3\23")
        buf.write("\3\23\3\24\3\24\5\24\u0190\n\24\3\24\5\24\u0193\n\24\3")
        buf.write("\24\3\24\3\24\7\24\u0198\n\24\f\24\16\24\u019b\13\24\3")
        buf.write("\24\3\24\3\25\3\25\3\25\3\25\5\25\u01a3\n\25\3\26\3\26")
        buf.write("\3\26\3\26\3\26\5\26\u01aa\n\26\3\26\3\26\3\26\3\26\3")
        buf.write("\26\5\26\u01b1\n\26\7\26\u01b3\n\26\f\26\16\26\u01b6\13")
        buf.write("\26\3\26\3\26\3\26\3\26\3\26\5\26\u01bd\n\26\3\26\5\26")
        buf.write("\u01c0\n\26\3\27\3\27\5\27\u01c4\n\27\3\27\3\27\3\30\3")
        buf.write("\30\5\30\u01ca\n\30\3\30\3\30\3\30\5\30\u01cf\n\30\3\31")
        buf.write("\3\31\3\31\3\31\3\32\3\32\3\32\7\32\u01d8\n\32\f\32\16")
        buf.write("\32\u01db\13\32\3\33\3\33\3\33\7\33\u01e0\n\33\f\33\16")
        buf.write("\33\u01e3\13\33\3\34\3\34\7\34\u01e7\n\34\f\34\16\34\u01ea")
        buf.write("\13\34\3\34\3\34\3\34\5\34\u01ef\n\34\3\35\3\35\3\35\3")
        buf.write("\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36")
        buf.write("\3\36\3\36\3\36\3\36\5\36\u0203\n\36\3\37\3\37\3\37\3")
        buf.write("\37\7\37\u0209\n\37\f\37\16\37\u020c\13\37\3\37\5\37\u020f")
        buf.write("\n\37\3 \3 \3 \5 \u0214\n \3!\3!\3!\3!\5!\u021a\n!\3!")
        buf.write("\3!\3!\3!\5!\u0220\n!\3!\5!\u0223\n!\3\"\3\"\3\"\3\"\3")
        buf.write("#\3#\3#\3$\3$\3$\3$\3$\3$\3$\3$\3$\3$\3$\3$\3$\3$\5$\u023a")
        buf.write("\n$\3%\3%\3%\3%\3&\3&\3\'\3\'\3\'\3\'\3(\3(\3(\3(\3)\3")
        buf.write(")\3)\3)\5)\u024e\n)\3*\3*\3*\3*\3+\3+\3+\3+\5+\u0258\n")
        buf.write("+\3,\3,\3,\3,\5,\u025e\n,\3-\3-\3-\3.\3.\3.\3/\3/\3/\3")
        buf.write("\60\3\60\5\60\u026b\n\60\3\60\3\60\3\60\5\60\u0270\n\60")
        buf.write("\3\61\3\61\3\61\7\61\u0275\n\61\f\61\16\61\u0278\13\61")
        buf.write("\3\62\3\62\3\62\3\62\3\62\3\62\7\62\u0280\n\62\f\62\16")
        buf.write("\62\u0283\13\62\5\62\u0285\n\62\3\63\3\63\3\63\3\63\3")
        buf.write("\63\3\63\3\63\3\63\5\63\u028f\n\63\3\64\3\64\3\64\3\65")
        buf.write("\3\65\3\65\7\65\u0297\n\65\f\65\16\65\u029a\13\65\3\66")
        buf.write("\3\66\3\66\7\66\u029f\n\66\f\66\16\66\u02a2\13\66\3\67")
        buf.write("\3\67\3\67\5\67\u02a7\n\67\38\38\38\78\u02ac\n8\f8\16")
        buf.write("8\u02af\138\39\39\39\59\u02b4\n9\39\59\u02b7\n9\39\59")
        buf.write("\u02ba\n9\39\39\39\59\u02bf\n9\59\u02c1\n9\3:\3:\3:\3")
        buf.write(":\3:\3:\3:\3:\3:\3:\3:\3:\3:\3:\3:\3:\3:\3:\5:\u02d5\n")
        buf.write(":\3:\3:\3:\3:\3:\3:\3:\3:\7:\u02df\n:\f:\16:\u02e2\13")
        buf.write(":\3;\3;\3;\3<\3<\3<\3=\3=\3=\3=\3=\5=\u02ef\n=\3>\3>\3")
        buf.write("?\3?\3@\3@\3@\3@\3@\5@\u02fa\n@\3A\3A\3B\3B\3B\3B\3B\3")
        buf.write("B\3B\5B\u0305\nB\3C\3C\5C\u0309\nC\3C\3C\3C\5C\u030e\n")
        buf.write("C\5C\u0310\nC\5C\u0312\nC\3D\3D\3D\3D\3E\3E\3E\3E\3F\3")
        buf.write("F\3F\3F\3G\3G\3G\5G\u0323\nG\3H\3H\3H\3H\3H\3H\5H\u032b")
        buf.write("\nH\3H\5H\u032e\nH\3H\5H\u0331\nH\3I\3I\3I\3I\3I\3I\5")
        buf.write("I\u0339\nI\3I\5I\u033c\nI\3I\5I\u033f\nI\3J\3J\3J\3J\3")
        buf.write("J\3J\5J\u0347\nJ\3J\5J\u034a\nJ\3J\5J\u034d\nJ\3K\3K\5")
        buf.write("K\u0351\nK\3K\3K\3L\3L\3L\3L\3L\3L\3L\3L\3L\3L\5L\u035f")
        buf.write("\nL\3M\3M\3M\3M\7M\u0365\nM\fM\16M\u0368\13M\5M\u036a")
        buf.write("\nM\3M\3M\3N\3N\3N\3N\3O\3O\5O\u0374\nO\3O\3O\3P\3P\3")
        buf.write("P\5P\u037b\nP\3Q\5Q\u037e\nQ\3Q\3Q\5Q\u0382\nQ\3R\3R\3")
        buf.write("R\3S\3S\5S\u0389\nS\3T\3T\3T\3T\7T\u038f\nT\fT\16T\u0392")
        buf.write("\13T\5T\u0394\nT\3T\3T\3U\3U\3U\3U\7U\u039c\nU\fU\16U")
        buf.write("\u039f\13U\5U\u03a1\nU\3U\3U\3V\3V\3V\3V\3W\3W\3W\3W\3")
        buf.write("X\3X\3Y\5Y\u03b0\nY\3Y\3Y\5Y\u03b4\nY\3Y\3Y\3Y\3Y\3Z\3")
        buf.write("Z\5Z\u03bc\nZ\7Z\u03be\nZ\fZ\16Z\u03c1\13Z\3[\3[\3[\3")
        buf.write("[\3[\3[\3[\3[\5[\u03cb\n[\3\\\3\\\3\\\3]\3]\5]\u03d2\n")
        buf.write("]\3]\6]\u03d5\n]\r]\16]\u03d6\3^\3^\3^\5^\u03dc\n^\3^")
        buf.write("\5^\u03df\n^\6^\u03e1\n^\r^\16^\u03e2\3_\3_\5_\u03e7\n")
        buf.write("_\3_\3_\5_\u03eb\n_\3`\3`\3`\5`\u03f0\n`\6`\u03f2\n`\r")
        buf.write("`\16`\u03f3\3a\3a\3b\3b\5b\u03fa\nb\3c\3c\5c\u03fe\nc")
        buf.write("\3d\3d\3d\3d\5d\u0404\nd\3e\3e\5e\u0408\ne\5e\u040a\n")
        buf.write("e\3e\3e\3e\3e\3f\3f\3f\2\3rg\2\4\6\b\n\f\16\20\22\24\26")
        buf.write("\30\32\34\36 \"$&(*,.\60\62\64\668:<>@BDFHJLNPRTVXZ\\")
        buf.write("^`bdfhjlnprtvxz|~\u0080\u0082\u0084\u0086\u0088\u008a")
        buf.write("\u008c\u008e\u0090\u0092\u0094\u0096\u0098\u009a\u009c")
        buf.write("\u009e\u00a0\u00a2\u00a4\u00a6\u00a8\u00aa\u00ac\u00ae")
        buf.write("\u00b0\u00b2\u00b4\u00b6\u00b8\u00ba\u00bc\u00be\u00c0")
        buf.write("\u00c2\u00c4\u00c6\u00c8\u00ca\2\16\4\2\33\34\"\"\4\2")
        buf.write(";<>>\3\2-\60\3\2\62\63\3\2PQ\3\2RT\3\2\37!\5\2\13\21\26")
        buf.write("\26))\4\2\22\22\24\24\5\2\22\22\26\26))\4\2\6\6\n\n\b")
        buf.write("\2\22\22\26\26))Z[]]__\2\u0456\2\u00cd\3\2\2\2\4\u00dc")
        buf.write("\3\2\2\2\6\u010b\3\2\2\2\b\u0114\3\2\2\2\n\u0118\3\2\2")
        buf.write("\2\f\u0127\3\2\2\2\16\u0129\3\2\2\2\20\u0144\3\2\2\2\22")
        buf.write("\u014a\3\2\2\2\24\u014d\3\2\2\2\26\u0151\3\2\2\2\30\u0155")
        buf.write("\3\2\2\2\32\u0164\3\2\2\2\34\u0168\3\2\2\2\36\u016c\3")
        buf.write("\2\2\2 \u017a\3\2\2\2\"\u0186\3\2\2\2$\u0188\3\2\2\2&")
        buf.write("\u018d\3\2\2\2(\u01a2\3\2\2\2*\u01bf\3\2\2\2,\u01c1\3")
        buf.write("\2\2\2.\u01c7\3\2\2\2\60\u01d0\3\2\2\2\62\u01d4\3\2\2")
        buf.write("\2\64\u01dc\3\2\2\2\66\u01ee\3\2\2\28\u01f0\3\2\2\2:\u0202")
        buf.write("\3\2\2\2<\u0204\3\2\2\2>\u0210\3\2\2\2@\u0222\3\2\2\2")
        buf.write("B\u0224\3\2\2\2D\u0228\3\2\2\2F\u0239\3\2\2\2H\u023b\3")
        buf.write("\2\2\2J\u023f\3\2\2\2L\u0241\3\2\2\2N\u0245\3\2\2\2P\u024d")
        buf.write("\3\2\2\2R\u024f\3\2\2\2T\u0253\3\2\2\2V\u0259\3\2\2\2")
        buf.write("X\u025f\3\2\2\2Z\u0262\3\2\2\2\\\u0265\3\2\2\2^\u0268")
        buf.write("\3\2\2\2`\u0271\3\2\2\2b\u0284\3\2\2\2d\u028e\3\2\2\2")
        buf.write("f\u0290\3\2\2\2h\u0293\3\2\2\2j\u029b\3\2\2\2l\u02a6\3")
        buf.write("\2\2\2n\u02a8\3\2\2\2p\u02c0\3\2\2\2r\u02d4\3\2\2\2t\u02e3")
        buf.write("\3\2\2\2v\u02e6\3\2\2\2x\u02ee\3\2\2\2z\u02f0\3\2\2\2")
        buf.write("|\u02f2\3\2\2\2~\u02f9\3\2\2\2\u0080\u02fb\3\2\2\2\u0082")
        buf.write("\u02fd\3\2\2\2\u0084\u0311\3\2\2\2\u0086\u0313\3\2\2\2")
        buf.write("\u0088\u0317\3\2\2\2\u008a\u031b\3\2\2\2\u008c\u0322\3")
        buf.write("\2\2\2\u008e\u0330\3\2\2\2\u0090\u033e\3\2\2\2\u0092\u034c")
        buf.write("\3\2\2\2\u0094\u034e\3\2\2\2\u0096\u035e\3\2\2\2\u0098")
        buf.write("\u0360\3\2\2\2\u009a\u036d\3\2\2\2\u009c\u0371\3\2\2\2")
        buf.write("\u009e\u037a\3\2\2\2\u00a0\u037d\3\2\2\2\u00a2\u0383\3")
        buf.write("\2\2\2\u00a4\u0386\3\2\2\2\u00a6\u038a\3\2\2\2\u00a8\u0397")
        buf.write("\3\2\2\2\u00aa\u03a4\3\2\2\2\u00ac\u03a8\3\2\2\2\u00ae")
        buf.write("\u03ac\3\2\2\2\u00b0\u03af\3\2\2\2\u00b2\u03bf\3\2\2\2")
        buf.write("\u00b4\u03ca\3\2\2\2\u00b6\u03cc\3\2\2\2\u00b8\u03d4\3")
        buf.write("\2\2\2\u00ba\u03e0\3\2\2\2\u00bc\u03e6\3\2\2\2\u00be\u03f1")
        buf.write("\3\2\2\2\u00c0\u03f5\3\2\2\2\u00c2\u03f7\3\2\2\2\u00c4")
        buf.write("\u03fb\3\2\2\2\u00c6\u03ff\3\2\2\2\u00c8\u0409\3\2\2\2")
        buf.write("\u00ca\u040f\3\2\2\2\u00cc\u00ce\5\20\t\2\u00cd\u00cc")
        buf.write("\3\2\2\2\u00cd\u00ce\3\2\2\2\u00ce\u00d2\3\2\2\2\u00cf")
        buf.write("\u00d1\5\4\3\2\u00d0\u00cf\3\2\2\2\u00d1\u00d4\3\2\2\2")
        buf.write("\u00d2\u00d0\3\2\2\2\u00d2\u00d3\3\2\2\2\u00d3\u00d6\3")
        buf.write("\2\2\2\u00d4\u00d2\3\2\2\2\u00d5\u00d7\5\n\6\2\u00d6\u00d5")
        buf.write("\3\2\2\2\u00d7\u00d8\3\2\2\2\u00d8\u00d6\3\2\2\2\u00d8")
        buf.write("\u00d9\3\2\2\2\u00d9\u00da\3\2\2\2\u00da\u00db\7\2\2\3")
        buf.write("\u00db\3\3\2\2\2\u00dc\u00dd\7#\2\2\u00dd\u00e0\7\'\2")
        buf.write("\2\u00de\u00e1\5\6\4\2\u00df\u00e1\7R\2\2\u00e0\u00de")
        buf.write("\3\2\2\2\u00e0\u00df\3\2\2\2\u00e1\u00e2\3\2\2\2\u00e2")
        buf.write("\u00e3\7(\2\2\u00e3\u00e4\7\32\2\2\u00e4\u00e5\7[\2\2")
        buf.write("\u00e5\u00e6\7+\2\2\u00e6\5\3\2\2\2\u00e7\u00ea\7*\2\2")
        buf.write("\u00e8\u00eb\7R\2\2\u00e9\u00eb\5\b\5\2\u00ea\u00e8\3")
        buf.write("\2\2\2\u00ea\u00e9\3\2\2\2\u00eb\u00ee\3\2\2\2\u00ec\u00ed")
        buf.write("\7N\2\2\u00ed\u00ef\5\6\4\2\u00ee\u00ec\3\2\2\2\u00ee")
        buf.write("\u00ef\3\2\2\2\u00ef\u010c\3\2\2\2\u00f0\u00f3\7\26\2")
        buf.write("\2\u00f1\u00f4\7R\2\2\u00f2\u00f4\5\b\5\2\u00f3\u00f1")
        buf.write("\3\2\2\2\u00f3\u00f2\3\2\2\2\u00f4\u00f7\3\2\2\2\u00f5")
        buf.write("\u00f6\7N\2\2\u00f6\u00f8\5\6\4\2\u00f7\u00f5\3\2\2\2")
        buf.write("\u00f7\u00f8\3\2\2\2\u00f8\u010c\3\2\2\2\u00f9\u00fc\7")
        buf.write(")\2\2\u00fa\u00fd\7R\2\2\u00fb\u00fd\5\b\5\2\u00fc\u00fa")
        buf.write("\3\2\2\2\u00fc\u00fb\3\2\2\2\u00fd\u0100\3\2\2\2\u00fe")
        buf.write("\u00ff\7N\2\2\u00ff\u0101\5\6\4\2\u0100\u00fe\3\2\2\2")
        buf.write("\u0100\u0101\3\2\2\2\u0101\u010c\3\2\2\2\u0102\u0105\7")
        buf.write("\22\2\2\u0103\u0106\7R\2\2\u0104\u0106\5\b\5\2\u0105\u0103")
        buf.write("\3\2\2\2\u0105\u0104\3\2\2\2\u0106\u0109\3\2\2\2\u0107")
        buf.write("\u0108\7N\2\2\u0108\u010a\5\6\4\2\u0109\u0107\3\2\2\2")
        buf.write("\u0109\u010a\3\2\2\2\u010a\u010c\3\2\2\2\u010b\u00e7\3")
        buf.write("\2\2\2\u010b\u00f0\3\2\2\2\u010b\u00f9\3\2\2\2\u010b\u0102")
        buf.write("\3\2\2\2\u010c\7\3\2\2\2\u010d\u010e\7%\2\2\u010e\u0115")
        buf.write("\7_\2\2\u010f\u0110\7%\2\2\u0110\u0111\7\'\2\2\u0111\u0112")
        buf.write("\5\62\32\2\u0112\u0113\7(\2\2\u0113\u0115\3\2\2\2\u0114")
        buf.write("\u010d\3\2\2\2\u0114\u010f\3\2\2\2\u0115\t\3\2\2\2\u0116")
        buf.write("\u0119\5\f\7\2\u0117\u0119\5\16\b\2\u0118\u0116\3\2\2")
        buf.write("\2\u0118\u0117\3\2\2\2\u0119\13\3\2\2\2\u011a\u011b\7")
        buf.write("\26\2\2\u011b\u011e\7_\2\2\u011c\u011d\7$\2\2\u011d\u011f")
        buf.write("\7]\2\2\u011e\u011c\3\2\2\2\u011e\u011f\3\2\2\2\u011f")
        buf.write("\u0120\3\2\2\2\u0120\u0128\5\32\16\2\u0121\u0122\7)\2")
        buf.write("\2\u0122\u0123\7_\2\2\u0123\u0128\5\32\16\2\u0124\u0125")
        buf.write("\7\22\2\2\u0125\u0126\7_\2\2\u0126\u0128\5\36\20\2\u0127")
        buf.write("\u011a\3\2\2\2\u0127\u0121\3\2\2\2\u0127\u0124\3\2\2\2")
        buf.write("\u0128\r\3\2\2\2\u0129\u012a\7*\2\2\u012a\u012c\7_\2\2")
        buf.write("\u012b\u012d\5\22\n\2\u012c\u012b\3\2\2\2\u012c\u012d")
        buf.write("\3\2\2\2\u012d\u012e\3\2\2\2\u012e\u0132\7\'\2\2\u012f")
        buf.write("\u0131\5\34\17\2\u0130\u012f\3\2\2\2\u0131\u0134\3\2\2")
        buf.write("\2\u0132\u0130\3\2\2\2\u0132\u0133\3\2\2\2\u0133\u0136")
        buf.write("\3\2\2\2\u0134\u0132\3\2\2\2\u0135\u0137\5\24\13\2\u0136")
        buf.write("\u0135\3\2\2\2\u0136\u0137\3\2\2\2\u0137\u013c\3\2\2\2")
        buf.write("\u0138\u013b\5:\36\2\u0139\u013b\5\30\r\2\u013a\u0138")
        buf.write("\3\2\2\2\u013a\u0139\3\2\2\2\u013b\u013e\3\2\2\2\u013c")
        buf.write("\u013a\3\2\2\2\u013c\u013d\3\2\2\2\u013d\u0140\3\2\2\2")
        buf.write("\u013e\u013c\3\2\2\2\u013f\u0141\5\26\f\2\u0140\u013f")
        buf.write("\3\2\2\2\u0140\u0141\3\2\2\2\u0141\u0142\3\2\2\2\u0142")
        buf.write("\u0143\7(\2\2\u0143\17\3\2\2\2\u0144\u0145\7\3\2\2\u0145")
        buf.write("\u0146\7$\2\2\u0146\u0148\7[\2\2\u0147\u0149\7+\2\2\u0148")
        buf.write("\u0147\3\2\2\2\u0148\u0149\3\2\2\2\u0149\21\3\2\2\2\u014a")
        buf.write("\u014b\7$\2\2\u014b\u014c\5\62\32\2\u014c\23\3\2\2\2\u014d")
        buf.write("\u014e\7\32\2\2\u014e\u014f\7\33\2\2\u014f\u0150\5\66")
        buf.write("\34\2\u0150\25\3\2\2\2\u0151\u0152\7\32\2\2\u0152\u0153")
        buf.write("\7\34\2\2\u0153\u0154\5\66\34\2\u0154\27\3\2\2\2\u0155")
        buf.write("\u0156\7\32\2\2\u0156\u0157\7\"\2\2\u0157\u0158\5\66\34")
        buf.write("\2\u0158\31\3\2\2\2\u0159\u015d\7\'\2\2\u015a\u015c\5")
        buf.write("\34\17\2\u015b\u015a\3\2\2\2\u015c\u015f\3\2\2\2\u015d")
        buf.write("\u015b\3\2\2\2\u015d\u015e\3\2\2\2\u015e\u0160\3\2\2\2")
        buf.write("\u015f\u015d\3\2\2\2\u0160\u0165\7(\2\2\u0161\u0162\7")
        buf.write("$\2\2\u0162\u0165\5\34\17\2\u0163\u0165\7+\2\2\u0164\u0159")
        buf.write("\3\2\2\2\u0164\u0161\3\2\2\2\u0164\u0163\3\2\2\2\u0165")
        buf.write("\33\3\2\2\2\u0166\u0169\5&\24\2\u0167\u0169\5*\26\2\u0168")
        buf.write("\u0166\3\2\2\2\u0168\u0167\3\2\2\2\u0169\35\3\2\2\2\u016a")
        buf.write("\u016d\5 \21\2\u016b\u016d\5\"\22\2\u016c\u016a\3\2\2")
        buf.write("\2\u016c\u016b\3\2\2\2\u016d\37\3\2\2\2\u016e\u016f\7")
        buf.write("\'\2\2\u016f\u0170\5$\23\2\u0170\u0171\7\31\2\2\u0171")
        buf.write("\u0172\5\66\34\2\u0172\u0173\7(\2\2\u0173\u017b\3\2\2")
        buf.write("\2\u0174\u0175\7$\2\2\u0175\u0176\5$\23\2\u0176\u0177")
        buf.write("\7\31\2\2\u0177\u0178\5\66\34\2\u0178\u0179\7+\2\2\u0179")
        buf.write("\u017b\3\2\2\2\u017a\u016e\3\2\2\2\u017a\u0174\3\2\2\2")
        buf.write("\u017b!\3\2\2\2\u017c\u017d\7\'\2\2\u017d\u017e\5$\23")
        buf.write("\2\u017e\u017f\5\u00b0Y\2\u017f\u0180\7(\2\2\u0180\u0187")
        buf.write("\3\2\2\2\u0181\u0182\7$\2\2\u0182\u0183\5$\23\2\u0183")
        buf.write("\u0184\5\u00b0Y\2\u0184\u0185\7+\2\2\u0185\u0187\3\2\2")
        buf.write("\2\u0186\u017c\3\2\2\2\u0186\u0181\3\2\2\2\u0187#\3\2")
        buf.write("\2\2\u0188\u0189\7L\2\2\u0189\u018a\7K\2\2\u018a\u018b")
        buf.write("\7_\2\2\u018b\u018c\7+\2\2\u018c%\3\2\2\2\u018d\u018f")
        buf.write("\7L\2\2\u018e\u0190\7M\2\2\u018f\u018e\3\2\2\2\u018f\u0190")
        buf.write("\3\2\2\2\u0190\u0192\3\2\2\2\u0191\u0193\7K\2\2\u0192")
        buf.write("\u0191\3\2\2\2\u0192\u0193\3\2\2\2\u0193\u0194\3\2\2\2")
        buf.write("\u0194\u0199\5(\25\2\u0195\u0196\7N\2\2\u0196\u0198\5")
        buf.write("(\25\2\u0197\u0195\3\2\2\2\u0198\u019b\3\2\2\2\u0199\u0197")
        buf.write("\3\2\2\2\u0199\u019a\3\2\2\2\u019a\u019c\3\2\2\2\u019b")
        buf.write("\u0199\3\2\2\2\u019c\u019d\7+\2\2\u019d\'\3\2\2\2\u019e")
        buf.write("\u01a3\7_\2\2\u019f\u01a0\7_\2\2\u01a0\u01a1\7,\2\2\u01a1")
        buf.write("\u01a3\5V,\2\u01a2\u019e\3\2\2\2\u01a2\u019f\3\2\2\2\u01a3")
        buf.write(")\3\2\2\2\u01a4\u01a5\7O\2\2\u01a5\u01a9\5\60\31\2\u01a6")
        buf.write("\u01a7\5.\30\2\u01a7\u01a8\5,\27\2\u01a8\u01aa\3\2\2\2")
        buf.write("\u01a9\u01a6\3\2\2\2\u01a9\u01aa\3\2\2\2\u01aa\u01b4\3")
        buf.write("\2\2\2\u01ab\u01ac\7N\2\2\u01ac\u01b0\5\60\31\2\u01ad")
        buf.write("\u01ae\5.\30\2\u01ae\u01af\5,\27\2\u01af\u01b1\3\2\2\2")
        buf.write("\u01b0\u01ad\3\2\2\2\u01b0\u01b1\3\2\2\2\u01b1\u01b3\3")
        buf.write("\2\2\2\u01b2\u01ab\3\2\2\2\u01b3\u01b6\3\2\2\2\u01b4\u01b2")
        buf.write("\3\2\2\2\u01b4\u01b5\3\2\2\2\u01b5\u01b7\3\2\2\2\u01b6")
        buf.write("\u01b4\3\2\2\2\u01b7\u01b8\7+\2\2\u01b8\u01c0\3\2\2\2")
        buf.write("\u01b9\u01ba\7O\2\2\u01ba\u01bc\7_\2\2\u01bb\u01bd\5,")
        buf.write("\27\2\u01bc\u01bb\3\2\2\2\u01bc\u01bd\3\2\2\2\u01bd\u01be")
        buf.write("\3\2\2\2\u01be\u01c0\5\66\34\2\u01bf\u01a4\3\2\2\2\u01bf")
        buf.write("\u01b9\3\2\2\2\u01c0+\3\2\2\2\u01c1\u01c3\7\32\2\2\u01c2")
        buf.write("\u01c4\5\62\32\2\u01c3\u01c2\3\2\2\2\u01c3\u01c4\3\2\2")
        buf.write("\2\u01c4\u01c5\3\2\2\2\u01c5\u01c6\t\2\2\2\u01c6-\3\2")
        buf.write("\2\2\u01c7\u01c9\7%\2\2\u01c8\u01ca\5\64\33\2\u01c9\u01c8")
        buf.write("\3\2\2\2\u01c9\u01ca\3\2\2\2\u01ca\u01ce\3\2\2\2\u01cb")
        buf.write("\u01cf\7%\2\2\u01cc\u01cd\7&\2\2\u01cd\u01cf\5V,\2\u01ce")
        buf.write("\u01cb\3\2\2\2\u01ce\u01cc\3\2\2\2\u01cf/\3\2\2\2\u01d0")
        buf.write("\u01d1\7_\2\2\u01d1\u01d2\7B\2\2\u01d2\u01d3\7_\2\2\u01d3")
        buf.write("\61\3\2\2\2\u01d4\u01d9\7_\2\2\u01d5\u01d6\7N\2\2\u01d6")
        buf.write("\u01d8\7_\2\2\u01d7\u01d5\3\2\2\2\u01d8\u01db\3\2\2\2")
        buf.write("\u01d9\u01d7\3\2\2\2\u01d9\u01da\3\2\2\2\u01da\63\3\2")
        buf.write("\2\2\u01db\u01d9\3\2\2\2\u01dc\u01e1\5V,\2\u01dd\u01de")
        buf.write("\7N\2\2\u01de\u01e0\5V,\2\u01df\u01dd\3\2\2\2\u01e0\u01e3")
        buf.write("\3\2\2\2\u01e1\u01df\3\2\2\2\u01e1\u01e2\3\2\2\2\u01e2")
        buf.write("\65\3\2\2\2\u01e3\u01e1\3\2\2\2\u01e4\u01e8\7\'\2\2\u01e5")
        buf.write("\u01e7\5:\36\2\u01e6\u01e5\3\2\2\2\u01e7\u01ea\3\2\2\2")
        buf.write("\u01e8\u01e6\3\2\2\2\u01e8\u01e9\3\2\2\2\u01e9\u01eb\3")
        buf.write("\2\2\2\u01ea\u01e8\3\2\2\2\u01eb\u01ef\7(\2\2\u01ec\u01ed")
        buf.write("\7$\2\2\u01ed\u01ef\5:\36\2\u01ee\u01e4\3\2\2\2\u01ee")
        buf.write("\u01ec\3\2\2\2\u01ef\67\3\2\2\2\u01f0\u01f1\5\62\32\2")
        buf.write("\u01f1\u01f2\5\66\34\2\u01f29\3\2\2\2\u01f3\u0203\5\66")
        buf.write("\34\2\u01f4\u0203\58\35\2\u01f5\u01f6\5V,\2\u01f6\u01f7")
        buf.write("\7+\2\2\u01f7\u0203\3\2\2\2\u01f8\u0203\5<\37\2\u01f9")
        buf.write("\u0203\5> \2\u01fa\u0203\5F$\2\u01fb\u0203\5H%\2\u01fc")
        buf.write("\u01fd\5J&\2\u01fd\u01fe\7+\2\2\u01fe\u0203\3\2\2\2\u01ff")
        buf.write("\u0203\5L\'\2\u0200\u0203\5N(\2\u0201\u0203\5P)\2\u0202")
        buf.write("\u01f3\3\2\2\2\u0202\u01f4\3\2\2\2\u0202\u01f5\3\2\2\2")
        buf.write("\u0202\u01f8\3\2\2\2\u0202\u01f9\3\2\2\2\u0202\u01fa\3")
        buf.write("\2\2\2\u0202\u01fb\3\2\2\2\u0202\u01fc\3\2\2\2\u0202\u01ff")
        buf.write("\3\2\2\2\u0202\u0200\3\2\2\2\u0202\u0201\3\2\2\2\u0203")
        buf.write(";\3\2\2\2\u0204\u0205\7\64\2\2\u0205\u0206\5V,\2\u0206")
        buf.write("\u020a\5\66\34\2\u0207\u0209\5B\"\2\u0208\u0207\3\2\2")
        buf.write("\2\u0209\u020c\3\2\2\2\u020a\u0208\3\2\2\2\u020a\u020b")
        buf.write("\3\2\2\2\u020b\u020e\3\2\2\2\u020c\u020a\3\2\2\2\u020d")
        buf.write("\u020f\5D#\2\u020e\u020d\3\2\2\2\u020e\u020f\3\2\2\2\u020f")
        buf.write("=\3\2\2\2\u0210\u0211\7A\2\2\u0211\u0213\5\66\34\2\u0212")
        buf.write("\u0214\5@!\2\u0213\u0212\3\2\2\2\u0213\u0214\3\2\2\2\u0214")
        buf.write("?\3\2\2\2\u0215\u0219\7\66\2\2\u0216\u0217\7V\2\2\u0217")
        buf.write("\u0218\7_\2\2\u0218\u021a\7W\2\2\u0219\u0216\3\2\2\2\u0219")
        buf.write("\u021a\3\2\2\2\u021a\u021b\3\2\2\2\u021b\u0223\5\66\34")
        buf.write("\2\u021c\u021f\7\66\2\2\u021d\u021e\7\32\2\2\u021e\u0220")
        buf.write("\7_\2\2\u021f\u021d\3\2\2\2\u021f\u0220\3\2\2\2\u0220")
        buf.write("\u0221\3\2\2\2\u0221\u0223\5\66\34\2\u0222\u0215\3\2\2")
        buf.write("\2\u0222\u021c\3\2\2\2\u0223A\3\2\2\2\u0224\u0225\7\65")
        buf.write("\2\2\u0225\u0226\5V,\2\u0226\u0227\5\66\34\2\u0227C\3")
        buf.write("\2\2\2\u0228\u0229\7\66\2\2\u0229\u022a\5\66\34\2\u022a")
        buf.write("E\3\2\2\2\u022b\u022c\7\67\2\2\u022c\u022d\5V,\2\u022d")
        buf.write("\u022e\78\2\2\u022e\u022f\5V,\2\u022f\u0230\79\2\2\u0230")
        buf.write("\u0231\5V,\2\u0231\u0232\5\66\34\2\u0232\u023a\3\2\2\2")
        buf.write("\u0233\u0234\7\67\2\2\u0234\u0235\7_\2\2\u0235\u0236\7")
        buf.write("J\2\2\u0236\u0237\5V,\2\u0237\u0238\5\66\34\2\u0238\u023a")
        buf.write("\3\2\2\2\u0239\u022b\3\2\2\2\u0239\u0233\3\2\2\2\u023a")
        buf.write("G\3\2\2\2\u023b\u023c\7:\2\2\u023c\u023d\5V,\2\u023d\u023e")
        buf.write("\5\66\34\2\u023eI\3\2\2\2\u023f\u0240\t\3\2\2\u0240K\3")
        buf.write("\2\2\2\u0241\u0242\7@\2\2\u0242\u0243\5V,\2\u0243\u0244")
        buf.write("\7+\2\2\u0244M\3\2\2\2\u0245\u0246\7?\2\2\u0246\u0247")
        buf.write("\5V,\2\u0247\u0248\7+\2\2\u0248O\3\2\2\2\u0249\u024e\5")
        buf.write("R*\2\u024a\u024e\5T+\2\u024b\u024c\7=\2\2\u024c\u024e")
        buf.write("\7+\2\2\u024d\u0249\3\2\2\2\u024d\u024a\3\2\2\2\u024d")
        buf.write("\u024b\3\2\2\2\u024eQ\3\2\2\2\u024f\u0250\7\27\2\2\u0250")
        buf.write("\u0251\5V,\2\u0251\u0252\7+\2\2\u0252S\3\2\2\2\u0253\u0254")
        buf.write("\7\30\2\2\u0254\u0257\5V,\2\u0255\u0258\7+\2\2\u0256\u0258")
        buf.write("\5D#\2\u0257\u0255\3\2\2\2\u0257\u0256\3\2\2\2\u0258U")
        buf.write("\3\2\2\2\u0259\u025d\5^\60\2\u025a\u025e\5X-\2\u025b\u025e")
        buf.write("\5Z.\2\u025c\u025e\5\\/\2\u025d\u025a\3\2\2\2\u025d\u025b")
        buf.write("\3\2\2\2\u025d\u025c\3\2\2\2\u025d\u025e\3\2\2\2\u025e")
        buf.write("W\3\2\2\2\u025f\u0260\7,\2\2\u0260\u0261\5V,\2\u0261Y")
        buf.write("\3\2\2\2\u0262\u0263\7\61\2\2\u0263\u0264\5V,\2\u0264")
        buf.write("[\3\2\2\2\u0265\u0266\t\4\2\2\u0266\u0267\5V,\2\u0267")
        buf.write("]\3\2\2\2\u0268\u026f\5`\61\2\u0269\u026b\7C\2\2\u026a")
        buf.write("\u0269\3\2\2\2\u026a\u026b\3\2\2\2\u026b\u026c\3\2\2\2")
        buf.write("\u026c\u026d\5\u008cG\2\u026d\u026e\5V,\2\u026e\u0270")
        buf.write("\3\2\2\2\u026f\u026a\3\2\2\2\u026f\u0270\3\2\2\2\u0270")
        buf.write("_\3\2\2\2\u0271\u0276\5b\62\2\u0272\u0273\t\5\2\2\u0273")
        buf.write("\u0275\5b\62\2\u0274\u0272\3\2\2\2\u0275\u0278\3\2\2\2")
        buf.write("\u0276\u0274\3\2\2\2\u0276\u0277\3\2\2\2\u0277a\3\2\2")
        buf.write("\2\u0278\u0276\3\2\2\2\u0279\u027a\7C\2\2\u027a\u0285")
        buf.write("\5b\62\2\u027b\u0281\5h\65\2\u027c\u027d\5d\63\2\u027d")
        buf.write("\u027e\5h\65\2\u027e\u0280\3\2\2\2\u027f\u027c\3\2\2\2")
        buf.write("\u0280\u0283\3\2\2\2\u0281\u027f\3\2\2\2\u0281\u0282\3")
        buf.write("\2\2\2\u0282\u0285\3\2\2\2\u0283\u0281\3\2\2\2\u0284\u0279")
        buf.write("\3\2\2\2\u0284\u027b\3\2\2\2\u0285c\3\2\2\2\u0286\u028f")
        buf.write("\7D\2\2\u0287\u028f\7E\2\2\u0288\u028f\7F\2\2\u0289\u028f")
        buf.write("\7G\2\2\u028a\u028f\7H\2\2\u028b\u028f\7I\2\2\u028c\u028f")
        buf.write("\7J\2\2\u028d\u028f\5f\64\2\u028e\u0286\3\2\2\2\u028e")
        buf.write("\u0287\3\2\2\2\u028e\u0288\3\2\2\2\u028e\u0289\3\2\2\2")
        buf.write("\u028e\u028a\3\2\2\2\u028e\u028b\3\2\2\2\u028e\u028c\3")
        buf.write("\2\2\2\u028e\u028d\3\2\2\2\u028fe\3\2\2\2\u0290\u0291")
        buf.write("\7C\2\2\u0291\u0292\7J\2\2\u0292g\3\2\2\2\u0293\u0298")
        buf.write("\5j\66\2\u0294\u0295\t\6\2\2\u0295\u0297\5j\66\2\u0296")
        buf.write("\u0294\3\2\2\2\u0297\u029a\3\2\2\2\u0298\u0296\3\2\2\2")
        buf.write("\u0298\u0299\3\2\2\2\u0299i\3\2\2\2\u029a\u0298\3\2\2")
        buf.write("\2\u029b\u02a0\5l\67\2\u029c\u029d\t\7\2\2\u029d\u029f")
        buf.write("\5l\67\2\u029e\u029c\3\2\2\2\u029f\u02a2\3\2\2\2\u02a0")
        buf.write("\u029e\3\2\2\2\u02a0\u02a1\3\2\2\2\u02a1k\3\2\2\2\u02a2")
        buf.write("\u02a0\3\2\2\2\u02a3\u02a4\t\6\2\2\u02a4\u02a7\5l\67\2")
        buf.write("\u02a5\u02a7\5n8\2\u02a6\u02a3\3\2\2\2\u02a6\u02a5\3\2")
        buf.write("\2\2\u02a7m\3\2\2\2\u02a8\u02ad\5p9\2\u02a9\u02aa\7U\2")
        buf.write("\2\u02aa\u02ac\5l\67\2\u02ab\u02a9\3\2\2\2\u02ac\u02af")
        buf.write("\3\2\2\2\u02ad\u02ab\3\2\2\2\u02ad\u02ae\3\2\2\2\u02ae")
        buf.write("o\3\2\2\2\u02af\u02ad\3\2\2\2\u02b0\u02b6\5r:\2\u02b1")
        buf.write("\u02b3\7V\2\2\u02b2\u02b4\5\64\33\2\u02b3\u02b2\3\2\2")
        buf.write("\2\u02b3\u02b4\3\2\2\2\u02b4\u02b5\3\2\2\2\u02b5\u02b7")
        buf.write("\7W\2\2\u02b6\u02b1\3\2\2\2\u02b6\u02b7\3\2\2\2\u02b7")
        buf.write("\u02c1\3\2\2\2\u02b8\u02ba\5r:\2\u02b9\u02b8\3\2\2\2\u02b9")
        buf.write("\u02ba\3\2\2\2\u02ba\u02bb\3\2\2\2\u02bb\u02bc\7%\2\2")
        buf.write("\u02bc\u02be\7_\2\2\u02bd\u02bf\5\u00a6T\2\u02be\u02bd")
        buf.write("\3\2\2\2\u02be\u02bf\3\2\2\2\u02bf\u02c1\3\2\2\2\u02c0")
        buf.write("\u02b0\3\2\2\2\u02c0\u02b9\3\2\2\2\u02c1q\3\2\2\2\u02c2")
        buf.write("\u02c3\b:\1\2\u02c3\u02d5\7]\2\2\u02c4\u02d5\7Z\2\2\u02c5")
        buf.write("\u02d5\7[\2\2\u02c6\u02d5\7\\\2\2\u02c7\u02d5\7^\2\2\u02c8")
        buf.write("\u02d5\7_\2\2\u02c9\u02d5\5\u0084C\2\u02ca\u02d5\5\u0094")
        buf.write("K\2\u02cb\u02d5\5\u0098M\2\u02cc\u02cd\7V\2\2\u02cd\u02ce")
        buf.write("\5V,\2\u02ce\u02cf\7W\2\2\u02cf\u02d5\3\2\2\2\u02d0\u02d5")
        buf.write("\5\u009cO\2\u02d1\u02d5\5t;\2\u02d2\u02d5\5v<\2\u02d3")
        buf.write("\u02d5\5\u00aeX\2\u02d4\u02c2\3\2\2\2\u02d4\u02c4\3\2")
        buf.write("\2\2\u02d4\u02c5\3\2\2\2\u02d4\u02c6\3\2\2\2\u02d4\u02c7")
        buf.write("\3\2\2\2\u02d4\u02c8\3\2\2\2\u02d4\u02c9\3\2\2\2\u02d4")
        buf.write("\u02ca\3\2\2\2\u02d4\u02cb\3\2\2\2\u02d4\u02cc\3\2\2\2")
        buf.write("\u02d4\u02d0\3\2\2\2\u02d4\u02d1\3\2\2\2\u02d4\u02d2\3")
        buf.write("\2\2\2\u02d4\u02d3\3\2\2\2\u02d5\u02e0\3\2\2\2\u02d6\u02d7")
        buf.write("\f\b\2\2\u02d7\u02d8\7B\2\2\u02d8\u02df\5x=\2\u02d9\u02da")
        buf.write("\f\7\2\2\u02da\u02db\7B\2\2\u02db\u02df\7_\2\2\u02dc\u02dd")
        buf.write("\f\6\2\2\u02dd\u02df\5\u0096L\2\u02de\u02d6\3\2\2\2\u02de")
        buf.write("\u02d9\3\2\2\2\u02de\u02dc\3\2\2\2\u02df\u02e2\3\2\2\2")
        buf.write("\u02e0\u02de\3\2\2\2\u02e0\u02e1\3\2\2\2\u02e1s\3\2\2")
        buf.write("\2\u02e2\u02e0\3\2\2\2\u02e3\u02e4\7\4\2\2\u02e4\u02e5")
        buf.write("\5V,\2\u02e5u\3\2\2\2\u02e6\u02e7\7R\2\2\u02e7\u02e8\5")
        buf.write("V,\2\u02e8w\3\2\2\2\u02e9\u02ef\5z>\2\u02ea\u02ef\5|?")
        buf.write("\2\u02eb\u02ef\5~@\2\u02ec\u02ef\5\u0080A\2\u02ed\u02ef")
        buf.write("\5\u0082B\2\u02ee\u02e9\3\2\2\2\u02ee\u02ea\3\2\2\2\u02ee")
        buf.write("\u02eb\3\2\2\2\u02ee\u02ec\3\2\2\2\u02ee\u02ed\3\2\2\2")
        buf.write("\u02efy\3\2\2\2\u02f0\u02f1\5\u00aeX\2\u02f1{\3\2\2\2")
        buf.write("\u02f2\u02f3\t\b\2\2\u02f3}\3\2\2\2\u02f4\u02fa\7\36\2")
        buf.write("\2\u02f5\u02f6\7\'\2\2\u02f6\u02f7\5\62\32\2\u02f7\u02f8")
        buf.write("\7(\2\2\u02f8\u02fa\3\2\2\2\u02f9\u02f4\3\2\2\2\u02f9")
        buf.write("\u02f5\3\2\2\2\u02fa\177\3\2\2\2\u02fb\u02fc\7\35\2\2")
        buf.write("\u02fc\u0081\3\2\2\2\u02fd\u02fe\7\13\2\2\u02fe\u02ff")
        buf.write("\7%\2\2\u02ff\u0304\7_\2\2\u0300\u0301\7V\2\2\u0301\u0302")
        buf.write("\5\64\33\2\u0302\u0303\7W\2\2\u0303\u0305\3\2\2\2\u0304")
        buf.write("\u0300\3\2\2\2\u0304\u0305\3\2\2\2\u0305\u0083\3\2\2\2")
        buf.write("\u0306\u0308\5\u0086D\2\u0307\u0309\5\u00a8U\2\u0308\u0307")
        buf.write("\3\2\2\2\u0308\u0309\3\2\2\2\u0309\u0312\3\2\2\2\u030a")
        buf.write("\u030f\5\u008cG\2\u030b\u030d\5\u0086D\2\u030c\u030e\5")
        buf.write("\u00a8U\2\u030d\u030c\3\2\2\2\u030d\u030e\3\2\2\2\u030e")
        buf.write("\u0310\3\2\2\2\u030f\u030b\3\2\2\2\u030f\u0310\3\2\2\2")
        buf.write("\u0310\u0312\3\2\2\2\u0311\u0306\3\2\2\2\u0311\u030a\3")
        buf.write("\2\2\2\u0312\u0085\3\2\2\2\u0313\u0314\7\26\2\2\u0314")
        buf.write("\u0315\7%\2\2\u0315\u0316\7_\2\2\u0316\u0087\3\2\2\2\u0317")
        buf.write("\u0318\7*\2\2\u0318\u0319\7%\2\2\u0319\u031a\7_\2\2\u031a")
        buf.write("\u0089\3\2\2\2\u031b\u031c\7\22\2\2\u031c\u031d\7%\2\2")
        buf.write("\u031d\u031e\7_\2\2\u031e\u008b\3\2\2\2\u031f\u0323\5")
        buf.write("\u008eH\2\u0320\u0323\5\u0090I\2\u0321\u0323\5\u0092J")
        buf.write("\2\u0322\u031f\3\2\2\2\u0322\u0320\3\2\2\2\u0322\u0321")
        buf.write("\3\2\2\2\u0323\u008d\3\2\2\2\u0324\u0331\7\5\2\2\u0325")
        buf.write("\u032d\7Q\2\2\u0326\u0327\7X\2\2\u0327\u032a\7_\2\2\u0328")
        buf.write("\u032b\5\u00a6T\2\u0329\u032b\5\u00a8U\2\u032a\u0328\3")
        buf.write("\2\2\2\u032a\u0329\3\2\2\2\u032a\u032b\3\2\2\2\u032b\u032c")
        buf.write("\3\2\2\2\u032c\u032e\7Y\2\2\u032d\u0326\3\2\2\2\u032d")
        buf.write("\u032e\3\2\2\2\u032e\u032f\3\2\2\2\u032f\u0331\7\6\2\2")
        buf.write("\u0330\u0324\3\2\2\2\u0330\u0325\3\2\2\2\u0331\u008f\3")
        buf.write("\2\2\2\u0332\u033f\7\7\2\2\u0333\u033b\7\b\2\2\u0334\u0335")
        buf.write("\7X\2\2\u0335\u0338\7_\2\2\u0336\u0339\5\u00a6T\2\u0337")
        buf.write("\u0339\5\u00a8U\2\u0338\u0336\3\2\2\2\u0338\u0337\3\2")
        buf.write("\2\2\u0338\u0339\3\2\2\2\u0339\u033a\3\2\2\2\u033a\u033c")
        buf.write("\7Y\2\2\u033b\u0334\3\2\2\2\u033b\u033c\3\2\2\2\u033c")
        buf.write("\u033d\3\2\2\2\u033d\u033f\7Q\2\2\u033e\u0332\3\2\2\2")
        buf.write("\u033e\u0333\3\2\2\2\u033f\u0091\3\2\2\2\u0340\u034d\7")
        buf.write("\t\2\2\u0341\u0349\7\b\2\2\u0342\u0343\7X\2\2\u0343\u0346")
        buf.write("\7_\2\2\u0344\u0347\5\u00a6T\2\u0345\u0347\5\u00a8U\2")
        buf.write("\u0346\u0344\3\2\2\2\u0346\u0345\3\2\2\2\u0346\u0347\3")
        buf.write("\2\2\2\u0347\u0348\3\2\2\2\u0348\u034a\7Y\2\2\u0349\u0342")
        buf.write("\3\2\2\2\u0349\u034a\3\2\2\2\u034a\u034b\3\2\2\2\u034b")
        buf.write("\u034d\7\6\2\2\u034c\u0340\3\2\2\2\u034c\u0341\3\2\2\2")
        buf.write("\u034d\u0093\3\2\2\2\u034e\u0350\7X\2\2\u034f\u0351\5")
        buf.write("\64\33\2\u0350\u034f\3\2\2\2\u0350\u0351\3\2\2\2\u0351")
        buf.write("\u0352\3\2\2\2\u0352\u0353\7Y\2\2\u0353\u0095\3\2\2\2")
        buf.write("\u0354\u0355\7X\2\2\u0355\u0356\5V,\2\u0356\u0357\7Y\2")
        buf.write("\2\u0357\u035f\3\2\2\2\u0358\u0359\7X\2\2\u0359\u035a")
        buf.write("\5V,\2\u035a\u035b\7$\2\2\u035b\u035c\5V,\2\u035c\u035d")
        buf.write("\7Y\2\2\u035d\u035f\3\2\2\2\u035e\u0354\3\2\2\2\u035e")
        buf.write("\u0358\3\2\2\2\u035f\u0097\3\2\2\2\u0360\u0369\7\'\2\2")
        buf.write("\u0361\u0366\5\u009aN\2\u0362\u0363\7N\2\2\u0363\u0365")
        buf.write("\5\u009aN\2\u0364\u0362\3\2\2\2\u0365\u0368\3\2\2\2\u0366")
        buf.write("\u0364\3\2\2\2\u0366\u0367\3\2\2\2\u0367\u036a\3\2\2\2")
        buf.write("\u0368\u0366\3\2\2\2\u0369\u0361\3\2\2\2\u0369\u036a\3")
        buf.write("\2\2\2\u036a\u036b\3\2\2\2\u036b\u036c\7(\2\2\u036c\u0099")
        buf.write("\3\2\2\2\u036d\u036e\7[\2\2\u036e\u036f\7$\2\2\u036f\u0370")
        buf.write("\5V,\2\u0370\u009b\3\2\2\2\u0371\u0373\7\31\2\2\u0372")
        buf.write("\u0374\5V,\2\u0373\u0372\3\2\2\2\u0373\u0374\3\2\2\2\u0374")
        buf.write("\u0375\3\2\2\2\u0375\u0376\5\u009eP\2\u0376\u009d\3\2")
        buf.write("\2\2\u0377\u037b\5\u00a0Q\2\u0378\u037b\5\u00a4S\2\u0379")
        buf.write("\u037b\5\u00a2R\2\u037a\u0377\3\2\2\2\u037a\u0378\3\2")
        buf.write("\2\2\u037a\u0379\3\2\2\2\u037b\u009f\3\2\2\2\u037c\u037e")
        buf.write("\5\u008cG\2\u037d\u037c\3\2\2\2\u037d\u037e\3\2\2\2\u037e")
        buf.write("\u037f\3\2\2\2\u037f\u0381\5\u0086D\2\u0380\u0382\5\u00a6")
        buf.write("T\2\u0381\u0380\3\2\2\2\u0381\u0382\3\2\2\2\u0382\u00a1")
        buf.write("\3\2\2\2\u0383\u0384\5\u008cG\2\u0384\u0385\5\u008aF\2")
        buf.write("\u0385\u00a3\3\2\2\2\u0386\u0388\5\u0088E\2\u0387\u0389")
        buf.write("\5\u00a6T\2\u0388\u0387\3\2\2\2\u0388\u0389\3\2\2\2\u0389")
        buf.write("\u00a5\3\2\2\2\u038a\u0393\7V\2\2\u038b\u0390\5\u00aa")
        buf.write("V\2\u038c\u038d\7N\2\2\u038d\u038f\5\u00aaV\2\u038e\u038c")
        buf.write("\3\2\2\2\u038f\u0392\3\2\2\2\u0390\u038e\3\2\2\2\u0390")
        buf.write("\u0391\3\2\2\2\u0391\u0394\3\2\2\2\u0392\u0390\3\2\2\2")
        buf.write("\u0393\u038b\3\2\2\2\u0393\u0394\3\2\2\2\u0394\u0395\3")
        buf.write("\2\2\2\u0395\u0396\7W\2\2\u0396\u00a7\3\2\2\2\u0397\u03a0")
        buf.write("\7V\2\2\u0398\u039d\5\u00acW\2\u0399\u039a\7N\2\2\u039a")
        buf.write("\u039c\5\u00acW\2\u039b\u0399\3\2\2\2\u039c\u039f\3\2")
        buf.write("\2\2\u039d\u039b\3\2\2\2\u039d\u039e\3\2\2\2\u039e\u03a1")
        buf.write("\3\2\2\2\u039f\u039d\3\2\2\2\u03a0\u0398\3\2\2\2\u03a0")
        buf.write("\u03a1\3\2\2\2\u03a1\u03a2\3\2\2\2\u03a2\u03a3\7W\2\2")
        buf.write("\u03a3\u00a9\3\2\2\2\u03a4\u03a5\7_\2\2\u03a5\u03a6\7")
        buf.write(",\2\2\u03a6\u03a7\5V,\2\u03a7\u00ab\3\2\2\2\u03a8\u03a9")
        buf.write("\7_\2\2\u03a9\u03aa\5d\63\2\u03aa\u03ab\5V,\2\u03ab\u00ad")
        buf.write("\3\2\2\2\u03ac\u03ad\t\t\2\2\u03ad\u00af\3\2\2\2\u03ae")
        buf.write("\u03b0\7\23\2\2\u03af\u03ae\3\2\2\2\u03af\u03b0\3\2\2")
        buf.write("\2\u03b0\u03b1\3\2\2\2\u03b1\u03b3\t\n\2\2\u03b2\u03b4")
        buf.write("\5\u00caf\2\u03b3\u03b2\3\2\2\2\u03b3\u03b4\3\2\2\2\u03b4")
        buf.write("\u03b5\3\2\2\2\u03b5\u03b6\7\'\2\2\u03b6\u03b7\5\u00b2")
        buf.write("Z\2\u03b7\u03b8\7(\2\2\u03b8\u00b1\3\2\2\2\u03b9\u03bb")
        buf.write("\5\u00b4[\2\u03ba\u03bc\7+\2\2\u03bb\u03ba\3\2\2\2\u03bb")
        buf.write("\u03bc\3\2\2\2\u03bc\u03be\3\2\2\2\u03bd\u03b9\3\2\2\2")
        buf.write("\u03be\u03c1\3\2\2\2\u03bf\u03bd\3\2\2\2\u03bf\u03c0\3")
        buf.write("\2\2\2\u03c0\u00b3\3\2\2\2\u03c1\u03bf\3\2\2\2\u03c2\u03cb")
        buf.write("\5\u00c2b\2\u03c3\u03cb\5\u00bc_\2\u03c4\u03cb\5\u00b6")
        buf.write("\\\2\u03c5\u03c6\5\u00caf\2\u03c6\u03c7\7,\2\2\u03c7\u03c8")
        buf.write("\5\u00caf\2\u03c8\u03cb\3\2\2\2\u03c9\u03cb\5\u00c8e\2")
        buf.write("\u03ca\u03c2\3\2\2\2\u03ca\u03c3\3\2\2\2\u03ca\u03c4\3")
        buf.write("\2\2\2\u03ca\u03c5\3\2\2\2\u03ca\u03c9\3\2\2\2\u03cb\u00b5")
        buf.write("\3\2\2\2\u03cc\u03cd\t\13\2\2\u03cd\u03ce\5\u00b8]\2\u03ce")
        buf.write("\u00b7\3\2\2\2\u03cf\u03d1\7X\2\2\u03d0\u03d2\5\u00ba")
        buf.write("^\2\u03d1\u03d0\3\2\2\2\u03d1\u03d2\3\2\2\2\u03d2\u03d3")
        buf.write("\3\2\2\2\u03d3\u03d5\7Y\2\2\u03d4\u03cf\3\2\2\2\u03d5")
        buf.write("\u03d6\3\2\2\2\u03d6\u03d4\3\2\2\2\u03d6\u03d7\3\2\2\2")
        buf.write("\u03d7\u00b9\3\2\2\2\u03d8\u03db\5\u00caf\2\u03d9\u03da")
        buf.write("\7,\2\2\u03da\u03dc\5\u00caf\2\u03db\u03d9\3\2\2\2\u03db")
        buf.write("\u03dc\3\2\2\2\u03dc\u03de\3\2\2\2\u03dd\u03df\7N\2\2")
        buf.write("\u03de\u03dd\3\2\2\2\u03de\u03df\3\2\2\2\u03df\u03e1\3")
        buf.write("\2\2\2\u03e0\u03d8\3\2\2\2\u03e1\u03e2\3\2\2\2\u03e2\u03e0")
        buf.write("\3\2\2\2\u03e2\u03e3\3\2\2\2\u03e3\u00bb\3\2\2\2\u03e4")
        buf.write("\u03e7\5\u00c4c\2\u03e5\u03e7\5\u00c8e\2\u03e6\u03e4\3")
        buf.write("\2\2\2\u03e6\u03e5\3\2\2\2\u03e7\u03e8\3\2\2\2\u03e8\u03ea")
        buf.write("\5\u00be`\2\u03e9\u03eb\5\u00b8]\2\u03ea\u03e9\3\2\2\2")
        buf.write("\u03ea\u03eb\3\2\2\2\u03eb\u00bd\3\2\2\2\u03ec\u03ef\5")
        buf.write("\u00c0a\2\u03ed\u03f0\5\u00c4c\2\u03ee\u03f0\5\u00c8e")
        buf.write("\2\u03ef\u03ed\3\2\2\2\u03ef\u03ee\3\2\2\2\u03f0\u03f2")
        buf.write("\3\2\2\2\u03f1\u03ec\3\2\2\2\u03f2\u03f3\3\2\2\2\u03f3")
        buf.write("\u03f1\3\2\2\2\u03f3\u03f4\3\2\2\2\u03f4\u00bf\3\2\2\2")
        buf.write("\u03f5\u03f6\t\f\2\2\u03f6\u00c1\3\2\2\2\u03f7\u03f9\5")
        buf.write("\u00c4c\2\u03f8\u03fa\5\u00b8]\2\u03f9\u03f8\3\2\2\2\u03f9")
        buf.write("\u03fa\3\2\2\2\u03fa\u00c3\3\2\2\2\u03fb\u03fd\5\u00ca")
        buf.write("f\2\u03fc\u03fe\5\u00c6d\2\u03fd\u03fc\3\2\2\2\u03fd\u03fe")
        buf.write("\3\2\2\2\u03fe\u00c5\3\2\2\2\u03ff\u0400\7$\2\2\u0400")
        buf.write("\u0403\5\u00caf\2\u0401\u0402\7$\2\2\u0402\u0404\5\u00ca")
        buf.write("f\2\u0403\u0401\3\2\2\2\u0403\u0404\3\2\2\2\u0404\u00c7")
        buf.write("\3\2\2\2\u0405\u0407\7\25\2\2\u0406\u0408\5\u00caf\2\u0407")
        buf.write("\u0406\3\2\2\2\u0407\u0408\3\2\2\2\u0408\u040a\3\2\2\2")
        buf.write("\u0409\u0405\3\2\2\2\u0409\u040a\3\2\2\2\u040a\u040b\3")
        buf.write("\2\2\2\u040b\u040c\7\'\2\2\u040c\u040d\5\u00b2Z\2\u040d")
        buf.write("\u040e\7(\2\2\u040e\u00c9\3\2\2\2\u040f\u0410\t\r\2\2")
        buf.write("\u0410\u00cb\3\2\2\2~\u00cd\u00d2\u00d8\u00e0\u00ea\u00ee")
        buf.write("\u00f3\u00f7\u00fc\u0100\u0105\u0109\u010b\u0114\u0118")
        buf.write("\u011e\u0127\u012c\u0132\u0136\u013a\u013c\u0140\u0148")
        buf.write("\u015d\u0164\u0168\u016c\u017a\u0186\u018f\u0192\u0199")
        buf.write("\u01a2\u01a9\u01b0\u01b4\u01bc\u01bf\u01c3\u01c9\u01ce")
        buf.write("\u01d9\u01e1\u01e8\u01ee\u0202\u020a\u020e\u0213\u0219")
        buf.write("\u021f\u0222\u0239\u024d\u0257\u025d\u026a\u026f\u0276")
        buf.write("\u0281\u0284\u028e\u0298\u02a0\u02a6\u02ad\u02b3\u02b6")
        buf.write("\u02b9\u02be\u02c0\u02d4\u02de\u02e0\u02ee\u02f9\u0304")
        buf.write("\u0308\u030d\u030f\u0311\u0322\u032a\u032d\u0330\u0338")
        buf.write("\u033b\u033e\u0346\u0349\u034c\u0350\u035e\u0366\u0369")
        buf.write("\u0373\u037a\u037d\u0381\u0388\u0390\u0393\u039d\u03a0")
        buf.write("\u03af\u03b3\u03bb\u03bf\u03ca\u03d1\u03d6\u03db\u03de")
        buf.write("\u03e2\u03e6\u03ea\u03ef\u03f3\u03f9\u03fd\u0403\u0407")
        buf.write("\u0409")
        return buf.getvalue()


class jacParser ( Parser ):

    grammarFileName = "jac.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'version'", "'&'", "'-->'", "'->'", "'<--'", 
                     "'<-'", "'<-->'", "'--'", "'str'", "'int'", "'float'", 
                     "'list'", "'dict'", "'bool'", "'type'", "'graph'", 
                     "'strict'", "'digraph'", "'subgraph'", "'node'", "'ignore'", 
                     "'take'", "'spawn'", "'with'", "'entry'", "'exit'", 
                     "'length'", "'keys'", "'context'", "'info'", "'details'", 
                     "'activity'", "'import'", "':'", "'::'", "'::>'", "'{'", 
                     "'}'", "'edge'", "'walker'", "';'", "'='", "'+='", 
                     "'-='", "'*='", "'/='", "':='", "<INVALID>", "<INVALID>", 
                     "'if'", "'elif'", "'else'", "'for'", "'to'", "'by'", 
                     "'while'", "'continue'", "'break'", "'disengage'", 
                     "'skip'", "'report'", "'destroy'", "'try'", "'.'", 
                     "<INVALID>", "'=='", "'<'", "'>'", "'<='", "'>='", 
                     "'!='", "'in'", "'anchor'", "'has'", "'private'", "','", 
                     "'can'", "'+'", "'-'", "'*'", "'/'", "'%'", "'^'", 
                     "'('", "')'", "'['", "']'", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "'null'" ]

    symbolicNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "TYP_STRING", "TYP_INT", "TYP_FLOAT", 
                      "TYP_LIST", "TYP_DICT", "TYP_BOOL", "KW_TYPE", "KW_GRAPH", 
                      "KW_STRICT", "KW_DIGRAPH", "KW_SUBGRAPH", "KW_NODE", 
                      "KW_IGNORE", "KW_TAKE", "KW_SPAWN", "KW_WITH", "KW_ENTRY", 
                      "KW_EXIT", "KW_LENGTH", "KW_KEYS", "KW_CONTEXT", "KW_INFO", 
                      "KW_DETAILS", "KW_ACTIVITY", "KW_IMPORT", "COLON", 
                      "DBL_COLON", "COLON_OUT", "LBRACE", "RBRACE", "KW_EDGE", 
                      "KW_WALKER", "SEMI", "EQ", "PEQ", "MEQ", "TEQ", "DEQ", 
                      "CPY_EQ", "KW_AND", "KW_OR", "KW_IF", "KW_ELIF", "KW_ELSE", 
                      "KW_FOR", "KW_TO", "KW_BY", "KW_WHILE", "KW_CONTINUE", 
                      "KW_BREAK", "KW_DISENGAGE", "KW_SKIP", "KW_REPORT", 
                      "KW_DESTROY", "KW_TRY", "DOT", "NOT", "EE", "LT", 
                      "GT", "LTE", "GTE", "NE", "KW_IN", "KW_ANCHOR", "KW_HAS", 
                      "KW_PRIVATE", "COMMA", "KW_CAN", "PLUS", "MINUS", 
                      "STAR_MUL", "DIV", "MOD", "POW", "LPAREN", "RPAREN", 
                      "LSQUARE", "RSQUARE", "FLOAT", "STRING", "BOOL", "INT", 
                      "NULL", "NAME", "COMMENT", "LINE_COMMENT", "PY_COMMENT", 
                      "WS", "ErrorChar" ]

    RULE_start = 0
    RULE_import_module = 1
    RULE_import_items = 2
    RULE_import_names = 3
    RULE_element = 4
    RULE_architype = 5
    RULE_walker = 6
    RULE_ver_label = 7
    RULE_namespaces = 8
    RULE_walk_entry_block = 9
    RULE_walk_exit_block = 10
    RULE_walk_activity_block = 11
    RULE_attr_block = 12
    RULE_attr_stmt = 13
    RULE_graph_block = 14
    RULE_graph_block_spawn = 15
    RULE_graph_block_dot = 16
    RULE_has_root = 17
    RULE_has_stmt = 18
    RULE_has_assign = 19
    RULE_can_stmt = 20
    RULE_event_clause = 21
    RULE_preset_in_out = 22
    RULE_dotted_name = 23
    RULE_name_list = 24
    RULE_expr_list = 25
    RULE_code_block = 26
    RULE_node_ctx_block = 27
    RULE_statement = 28
    RULE_if_stmt = 29
    RULE_try_stmt = 30
    RULE_else_from_try = 31
    RULE_elif_stmt = 32
    RULE_else_stmt = 33
    RULE_for_stmt = 34
    RULE_while_stmt = 35
    RULE_ctrl_stmt = 36
    RULE_destroy_action = 37
    RULE_report_action = 38
    RULE_walker_action = 39
    RULE_ignore_action = 40
    RULE_take_action = 41
    RULE_expression = 42
    RULE_assignment = 43
    RULE_copy_assign = 44
    RULE_inc_assign = 45
    RULE_connect = 46
    RULE_logical = 47
    RULE_compare = 48
    RULE_cmp_op = 49
    RULE_nin = 50
    RULE_arithmetic = 51
    RULE_term = 52
    RULE_factor = 53
    RULE_power = 54
    RULE_func_call = 55
    RULE_atom = 56
    RULE_ref = 57
    RULE_deref = 58
    RULE_built_in = 59
    RULE_cast_built_in = 60
    RULE_obj_built_in = 61
    RULE_dict_built_in = 62
    RULE_list_built_in = 63
    RULE_string_built_in = 64
    RULE_node_edge_ref = 65
    RULE_node_ref = 66
    RULE_walker_ref = 67
    RULE_graph_ref = 68
    RULE_edge_ref = 69
    RULE_edge_to = 70
    RULE_edge_from = 71
    RULE_edge_any = 72
    RULE_list_val = 73
    RULE_index_slice = 74
    RULE_dict_val = 75
    RULE_kv_pair = 76
    RULE_spawn = 77
    RULE_spawn_object = 78
    RULE_node_spawn = 79
    RULE_graph_spawn = 80
    RULE_walker_spawn = 81
    RULE_spawn_ctx = 82
    RULE_filter_ctx = 83
    RULE_spawn_assign = 84
    RULE_filter_compare = 85
    RULE_any_type = 86
    RULE_dot_graph = 87
    RULE_dot_stmt_list = 88
    RULE_dot_stmt = 89
    RULE_dot_attr_stmt = 90
    RULE_dot_attr_list = 91
    RULE_dot_a_list = 92
    RULE_dot_edge_stmt = 93
    RULE_dot_edgeRHS = 94
    RULE_dot_edgeop = 95
    RULE_dot_node_stmt = 96
    RULE_dot_node_id = 97
    RULE_dot_port = 98
    RULE_dot_subgraph = 99
    RULE_dot_id = 100

    ruleNames =  [ "start", "import_module", "import_items", "import_names", 
                   "element", "architype", "walker", "ver_label", "namespaces", 
                   "walk_entry_block", "walk_exit_block", "walk_activity_block", 
                   "attr_block", "attr_stmt", "graph_block", "graph_block_spawn", 
                   "graph_block_dot", "has_root", "has_stmt", "has_assign", 
                   "can_stmt", "event_clause", "preset_in_out", "dotted_name", 
                   "name_list", "expr_list", "code_block", "node_ctx_block", 
                   "statement", "if_stmt", "try_stmt", "else_from_try", 
                   "elif_stmt", "else_stmt", "for_stmt", "while_stmt", "ctrl_stmt", 
                   "destroy_action", "report_action", "walker_action", "ignore_action", 
                   "take_action", "expression", "assignment", "copy_assign", 
                   "inc_assign", "connect", "logical", "compare", "cmp_op", 
                   "nin", "arithmetic", "term", "factor", "power", "func_call", 
                   "atom", "ref", "deref", "built_in", "cast_built_in", 
                   "obj_built_in", "dict_built_in", "list_built_in", "string_built_in", 
                   "node_edge_ref", "node_ref", "walker_ref", "graph_ref", 
                   "edge_ref", "edge_to", "edge_from", "edge_any", "list_val", 
                   "index_slice", "dict_val", "kv_pair", "spawn", "spawn_object", 
                   "node_spawn", "graph_spawn", "walker_spawn", "spawn_ctx", 
                   "filter_ctx", "spawn_assign", "filter_compare", "any_type", 
                   "dot_graph", "dot_stmt_list", "dot_stmt", "dot_attr_stmt", 
                   "dot_attr_list", "dot_a_list", "dot_edge_stmt", "dot_edgeRHS", 
                   "dot_edgeop", "dot_node_stmt", "dot_node_id", "dot_port", 
                   "dot_subgraph", "dot_id" ]

    EOF = Token.EOF
    T__0=1
    T__1=2
    T__2=3
    T__3=4
    T__4=5
    T__5=6
    T__6=7
    T__7=8
    TYP_STRING=9
    TYP_INT=10
    TYP_FLOAT=11
    TYP_LIST=12
    TYP_DICT=13
    TYP_BOOL=14
    KW_TYPE=15
    KW_GRAPH=16
    KW_STRICT=17
    KW_DIGRAPH=18
    KW_SUBGRAPH=19
    KW_NODE=20
    KW_IGNORE=21
    KW_TAKE=22
    KW_SPAWN=23
    KW_WITH=24
    KW_ENTRY=25
    KW_EXIT=26
    KW_LENGTH=27
    KW_KEYS=28
    KW_CONTEXT=29
    KW_INFO=30
    KW_DETAILS=31
    KW_ACTIVITY=32
    KW_IMPORT=33
    COLON=34
    DBL_COLON=35
    COLON_OUT=36
    LBRACE=37
    RBRACE=38
    KW_EDGE=39
    KW_WALKER=40
    SEMI=41
    EQ=42
    PEQ=43
    MEQ=44
    TEQ=45
    DEQ=46
    CPY_EQ=47
    KW_AND=48
    KW_OR=49
    KW_IF=50
    KW_ELIF=51
    KW_ELSE=52
    KW_FOR=53
    KW_TO=54
    KW_BY=55
    KW_WHILE=56
    KW_CONTINUE=57
    KW_BREAK=58
    KW_DISENGAGE=59
    KW_SKIP=60
    KW_REPORT=61
    KW_DESTROY=62
    KW_TRY=63
    DOT=64
    NOT=65
    EE=66
    LT=67
    GT=68
    LTE=69
    GTE=70
    NE=71
    KW_IN=72
    KW_ANCHOR=73
    KW_HAS=74
    KW_PRIVATE=75
    COMMA=76
    KW_CAN=77
    PLUS=78
    MINUS=79
    STAR_MUL=80
    DIV=81
    MOD=82
    POW=83
    LPAREN=84
    RPAREN=85
    LSQUARE=86
    RSQUARE=87
    FLOAT=88
    STRING=89
    BOOL=90
    INT=91
    NULL=92
    NAME=93
    COMMENT=94
    LINE_COMMENT=95
    PY_COMMENT=96
    WS=97
    ErrorChar=98

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.9.2")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class StartContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(jacParser.EOF, 0)

        def ver_label(self):
            return self.getTypedRuleContext(jacParser.Ver_labelContext,0)


        def import_module(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(jacParser.Import_moduleContext)
            else:
                return self.getTypedRuleContext(jacParser.Import_moduleContext,i)


        def element(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(jacParser.ElementContext)
            else:
                return self.getTypedRuleContext(jacParser.ElementContext,i)


        def getRuleIndex(self):
            return jacParser.RULE_start

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStart" ):
                listener.enterStart(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStart" ):
                listener.exitStart(self)




    def start(self):

        localctx = jacParser.StartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_start)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 203
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==jacParser.T__0:
                self.state = 202
                self.ver_label()


            self.state = 208
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==jacParser.KW_IMPORT:
                self.state = 205
                self.import_module()
                self.state = 210
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 212 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 211
                self.element()
                self.state = 214 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << jacParser.KW_GRAPH) | (1 << jacParser.KW_NODE) | (1 << jacParser.KW_EDGE) | (1 << jacParser.KW_WALKER))) != 0)):
                    break

            self.state = 216
            self.match(jacParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Import_moduleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_IMPORT(self):
            return self.getToken(jacParser.KW_IMPORT, 0)

        def LBRACE(self):
            return self.getToken(jacParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(jacParser.RBRACE, 0)

        def KW_WITH(self):
            return self.getToken(jacParser.KW_WITH, 0)

        def STRING(self):
            return self.getToken(jacParser.STRING, 0)

        def SEMI(self):
            return self.getToken(jacParser.SEMI, 0)

        def import_items(self):
            return self.getTypedRuleContext(jacParser.Import_itemsContext,0)


        def STAR_MUL(self):
            return self.getToken(jacParser.STAR_MUL, 0)

        def getRuleIndex(self):
            return jacParser.RULE_import_module

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImport_module" ):
                listener.enterImport_module(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImport_module" ):
                listener.exitImport_module(self)




    def import_module(self):

        localctx = jacParser.Import_moduleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_import_module)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 218
            self.match(jacParser.KW_IMPORT)
            self.state = 219
            self.match(jacParser.LBRACE)
            self.state = 222
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [jacParser.KW_GRAPH, jacParser.KW_NODE, jacParser.KW_EDGE, jacParser.KW_WALKER]:
                self.state = 220
                self.import_items()
                pass
            elif token in [jacParser.STAR_MUL]:
                self.state = 221
                self.match(jacParser.STAR_MUL)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 224
            self.match(jacParser.RBRACE)
            self.state = 225
            self.match(jacParser.KW_WITH)
            self.state = 226
            self.match(jacParser.STRING)
            self.state = 227
            self.match(jacParser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Import_itemsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_WALKER(self):
            return self.getToken(jacParser.KW_WALKER, 0)

        def STAR_MUL(self):
            return self.getToken(jacParser.STAR_MUL, 0)

        def import_names(self):
            return self.getTypedRuleContext(jacParser.Import_namesContext,0)


        def COMMA(self):
            return self.getToken(jacParser.COMMA, 0)

        def import_items(self):
            return self.getTypedRuleContext(jacParser.Import_itemsContext,0)


        def KW_NODE(self):
            return self.getToken(jacParser.KW_NODE, 0)

        def KW_EDGE(self):
            return self.getToken(jacParser.KW_EDGE, 0)

        def KW_GRAPH(self):
            return self.getToken(jacParser.KW_GRAPH, 0)

        def getRuleIndex(self):
            return jacParser.RULE_import_items

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImport_items" ):
                listener.enterImport_items(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImport_items" ):
                listener.exitImport_items(self)




    def import_items(self):

        localctx = jacParser.Import_itemsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_import_items)
        self._la = 0 # Token type
        try:
            self.state = 265
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [jacParser.KW_WALKER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 229
                self.match(jacParser.KW_WALKER)
                self.state = 232
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [jacParser.STAR_MUL]:
                    self.state = 230
                    self.match(jacParser.STAR_MUL)
                    pass
                elif token in [jacParser.DBL_COLON]:
                    self.state = 231
                    self.import_names()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 236
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==jacParser.COMMA:
                    self.state = 234
                    self.match(jacParser.COMMA)
                    self.state = 235
                    self.import_items()


                pass
            elif token in [jacParser.KW_NODE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 238
                self.match(jacParser.KW_NODE)
                self.state = 241
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [jacParser.STAR_MUL]:
                    self.state = 239
                    self.match(jacParser.STAR_MUL)
                    pass
                elif token in [jacParser.DBL_COLON]:
                    self.state = 240
                    self.import_names()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 245
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==jacParser.COMMA:
                    self.state = 243
                    self.match(jacParser.COMMA)
                    self.state = 244
                    self.import_items()


                pass
            elif token in [jacParser.KW_EDGE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 247
                self.match(jacParser.KW_EDGE)
                self.state = 250
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [jacParser.STAR_MUL]:
                    self.state = 248
                    self.match(jacParser.STAR_MUL)
                    pass
                elif token in [jacParser.DBL_COLON]:
                    self.state = 249
                    self.import_names()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 254
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==jacParser.COMMA:
                    self.state = 252
                    self.match(jacParser.COMMA)
                    self.state = 253
                    self.import_items()


                pass
            elif token in [jacParser.KW_GRAPH]:
                self.enterOuterAlt(localctx, 4)
                self.state = 256
                self.match(jacParser.KW_GRAPH)
                self.state = 259
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [jacParser.STAR_MUL]:
                    self.state = 257
                    self.match(jacParser.STAR_MUL)
                    pass
                elif token in [jacParser.DBL_COLON]:
                    self.state = 258
                    self.import_names()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 263
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==jacParser.COMMA:
                    self.state = 261
                    self.match(jacParser.COMMA)
                    self.state = 262
                    self.import_items()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Import_namesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DBL_COLON(self):
            return self.getToken(jacParser.DBL_COLON, 0)

        def NAME(self):
            return self.getToken(jacParser.NAME, 0)

        def LBRACE(self):
            return self.getToken(jacParser.LBRACE, 0)

        def name_list(self):
            return self.getTypedRuleContext(jacParser.Name_listContext,0)


        def RBRACE(self):
            return self.getToken(jacParser.RBRACE, 0)

        def getRuleIndex(self):
            return jacParser.RULE_import_names

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImport_names" ):
                listener.enterImport_names(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImport_names" ):
                listener.exitImport_names(self)




    def import_names(self):

        localctx = jacParser.Import_namesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_import_names)
        try:
            self.state = 274
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,13,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 267
                self.match(jacParser.DBL_COLON)
                self.state = 268
                self.match(jacParser.NAME)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 269
                self.match(jacParser.DBL_COLON)
                self.state = 270
                self.match(jacParser.LBRACE)
                self.state = 271
                self.name_list()
                self.state = 272
                self.match(jacParser.RBRACE)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ElementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def architype(self):
            return self.getTypedRuleContext(jacParser.ArchitypeContext,0)


        def walker(self):
            return self.getTypedRuleContext(jacParser.WalkerContext,0)


        def getRuleIndex(self):
            return jacParser.RULE_element

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElement" ):
                listener.enterElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElement" ):
                listener.exitElement(self)




    def element(self):

        localctx = jacParser.ElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_element)
        try:
            self.state = 278
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [jacParser.KW_GRAPH, jacParser.KW_NODE, jacParser.KW_EDGE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 276
                self.architype()
                pass
            elif token in [jacParser.KW_WALKER]:
                self.enterOuterAlt(localctx, 2)
                self.state = 277
                self.walker()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArchitypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_NODE(self):
            return self.getToken(jacParser.KW_NODE, 0)

        def NAME(self):
            return self.getToken(jacParser.NAME, 0)

        def attr_block(self):
            return self.getTypedRuleContext(jacParser.Attr_blockContext,0)


        def COLON(self):
            return self.getToken(jacParser.COLON, 0)

        def INT(self):
            return self.getToken(jacParser.INT, 0)

        def KW_EDGE(self):
            return self.getToken(jacParser.KW_EDGE, 0)

        def KW_GRAPH(self):
            return self.getToken(jacParser.KW_GRAPH, 0)

        def graph_block(self):
            return self.getTypedRuleContext(jacParser.Graph_blockContext,0)


        def getRuleIndex(self):
            return jacParser.RULE_architype

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArchitype" ):
                listener.enterArchitype(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArchitype" ):
                listener.exitArchitype(self)




    def architype(self):

        localctx = jacParser.ArchitypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_architype)
        try:
            self.state = 293
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [jacParser.KW_NODE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 280
                self.match(jacParser.KW_NODE)
                self.state = 281
                self.match(jacParser.NAME)
                self.state = 284
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,15,self._ctx)
                if la_ == 1:
                    self.state = 282
                    self.match(jacParser.COLON)
                    self.state = 283
                    self.match(jacParser.INT)


                self.state = 286
                self.attr_block()
                pass
            elif token in [jacParser.KW_EDGE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 287
                self.match(jacParser.KW_EDGE)
                self.state = 288
                self.match(jacParser.NAME)
                self.state = 289
                self.attr_block()
                pass
            elif token in [jacParser.KW_GRAPH]:
                self.enterOuterAlt(localctx, 3)
                self.state = 290
                self.match(jacParser.KW_GRAPH)
                self.state = 291
                self.match(jacParser.NAME)
                self.state = 292
                self.graph_block()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WalkerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_WALKER(self):
            return self.getToken(jacParser.KW_WALKER, 0)

        def NAME(self):
            return self.getToken(jacParser.NAME, 0)

        def LBRACE(self):
            return self.getToken(jacParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(jacParser.RBRACE, 0)

        def namespaces(self):
            return self.getTypedRuleContext(jacParser.NamespacesContext,0)


        def attr_stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(jacParser.Attr_stmtContext)
            else:
                return self.getTypedRuleContext(jacParser.Attr_stmtContext,i)


        def walk_entry_block(self):
            return self.getTypedRuleContext(jacParser.Walk_entry_blockContext,0)


        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(jacParser.StatementContext)
            else:
                return self.getTypedRuleContext(jacParser.StatementContext,i)


        def walk_activity_block(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(jacParser.Walk_activity_blockContext)
            else:
                return self.getTypedRuleContext(jacParser.Walk_activity_blockContext,i)


        def walk_exit_block(self):
            return self.getTypedRuleContext(jacParser.Walk_exit_blockContext,0)


        def getRuleIndex(self):
            return jacParser.RULE_walker

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWalker" ):
                listener.enterWalker(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWalker" ):
                listener.exitWalker(self)




    def walker(self):

        localctx = jacParser.WalkerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_walker)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 295
            self.match(jacParser.KW_WALKER)
            self.state = 296
            self.match(jacParser.NAME)
            self.state = 298
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==jacParser.COLON:
                self.state = 297
                self.namespaces()


            self.state = 300
            self.match(jacParser.LBRACE)
            self.state = 304
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==jacParser.KW_HAS or _la==jacParser.KW_CAN:
                self.state = 301
                self.attr_stmt()
                self.state = 306
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 308
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,19,self._ctx)
            if la_ == 1:
                self.state = 307
                self.walk_entry_block()


            self.state = 314
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,21,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 312
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [jacParser.T__1, jacParser.T__2, jacParser.T__4, jacParser.T__5, jacParser.T__6, jacParser.TYP_STRING, jacParser.TYP_INT, jacParser.TYP_FLOAT, jacParser.TYP_LIST, jacParser.TYP_DICT, jacParser.TYP_BOOL, jacParser.KW_TYPE, jacParser.KW_NODE, jacParser.KW_IGNORE, jacParser.KW_TAKE, jacParser.KW_SPAWN, jacParser.COLON, jacParser.DBL_COLON, jacParser.LBRACE, jacParser.KW_EDGE, jacParser.KW_IF, jacParser.KW_FOR, jacParser.KW_WHILE, jacParser.KW_CONTINUE, jacParser.KW_BREAK, jacParser.KW_DISENGAGE, jacParser.KW_SKIP, jacParser.KW_REPORT, jacParser.KW_DESTROY, jacParser.KW_TRY, jacParser.NOT, jacParser.PLUS, jacParser.MINUS, jacParser.STAR_MUL, jacParser.LPAREN, jacParser.LSQUARE, jacParser.FLOAT, jacParser.STRING, jacParser.BOOL, jacParser.INT, jacParser.NULL, jacParser.NAME]:
                        self.state = 310
                        self.statement()
                        pass
                    elif token in [jacParser.KW_WITH]:
                        self.state = 311
                        self.walk_activity_block()
                        pass
                    else:
                        raise NoViableAltException(self)
             
                self.state = 316
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,21,self._ctx)

            self.state = 318
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==jacParser.KW_WITH:
                self.state = 317
                self.walk_exit_block()


            self.state = 320
            self.match(jacParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Ver_labelContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLON(self):
            return self.getToken(jacParser.COLON, 0)

        def STRING(self):
            return self.getToken(jacParser.STRING, 0)

        def SEMI(self):
            return self.getToken(jacParser.SEMI, 0)

        def getRuleIndex(self):
            return jacParser.RULE_ver_label

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVer_label" ):
                listener.enterVer_label(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVer_label" ):
                listener.exitVer_label(self)




    def ver_label(self):

        localctx = jacParser.Ver_labelContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_ver_label)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 322
            self.match(jacParser.T__0)
            self.state = 323
            self.match(jacParser.COLON)
            self.state = 324
            self.match(jacParser.STRING)
            self.state = 326
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==jacParser.SEMI:
                self.state = 325
                self.match(jacParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NamespacesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLON(self):
            return self.getToken(jacParser.COLON, 0)

        def name_list(self):
            return self.getTypedRuleContext(jacParser.Name_listContext,0)


        def getRuleIndex(self):
            return jacParser.RULE_namespaces

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamespaces" ):
                listener.enterNamespaces(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamespaces" ):
                listener.exitNamespaces(self)




    def namespaces(self):

        localctx = jacParser.NamespacesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_namespaces)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 328
            self.match(jacParser.COLON)
            self.state = 329
            self.name_list()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Walk_entry_blockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_WITH(self):
            return self.getToken(jacParser.KW_WITH, 0)

        def KW_ENTRY(self):
            return self.getToken(jacParser.KW_ENTRY, 0)

        def code_block(self):
            return self.getTypedRuleContext(jacParser.Code_blockContext,0)


        def getRuleIndex(self):
            return jacParser.RULE_walk_entry_block

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWalk_entry_block" ):
                listener.enterWalk_entry_block(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWalk_entry_block" ):
                listener.exitWalk_entry_block(self)




    def walk_entry_block(self):

        localctx = jacParser.Walk_entry_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_walk_entry_block)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 331
            self.match(jacParser.KW_WITH)
            self.state = 332
            self.match(jacParser.KW_ENTRY)
            self.state = 333
            self.code_block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Walk_exit_blockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_WITH(self):
            return self.getToken(jacParser.KW_WITH, 0)

        def KW_EXIT(self):
            return self.getToken(jacParser.KW_EXIT, 0)

        def code_block(self):
            return self.getTypedRuleContext(jacParser.Code_blockContext,0)


        def getRuleIndex(self):
            return jacParser.RULE_walk_exit_block

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWalk_exit_block" ):
                listener.enterWalk_exit_block(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWalk_exit_block" ):
                listener.exitWalk_exit_block(self)




    def walk_exit_block(self):

        localctx = jacParser.Walk_exit_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_walk_exit_block)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 335
            self.match(jacParser.KW_WITH)
            self.state = 336
            self.match(jacParser.KW_EXIT)
            self.state = 337
            self.code_block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Walk_activity_blockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_WITH(self):
            return self.getToken(jacParser.KW_WITH, 0)

        def KW_ACTIVITY(self):
            return self.getToken(jacParser.KW_ACTIVITY, 0)

        def code_block(self):
            return self.getTypedRuleContext(jacParser.Code_blockContext,0)


        def getRuleIndex(self):
            return jacParser.RULE_walk_activity_block

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWalk_activity_block" ):
                listener.enterWalk_activity_block(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWalk_activity_block" ):
                listener.exitWalk_activity_block(self)




    def walk_activity_block(self):

        localctx = jacParser.Walk_activity_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_walk_activity_block)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 339
            self.match(jacParser.KW_WITH)
            self.state = 340
            self.match(jacParser.KW_ACTIVITY)
            self.state = 341
            self.code_block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Attr_blockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(jacParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(jacParser.RBRACE, 0)

        def attr_stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(jacParser.Attr_stmtContext)
            else:
                return self.getTypedRuleContext(jacParser.Attr_stmtContext,i)


        def COLON(self):
            return self.getToken(jacParser.COLON, 0)

        def SEMI(self):
            return self.getToken(jacParser.SEMI, 0)

        def getRuleIndex(self):
            return jacParser.RULE_attr_block

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttr_block" ):
                listener.enterAttr_block(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttr_block" ):
                listener.exitAttr_block(self)




    def attr_block(self):

        localctx = jacParser.Attr_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_attr_block)
        self._la = 0 # Token type
        try:
            self.state = 354
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [jacParser.LBRACE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 343
                self.match(jacParser.LBRACE)
                self.state = 347
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==jacParser.KW_HAS or _la==jacParser.KW_CAN:
                    self.state = 344
                    self.attr_stmt()
                    self.state = 349
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 350
                self.match(jacParser.RBRACE)
                pass
            elif token in [jacParser.COLON]:
                self.enterOuterAlt(localctx, 2)
                self.state = 351
                self.match(jacParser.COLON)
                self.state = 352
                self.attr_stmt()
                pass
            elif token in [jacParser.SEMI]:
                self.enterOuterAlt(localctx, 3)
                self.state = 353
                self.match(jacParser.SEMI)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Attr_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def has_stmt(self):
            return self.getTypedRuleContext(jacParser.Has_stmtContext,0)


        def can_stmt(self):
            return self.getTypedRuleContext(jacParser.Can_stmtContext,0)


        def getRuleIndex(self):
            return jacParser.RULE_attr_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttr_stmt" ):
                listener.enterAttr_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttr_stmt" ):
                listener.exitAttr_stmt(self)




    def attr_stmt(self):

        localctx = jacParser.Attr_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_attr_stmt)
        try:
            self.state = 358
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [jacParser.KW_HAS]:
                self.enterOuterAlt(localctx, 1)
                self.state = 356
                self.has_stmt()
                pass
            elif token in [jacParser.KW_CAN]:
                self.enterOuterAlt(localctx, 2)
                self.state = 357
                self.can_stmt()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Graph_blockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def graph_block_spawn(self):
            return self.getTypedRuleContext(jacParser.Graph_block_spawnContext,0)


        def graph_block_dot(self):
            return self.getTypedRuleContext(jacParser.Graph_block_dotContext,0)


        def getRuleIndex(self):
            return jacParser.RULE_graph_block

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGraph_block" ):
                listener.enterGraph_block(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGraph_block" ):
                listener.exitGraph_block(self)




    def graph_block(self):

        localctx = jacParser.Graph_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_graph_block)
        try:
            self.state = 362
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,27,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 360
                self.graph_block_spawn()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 361
                self.graph_block_dot()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Graph_block_spawnContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(jacParser.LBRACE, 0)

        def has_root(self):
            return self.getTypedRuleContext(jacParser.Has_rootContext,0)


        def KW_SPAWN(self):
            return self.getToken(jacParser.KW_SPAWN, 0)

        def code_block(self):
            return self.getTypedRuleContext(jacParser.Code_blockContext,0)


        def RBRACE(self):
            return self.getToken(jacParser.RBRACE, 0)

        def COLON(self):
            return self.getToken(jacParser.COLON, 0)

        def SEMI(self):
            return self.getToken(jacParser.SEMI, 0)

        def getRuleIndex(self):
            return jacParser.RULE_graph_block_spawn

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGraph_block_spawn" ):
                listener.enterGraph_block_spawn(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGraph_block_spawn" ):
                listener.exitGraph_block_spawn(self)




    def graph_block_spawn(self):

        localctx = jacParser.Graph_block_spawnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_graph_block_spawn)
        try:
            self.state = 376
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [jacParser.LBRACE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 364
                self.match(jacParser.LBRACE)
                self.state = 365
                self.has_root()
                self.state = 366
                self.match(jacParser.KW_SPAWN)
                self.state = 367
                self.code_block()
                self.state = 368
                self.match(jacParser.RBRACE)
                pass
            elif token in [jacParser.COLON]:
                self.enterOuterAlt(localctx, 2)
                self.state = 370
                self.match(jacParser.COLON)
                self.state = 371
                self.has_root()
                self.state = 372
                self.match(jacParser.KW_SPAWN)
                self.state = 373
                self.code_block()
                self.state = 374
                self.match(jacParser.SEMI)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Graph_block_dotContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(jacParser.LBRACE, 0)

        def has_root(self):
            return self.getTypedRuleContext(jacParser.Has_rootContext,0)


        def dot_graph(self):
            return self.getTypedRuleContext(jacParser.Dot_graphContext,0)


        def RBRACE(self):
            return self.getToken(jacParser.RBRACE, 0)

        def COLON(self):
            return self.getToken(jacParser.COLON, 0)

        def SEMI(self):
            return self.getToken(jacParser.SEMI, 0)

        def getRuleIndex(self):
            return jacParser.RULE_graph_block_dot

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGraph_block_dot" ):
                listener.enterGraph_block_dot(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGraph_block_dot" ):
                listener.exitGraph_block_dot(self)




    def graph_block_dot(self):

        localctx = jacParser.Graph_block_dotContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_graph_block_dot)
        try:
            self.state = 388
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [jacParser.LBRACE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 378
                self.match(jacParser.LBRACE)
                self.state = 379
                self.has_root()
                self.state = 380
                self.dot_graph()
                self.state = 381
                self.match(jacParser.RBRACE)
                pass
            elif token in [jacParser.COLON]:
                self.enterOuterAlt(localctx, 2)
                self.state = 383
                self.match(jacParser.COLON)
                self.state = 384
                self.has_root()
                self.state = 385
                self.dot_graph()
                self.state = 386
                self.match(jacParser.SEMI)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Has_rootContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_HAS(self):
            return self.getToken(jacParser.KW_HAS, 0)

        def KW_ANCHOR(self):
            return self.getToken(jacParser.KW_ANCHOR, 0)

        def NAME(self):
            return self.getToken(jacParser.NAME, 0)

        def SEMI(self):
            return self.getToken(jacParser.SEMI, 0)

        def getRuleIndex(self):
            return jacParser.RULE_has_root

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHas_root" ):
                listener.enterHas_root(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHas_root" ):
                listener.exitHas_root(self)




    def has_root(self):

        localctx = jacParser.Has_rootContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_has_root)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 390
            self.match(jacParser.KW_HAS)
            self.state = 391
            self.match(jacParser.KW_ANCHOR)
            self.state = 392
            self.match(jacParser.NAME)
            self.state = 393
            self.match(jacParser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Has_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_HAS(self):
            return self.getToken(jacParser.KW_HAS, 0)

        def has_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(jacParser.Has_assignContext)
            else:
                return self.getTypedRuleContext(jacParser.Has_assignContext,i)


        def SEMI(self):
            return self.getToken(jacParser.SEMI, 0)

        def KW_PRIVATE(self):
            return self.getToken(jacParser.KW_PRIVATE, 0)

        def KW_ANCHOR(self):
            return self.getToken(jacParser.KW_ANCHOR, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(jacParser.COMMA)
            else:
                return self.getToken(jacParser.COMMA, i)

        def getRuleIndex(self):
            return jacParser.RULE_has_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHas_stmt" ):
                listener.enterHas_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHas_stmt" ):
                listener.exitHas_stmt(self)




    def has_stmt(self):

        localctx = jacParser.Has_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_has_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 395
            self.match(jacParser.KW_HAS)
            self.state = 397
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==jacParser.KW_PRIVATE:
                self.state = 396
                self.match(jacParser.KW_PRIVATE)


            self.state = 400
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==jacParser.KW_ANCHOR:
                self.state = 399
                self.match(jacParser.KW_ANCHOR)


            self.state = 402
            self.has_assign()
            self.state = 407
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==jacParser.COMMA:
                self.state = 403
                self.match(jacParser.COMMA)
                self.state = 404
                self.has_assign()
                self.state = 409
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 410
            self.match(jacParser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Has_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(jacParser.NAME, 0)

        def EQ(self):
            return self.getToken(jacParser.EQ, 0)

        def expression(self):
            return self.getTypedRuleContext(jacParser.ExpressionContext,0)


        def getRuleIndex(self):
            return jacParser.RULE_has_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHas_assign" ):
                listener.enterHas_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHas_assign" ):
                listener.exitHas_assign(self)




    def has_assign(self):

        localctx = jacParser.Has_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_has_assign)
        try:
            self.state = 416
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,33,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 412
                self.match(jacParser.NAME)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 413
                self.match(jacParser.NAME)
                self.state = 414
                self.match(jacParser.EQ)
                self.state = 415
                self.expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Can_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_CAN(self):
            return self.getToken(jacParser.KW_CAN, 0)

        def dotted_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(jacParser.Dotted_nameContext)
            else:
                return self.getTypedRuleContext(jacParser.Dotted_nameContext,i)


        def SEMI(self):
            return self.getToken(jacParser.SEMI, 0)

        def preset_in_out(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(jacParser.Preset_in_outContext)
            else:
                return self.getTypedRuleContext(jacParser.Preset_in_outContext,i)


        def event_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(jacParser.Event_clauseContext)
            else:
                return self.getTypedRuleContext(jacParser.Event_clauseContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(jacParser.COMMA)
            else:
                return self.getToken(jacParser.COMMA, i)

        def NAME(self):
            return self.getToken(jacParser.NAME, 0)

        def code_block(self):
            return self.getTypedRuleContext(jacParser.Code_blockContext,0)


        def getRuleIndex(self):
            return jacParser.RULE_can_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCan_stmt" ):
                listener.enterCan_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCan_stmt" ):
                listener.exitCan_stmt(self)




    def can_stmt(self):

        localctx = jacParser.Can_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_can_stmt)
        self._la = 0 # Token type
        try:
            self.state = 445
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,38,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 418
                self.match(jacParser.KW_CAN)
                self.state = 419
                self.dotted_name()
                self.state = 423
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==jacParser.DBL_COLON:
                    self.state = 420
                    self.preset_in_out()
                    self.state = 421
                    self.event_clause()


                self.state = 434
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==jacParser.COMMA:
                    self.state = 425
                    self.match(jacParser.COMMA)
                    self.state = 426
                    self.dotted_name()
                    self.state = 430
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==jacParser.DBL_COLON:
                        self.state = 427
                        self.preset_in_out()
                        self.state = 428
                        self.event_clause()


                    self.state = 436
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 437
                self.match(jacParser.SEMI)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 439
                self.match(jacParser.KW_CAN)
                self.state = 440
                self.match(jacParser.NAME)
                self.state = 442
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==jacParser.KW_WITH:
                    self.state = 441
                    self.event_clause()


                self.state = 444
                self.code_block()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Event_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_WITH(self):
            return self.getToken(jacParser.KW_WITH, 0)

        def KW_ENTRY(self):
            return self.getToken(jacParser.KW_ENTRY, 0)

        def KW_EXIT(self):
            return self.getToken(jacParser.KW_EXIT, 0)

        def KW_ACTIVITY(self):
            return self.getToken(jacParser.KW_ACTIVITY, 0)

        def name_list(self):
            return self.getTypedRuleContext(jacParser.Name_listContext,0)


        def getRuleIndex(self):
            return jacParser.RULE_event_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEvent_clause" ):
                listener.enterEvent_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEvent_clause" ):
                listener.exitEvent_clause(self)




    def event_clause(self):

        localctx = jacParser.Event_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_event_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 447
            self.match(jacParser.KW_WITH)
            self.state = 449
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==jacParser.NAME:
                self.state = 448
                self.name_list()


            self.state = 451
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << jacParser.KW_ENTRY) | (1 << jacParser.KW_EXIT) | (1 << jacParser.KW_ACTIVITY))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Preset_in_outContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DBL_COLON(self, i:int=None):
            if i is None:
                return self.getTokens(jacParser.DBL_COLON)
            else:
                return self.getToken(jacParser.DBL_COLON, i)

        def COLON_OUT(self):
            return self.getToken(jacParser.COLON_OUT, 0)

        def expression(self):
            return self.getTypedRuleContext(jacParser.ExpressionContext,0)


        def expr_list(self):
            return self.getTypedRuleContext(jacParser.Expr_listContext,0)


        def getRuleIndex(self):
            return jacParser.RULE_preset_in_out

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPreset_in_out" ):
                listener.enterPreset_in_out(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPreset_in_out" ):
                listener.exitPreset_in_out(self)




    def preset_in_out(self):

        localctx = jacParser.Preset_in_outContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_preset_in_out)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 453
            self.match(jacParser.DBL_COLON)
            self.state = 455
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,40,self._ctx)
            if la_ == 1:
                self.state = 454
                self.expr_list()


            self.state = 460
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [jacParser.DBL_COLON]:
                self.state = 457
                self.match(jacParser.DBL_COLON)
                pass
            elif token in [jacParser.COLON_OUT]:
                self.state = 458
                self.match(jacParser.COLON_OUT)
                self.state = 459
                self.expression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dotted_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self, i:int=None):
            if i is None:
                return self.getTokens(jacParser.NAME)
            else:
                return self.getToken(jacParser.NAME, i)

        def DOT(self):
            return self.getToken(jacParser.DOT, 0)

        def getRuleIndex(self):
            return jacParser.RULE_dotted_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDotted_name" ):
                listener.enterDotted_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDotted_name" ):
                listener.exitDotted_name(self)




    def dotted_name(self):

        localctx = jacParser.Dotted_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_dotted_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 462
            self.match(jacParser.NAME)
            self.state = 463
            self.match(jacParser.DOT)
            self.state = 464
            self.match(jacParser.NAME)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Name_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self, i:int=None):
            if i is None:
                return self.getTokens(jacParser.NAME)
            else:
                return self.getToken(jacParser.NAME, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(jacParser.COMMA)
            else:
                return self.getToken(jacParser.COMMA, i)

        def getRuleIndex(self):
            return jacParser.RULE_name_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterName_list" ):
                listener.enterName_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitName_list" ):
                listener.exitName_list(self)




    def name_list(self):

        localctx = jacParser.Name_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_name_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 466
            self.match(jacParser.NAME)
            self.state = 471
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==jacParser.COMMA:
                self.state = 467
                self.match(jacParser.COMMA)
                self.state = 468
                self.match(jacParser.NAME)
                self.state = 473
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Expr_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(jacParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(jacParser.ExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(jacParser.COMMA)
            else:
                return self.getToken(jacParser.COMMA, i)

        def getRuleIndex(self):
            return jacParser.RULE_expr_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpr_list" ):
                listener.enterExpr_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpr_list" ):
                listener.exitExpr_list(self)




    def expr_list(self):

        localctx = jacParser.Expr_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_expr_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 474
            self.expression()
            self.state = 479
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==jacParser.COMMA:
                self.state = 475
                self.match(jacParser.COMMA)
                self.state = 476
                self.expression()
                self.state = 481
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Code_blockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(jacParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(jacParser.RBRACE, 0)

        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(jacParser.StatementContext)
            else:
                return self.getTypedRuleContext(jacParser.StatementContext,i)


        def COLON(self):
            return self.getToken(jacParser.COLON, 0)

        def getRuleIndex(self):
            return jacParser.RULE_code_block

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCode_block" ):
                listener.enterCode_block(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCode_block" ):
                listener.exitCode_block(self)




    def code_block(self):

        localctx = jacParser.Code_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_code_block)
        self._la = 0 # Token type
        try:
            self.state = 492
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [jacParser.LBRACE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 482
                self.match(jacParser.LBRACE)
                self.state = 486
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << jacParser.T__1) | (1 << jacParser.T__2) | (1 << jacParser.T__4) | (1 << jacParser.T__5) | (1 << jacParser.T__6) | (1 << jacParser.TYP_STRING) | (1 << jacParser.TYP_INT) | (1 << jacParser.TYP_FLOAT) | (1 << jacParser.TYP_LIST) | (1 << jacParser.TYP_DICT) | (1 << jacParser.TYP_BOOL) | (1 << jacParser.KW_TYPE) | (1 << jacParser.KW_NODE) | (1 << jacParser.KW_IGNORE) | (1 << jacParser.KW_TAKE) | (1 << jacParser.KW_SPAWN) | (1 << jacParser.COLON) | (1 << jacParser.DBL_COLON) | (1 << jacParser.LBRACE) | (1 << jacParser.KW_EDGE) | (1 << jacParser.KW_IF) | (1 << jacParser.KW_FOR) | (1 << jacParser.KW_WHILE) | (1 << jacParser.KW_CONTINUE) | (1 << jacParser.KW_BREAK) | (1 << jacParser.KW_DISENGAGE) | (1 << jacParser.KW_SKIP) | (1 << jacParser.KW_REPORT) | (1 << jacParser.KW_DESTROY) | (1 << jacParser.KW_TRY))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (jacParser.NOT - 65)) | (1 << (jacParser.PLUS - 65)) | (1 << (jacParser.MINUS - 65)) | (1 << (jacParser.STAR_MUL - 65)) | (1 << (jacParser.LPAREN - 65)) | (1 << (jacParser.LSQUARE - 65)) | (1 << (jacParser.FLOAT - 65)) | (1 << (jacParser.STRING - 65)) | (1 << (jacParser.BOOL - 65)) | (1 << (jacParser.INT - 65)) | (1 << (jacParser.NULL - 65)) | (1 << (jacParser.NAME - 65)))) != 0):
                    self.state = 483
                    self.statement()
                    self.state = 488
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 489
                self.match(jacParser.RBRACE)
                pass
            elif token in [jacParser.COLON]:
                self.enterOuterAlt(localctx, 2)
                self.state = 490
                self.match(jacParser.COLON)
                self.state = 491
                self.statement()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Node_ctx_blockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def name_list(self):
            return self.getTypedRuleContext(jacParser.Name_listContext,0)


        def code_block(self):
            return self.getTypedRuleContext(jacParser.Code_blockContext,0)


        def getRuleIndex(self):
            return jacParser.RULE_node_ctx_block

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNode_ctx_block" ):
                listener.enterNode_ctx_block(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNode_ctx_block" ):
                listener.exitNode_ctx_block(self)




    def node_ctx_block(self):

        localctx = jacParser.Node_ctx_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_node_ctx_block)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 494
            self.name_list()
            self.state = 495
            self.code_block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def code_block(self):
            return self.getTypedRuleContext(jacParser.Code_blockContext,0)


        def node_ctx_block(self):
            return self.getTypedRuleContext(jacParser.Node_ctx_blockContext,0)


        def expression(self):
            return self.getTypedRuleContext(jacParser.ExpressionContext,0)


        def SEMI(self):
            return self.getToken(jacParser.SEMI, 0)

        def if_stmt(self):
            return self.getTypedRuleContext(jacParser.If_stmtContext,0)


        def try_stmt(self):
            return self.getTypedRuleContext(jacParser.Try_stmtContext,0)


        def for_stmt(self):
            return self.getTypedRuleContext(jacParser.For_stmtContext,0)


        def while_stmt(self):
            return self.getTypedRuleContext(jacParser.While_stmtContext,0)


        def ctrl_stmt(self):
            return self.getTypedRuleContext(jacParser.Ctrl_stmtContext,0)


        def destroy_action(self):
            return self.getTypedRuleContext(jacParser.Destroy_actionContext,0)


        def report_action(self):
            return self.getTypedRuleContext(jacParser.Report_actionContext,0)


        def walker_action(self):
            return self.getTypedRuleContext(jacParser.Walker_actionContext,0)


        def getRuleIndex(self):
            return jacParser.RULE_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatement" ):
                listener.enterStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatement" ):
                listener.exitStatement(self)




    def statement(self):

        localctx = jacParser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_statement)
        try:
            self.state = 512
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,46,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 497
                self.code_block()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 498
                self.node_ctx_block()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 499
                self.expression()
                self.state = 500
                self.match(jacParser.SEMI)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 502
                self.if_stmt()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 503
                self.try_stmt()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 504
                self.for_stmt()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 505
                self.while_stmt()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 506
                self.ctrl_stmt()
                self.state = 507
                self.match(jacParser.SEMI)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 509
                self.destroy_action()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 510
                self.report_action()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 511
                self.walker_action()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class If_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_IF(self):
            return self.getToken(jacParser.KW_IF, 0)

        def expression(self):
            return self.getTypedRuleContext(jacParser.ExpressionContext,0)


        def code_block(self):
            return self.getTypedRuleContext(jacParser.Code_blockContext,0)


        def elif_stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(jacParser.Elif_stmtContext)
            else:
                return self.getTypedRuleContext(jacParser.Elif_stmtContext,i)


        def else_stmt(self):
            return self.getTypedRuleContext(jacParser.Else_stmtContext,0)


        def getRuleIndex(self):
            return jacParser.RULE_if_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIf_stmt" ):
                listener.enterIf_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIf_stmt" ):
                listener.exitIf_stmt(self)




    def if_stmt(self):

        localctx = jacParser.If_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_if_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 514
            self.match(jacParser.KW_IF)
            self.state = 515
            self.expression()
            self.state = 516
            self.code_block()
            self.state = 520
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,47,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 517
                    self.elif_stmt() 
                self.state = 522
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,47,self._ctx)

            self.state = 524
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,48,self._ctx)
            if la_ == 1:
                self.state = 523
                self.else_stmt()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Try_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_TRY(self):
            return self.getToken(jacParser.KW_TRY, 0)

        def code_block(self):
            return self.getTypedRuleContext(jacParser.Code_blockContext,0)


        def else_from_try(self):
            return self.getTypedRuleContext(jacParser.Else_from_tryContext,0)


        def getRuleIndex(self):
            return jacParser.RULE_try_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTry_stmt" ):
                listener.enterTry_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTry_stmt" ):
                listener.exitTry_stmt(self)




    def try_stmt(self):

        localctx = jacParser.Try_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_try_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 526
            self.match(jacParser.KW_TRY)
            self.state = 527
            self.code_block()
            self.state = 529
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,49,self._ctx)
            if la_ == 1:
                self.state = 528
                self.else_from_try()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Else_from_tryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_ELSE(self):
            return self.getToken(jacParser.KW_ELSE, 0)

        def code_block(self):
            return self.getTypedRuleContext(jacParser.Code_blockContext,0)


        def LPAREN(self):
            return self.getToken(jacParser.LPAREN, 0)

        def NAME(self):
            return self.getToken(jacParser.NAME, 0)

        def RPAREN(self):
            return self.getToken(jacParser.RPAREN, 0)

        def KW_WITH(self):
            return self.getToken(jacParser.KW_WITH, 0)

        def getRuleIndex(self):
            return jacParser.RULE_else_from_try

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElse_from_try" ):
                listener.enterElse_from_try(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElse_from_try" ):
                listener.exitElse_from_try(self)




    def else_from_try(self):

        localctx = jacParser.Else_from_tryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_else_from_try)
        self._la = 0 # Token type
        try:
            self.state = 544
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,52,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 531
                self.match(jacParser.KW_ELSE)
                self.state = 535
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==jacParser.LPAREN:
                    self.state = 532
                    self.match(jacParser.LPAREN)
                    self.state = 533
                    self.match(jacParser.NAME)
                    self.state = 534
                    self.match(jacParser.RPAREN)


                self.state = 537
                self.code_block()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 538
                self.match(jacParser.KW_ELSE)
                self.state = 541
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==jacParser.KW_WITH:
                    self.state = 539
                    self.match(jacParser.KW_WITH)
                    self.state = 540
                    self.match(jacParser.NAME)


                self.state = 543
                self.code_block()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Elif_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_ELIF(self):
            return self.getToken(jacParser.KW_ELIF, 0)

        def expression(self):
            return self.getTypedRuleContext(jacParser.ExpressionContext,0)


        def code_block(self):
            return self.getTypedRuleContext(jacParser.Code_blockContext,0)


        def getRuleIndex(self):
            return jacParser.RULE_elif_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElif_stmt" ):
                listener.enterElif_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElif_stmt" ):
                listener.exitElif_stmt(self)




    def elif_stmt(self):

        localctx = jacParser.Elif_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_elif_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 546
            self.match(jacParser.KW_ELIF)
            self.state = 547
            self.expression()
            self.state = 548
            self.code_block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Else_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_ELSE(self):
            return self.getToken(jacParser.KW_ELSE, 0)

        def code_block(self):
            return self.getTypedRuleContext(jacParser.Code_blockContext,0)


        def getRuleIndex(self):
            return jacParser.RULE_else_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElse_stmt" ):
                listener.enterElse_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElse_stmt" ):
                listener.exitElse_stmt(self)




    def else_stmt(self):

        localctx = jacParser.Else_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_else_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 550
            self.match(jacParser.KW_ELSE)
            self.state = 551
            self.code_block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class For_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_FOR(self):
            return self.getToken(jacParser.KW_FOR, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(jacParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(jacParser.ExpressionContext,i)


        def KW_TO(self):
            return self.getToken(jacParser.KW_TO, 0)

        def KW_BY(self):
            return self.getToken(jacParser.KW_BY, 0)

        def code_block(self):
            return self.getTypedRuleContext(jacParser.Code_blockContext,0)


        def NAME(self):
            return self.getToken(jacParser.NAME, 0)

        def KW_IN(self):
            return self.getToken(jacParser.KW_IN, 0)

        def getRuleIndex(self):
            return jacParser.RULE_for_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFor_stmt" ):
                listener.enterFor_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFor_stmt" ):
                listener.exitFor_stmt(self)




    def for_stmt(self):

        localctx = jacParser.For_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_for_stmt)
        try:
            self.state = 567
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,53,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 553
                self.match(jacParser.KW_FOR)
                self.state = 554
                self.expression()
                self.state = 555
                self.match(jacParser.KW_TO)
                self.state = 556
                self.expression()
                self.state = 557
                self.match(jacParser.KW_BY)
                self.state = 558
                self.expression()
                self.state = 559
                self.code_block()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 561
                self.match(jacParser.KW_FOR)
                self.state = 562
                self.match(jacParser.NAME)
                self.state = 563
                self.match(jacParser.KW_IN)
                self.state = 564
                self.expression()
                self.state = 565
                self.code_block()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class While_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_WHILE(self):
            return self.getToken(jacParser.KW_WHILE, 0)

        def expression(self):
            return self.getTypedRuleContext(jacParser.ExpressionContext,0)


        def code_block(self):
            return self.getTypedRuleContext(jacParser.Code_blockContext,0)


        def getRuleIndex(self):
            return jacParser.RULE_while_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhile_stmt" ):
                listener.enterWhile_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhile_stmt" ):
                listener.exitWhile_stmt(self)




    def while_stmt(self):

        localctx = jacParser.While_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_while_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 569
            self.match(jacParser.KW_WHILE)
            self.state = 570
            self.expression()
            self.state = 571
            self.code_block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Ctrl_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_CONTINUE(self):
            return self.getToken(jacParser.KW_CONTINUE, 0)

        def KW_BREAK(self):
            return self.getToken(jacParser.KW_BREAK, 0)

        def KW_SKIP(self):
            return self.getToken(jacParser.KW_SKIP, 0)

        def getRuleIndex(self):
            return jacParser.RULE_ctrl_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCtrl_stmt" ):
                listener.enterCtrl_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCtrl_stmt" ):
                listener.exitCtrl_stmt(self)




    def ctrl_stmt(self):

        localctx = jacParser.Ctrl_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_ctrl_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 573
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << jacParser.KW_CONTINUE) | (1 << jacParser.KW_BREAK) | (1 << jacParser.KW_SKIP))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Destroy_actionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_DESTROY(self):
            return self.getToken(jacParser.KW_DESTROY, 0)

        def expression(self):
            return self.getTypedRuleContext(jacParser.ExpressionContext,0)


        def SEMI(self):
            return self.getToken(jacParser.SEMI, 0)

        def getRuleIndex(self):
            return jacParser.RULE_destroy_action

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDestroy_action" ):
                listener.enterDestroy_action(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDestroy_action" ):
                listener.exitDestroy_action(self)




    def destroy_action(self):

        localctx = jacParser.Destroy_actionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_destroy_action)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 575
            self.match(jacParser.KW_DESTROY)
            self.state = 576
            self.expression()
            self.state = 577
            self.match(jacParser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Report_actionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_REPORT(self):
            return self.getToken(jacParser.KW_REPORT, 0)

        def expression(self):
            return self.getTypedRuleContext(jacParser.ExpressionContext,0)


        def SEMI(self):
            return self.getToken(jacParser.SEMI, 0)

        def getRuleIndex(self):
            return jacParser.RULE_report_action

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReport_action" ):
                listener.enterReport_action(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReport_action" ):
                listener.exitReport_action(self)




    def report_action(self):

        localctx = jacParser.Report_actionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_report_action)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 579
            self.match(jacParser.KW_REPORT)
            self.state = 580
            self.expression()
            self.state = 581
            self.match(jacParser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Walker_actionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ignore_action(self):
            return self.getTypedRuleContext(jacParser.Ignore_actionContext,0)


        def take_action(self):
            return self.getTypedRuleContext(jacParser.Take_actionContext,0)


        def KW_DISENGAGE(self):
            return self.getToken(jacParser.KW_DISENGAGE, 0)

        def SEMI(self):
            return self.getToken(jacParser.SEMI, 0)

        def getRuleIndex(self):
            return jacParser.RULE_walker_action

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWalker_action" ):
                listener.enterWalker_action(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWalker_action" ):
                listener.exitWalker_action(self)




    def walker_action(self):

        localctx = jacParser.Walker_actionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_walker_action)
        try:
            self.state = 587
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [jacParser.KW_IGNORE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 583
                self.ignore_action()
                pass
            elif token in [jacParser.KW_TAKE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 584
                self.take_action()
                pass
            elif token in [jacParser.KW_DISENGAGE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 585
                self.match(jacParser.KW_DISENGAGE)
                self.state = 586
                self.match(jacParser.SEMI)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Ignore_actionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_IGNORE(self):
            return self.getToken(jacParser.KW_IGNORE, 0)

        def expression(self):
            return self.getTypedRuleContext(jacParser.ExpressionContext,0)


        def SEMI(self):
            return self.getToken(jacParser.SEMI, 0)

        def getRuleIndex(self):
            return jacParser.RULE_ignore_action

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIgnore_action" ):
                listener.enterIgnore_action(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIgnore_action" ):
                listener.exitIgnore_action(self)




    def ignore_action(self):

        localctx = jacParser.Ignore_actionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_ignore_action)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 589
            self.match(jacParser.KW_IGNORE)
            self.state = 590
            self.expression()
            self.state = 591
            self.match(jacParser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Take_actionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_TAKE(self):
            return self.getToken(jacParser.KW_TAKE, 0)

        def expression(self):
            return self.getTypedRuleContext(jacParser.ExpressionContext,0)


        def SEMI(self):
            return self.getToken(jacParser.SEMI, 0)

        def else_stmt(self):
            return self.getTypedRuleContext(jacParser.Else_stmtContext,0)


        def getRuleIndex(self):
            return jacParser.RULE_take_action

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTake_action" ):
                listener.enterTake_action(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTake_action" ):
                listener.exitTake_action(self)




    def take_action(self):

        localctx = jacParser.Take_actionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_take_action)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 593
            self.match(jacParser.KW_TAKE)
            self.state = 594
            self.expression()
            self.state = 597
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [jacParser.SEMI]:
                self.state = 595
                self.match(jacParser.SEMI)
                pass
            elif token in [jacParser.KW_ELSE]:
                self.state = 596
                self.else_stmt()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def connect(self):
            return self.getTypedRuleContext(jacParser.ConnectContext,0)


        def assignment(self):
            return self.getTypedRuleContext(jacParser.AssignmentContext,0)


        def copy_assign(self):
            return self.getTypedRuleContext(jacParser.Copy_assignContext,0)


        def inc_assign(self):
            return self.getTypedRuleContext(jacParser.Inc_assignContext,0)


        def getRuleIndex(self):
            return jacParser.RULE_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression" ):
                listener.enterExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression" ):
                listener.exitExpression(self)




    def expression(self):

        localctx = jacParser.ExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 599
            self.connect()
            self.state = 603
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,56,self._ctx)
            if la_ == 1:
                self.state = 600
                self.assignment()

            elif la_ == 2:
                self.state = 601
                self.copy_assign()

            elif la_ == 3:
                self.state = 602
                self.inc_assign()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssignmentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EQ(self):
            return self.getToken(jacParser.EQ, 0)

        def expression(self):
            return self.getTypedRuleContext(jacParser.ExpressionContext,0)


        def getRuleIndex(self):
            return jacParser.RULE_assignment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignment" ):
                listener.enterAssignment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignment" ):
                listener.exitAssignment(self)




    def assignment(self):

        localctx = jacParser.AssignmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_assignment)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 605
            self.match(jacParser.EQ)
            self.state = 606
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Copy_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CPY_EQ(self):
            return self.getToken(jacParser.CPY_EQ, 0)

        def expression(self):
            return self.getTypedRuleContext(jacParser.ExpressionContext,0)


        def getRuleIndex(self):
            return jacParser.RULE_copy_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCopy_assign" ):
                listener.enterCopy_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCopy_assign" ):
                listener.exitCopy_assign(self)




    def copy_assign(self):

        localctx = jacParser.Copy_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_copy_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 608
            self.match(jacParser.CPY_EQ)
            self.state = 609
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Inc_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(jacParser.ExpressionContext,0)


        def PEQ(self):
            return self.getToken(jacParser.PEQ, 0)

        def MEQ(self):
            return self.getToken(jacParser.MEQ, 0)

        def TEQ(self):
            return self.getToken(jacParser.TEQ, 0)

        def DEQ(self):
            return self.getToken(jacParser.DEQ, 0)

        def getRuleIndex(self):
            return jacParser.RULE_inc_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInc_assign" ):
                listener.enterInc_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInc_assign" ):
                listener.exitInc_assign(self)




    def inc_assign(self):

        localctx = jacParser.Inc_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_inc_assign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 611
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << jacParser.PEQ) | (1 << jacParser.MEQ) | (1 << jacParser.TEQ) | (1 << jacParser.DEQ))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 612
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConnectContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def logical(self):
            return self.getTypedRuleContext(jacParser.LogicalContext,0)


        def edge_ref(self):
            return self.getTypedRuleContext(jacParser.Edge_refContext,0)


        def expression(self):
            return self.getTypedRuleContext(jacParser.ExpressionContext,0)


        def NOT(self):
            return self.getToken(jacParser.NOT, 0)

        def getRuleIndex(self):
            return jacParser.RULE_connect

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConnect" ):
                listener.enterConnect(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConnect" ):
                listener.exitConnect(self)




    def connect(self):

        localctx = jacParser.ConnectContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_connect)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 614
            self.logical()
            self.state = 621
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,58,self._ctx)
            if la_ == 1:
                self.state = 616
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==jacParser.NOT:
                    self.state = 615
                    self.match(jacParser.NOT)


                self.state = 618
                self.edge_ref()
                self.state = 619
                self.expression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LogicalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def compare(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(jacParser.CompareContext)
            else:
                return self.getTypedRuleContext(jacParser.CompareContext,i)


        def KW_AND(self, i:int=None):
            if i is None:
                return self.getTokens(jacParser.KW_AND)
            else:
                return self.getToken(jacParser.KW_AND, i)

        def KW_OR(self, i:int=None):
            if i is None:
                return self.getTokens(jacParser.KW_OR)
            else:
                return self.getToken(jacParser.KW_OR, i)

        def getRuleIndex(self):
            return jacParser.RULE_logical

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogical" ):
                listener.enterLogical(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogical" ):
                listener.exitLogical(self)




    def logical(self):

        localctx = jacParser.LogicalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_logical)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 623
            self.compare()
            self.state = 628
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,59,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 624
                    _la = self._input.LA(1)
                    if not(_la==jacParser.KW_AND or _la==jacParser.KW_OR):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 625
                    self.compare() 
                self.state = 630
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,59,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CompareContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NOT(self):
            return self.getToken(jacParser.NOT, 0)

        def compare(self):
            return self.getTypedRuleContext(jacParser.CompareContext,0)


        def arithmetic(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(jacParser.ArithmeticContext)
            else:
                return self.getTypedRuleContext(jacParser.ArithmeticContext,i)


        def cmp_op(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(jacParser.Cmp_opContext)
            else:
                return self.getTypedRuleContext(jacParser.Cmp_opContext,i)


        def getRuleIndex(self):
            return jacParser.RULE_compare

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompare" ):
                listener.enterCompare(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompare" ):
                listener.exitCompare(self)




    def compare(self):

        localctx = jacParser.CompareContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_compare)
        try:
            self.state = 642
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [jacParser.NOT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 631
                self.match(jacParser.NOT)
                self.state = 632
                self.compare()
                pass
            elif token in [jacParser.T__1, jacParser.T__2, jacParser.T__4, jacParser.T__5, jacParser.T__6, jacParser.TYP_STRING, jacParser.TYP_INT, jacParser.TYP_FLOAT, jacParser.TYP_LIST, jacParser.TYP_DICT, jacParser.TYP_BOOL, jacParser.KW_TYPE, jacParser.KW_NODE, jacParser.KW_SPAWN, jacParser.DBL_COLON, jacParser.LBRACE, jacParser.KW_EDGE, jacParser.PLUS, jacParser.MINUS, jacParser.STAR_MUL, jacParser.LPAREN, jacParser.LSQUARE, jacParser.FLOAT, jacParser.STRING, jacParser.BOOL, jacParser.INT, jacParser.NULL, jacParser.NAME]:
                self.enterOuterAlt(localctx, 2)
                self.state = 633
                self.arithmetic()
                self.state = 639
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,60,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 634
                        self.cmp_op()
                        self.state = 635
                        self.arithmetic() 
                    self.state = 641
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,60,self._ctx)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Cmp_opContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EE(self):
            return self.getToken(jacParser.EE, 0)

        def LT(self):
            return self.getToken(jacParser.LT, 0)

        def GT(self):
            return self.getToken(jacParser.GT, 0)

        def LTE(self):
            return self.getToken(jacParser.LTE, 0)

        def GTE(self):
            return self.getToken(jacParser.GTE, 0)

        def NE(self):
            return self.getToken(jacParser.NE, 0)

        def KW_IN(self):
            return self.getToken(jacParser.KW_IN, 0)

        def nin(self):
            return self.getTypedRuleContext(jacParser.NinContext,0)


        def getRuleIndex(self):
            return jacParser.RULE_cmp_op

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCmp_op" ):
                listener.enterCmp_op(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCmp_op" ):
                listener.exitCmp_op(self)




    def cmp_op(self):

        localctx = jacParser.Cmp_opContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_cmp_op)
        try:
            self.state = 652
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [jacParser.EE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 644
                self.match(jacParser.EE)
                pass
            elif token in [jacParser.LT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 645
                self.match(jacParser.LT)
                pass
            elif token in [jacParser.GT]:
                self.enterOuterAlt(localctx, 3)
                self.state = 646
                self.match(jacParser.GT)
                pass
            elif token in [jacParser.LTE]:
                self.enterOuterAlt(localctx, 4)
                self.state = 647
                self.match(jacParser.LTE)
                pass
            elif token in [jacParser.GTE]:
                self.enterOuterAlt(localctx, 5)
                self.state = 648
                self.match(jacParser.GTE)
                pass
            elif token in [jacParser.NE]:
                self.enterOuterAlt(localctx, 6)
                self.state = 649
                self.match(jacParser.NE)
                pass
            elif token in [jacParser.KW_IN]:
                self.enterOuterAlt(localctx, 7)
                self.state = 650
                self.match(jacParser.KW_IN)
                pass
            elif token in [jacParser.NOT]:
                self.enterOuterAlt(localctx, 8)
                self.state = 651
                self.nin()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NinContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NOT(self):
            return self.getToken(jacParser.NOT, 0)

        def KW_IN(self):
            return self.getToken(jacParser.KW_IN, 0)

        def getRuleIndex(self):
            return jacParser.RULE_nin

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNin" ):
                listener.enterNin(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNin" ):
                listener.exitNin(self)




    def nin(self):

        localctx = jacParser.NinContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_nin)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 654
            self.match(jacParser.NOT)
            self.state = 655
            self.match(jacParser.KW_IN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArithmeticContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def term(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(jacParser.TermContext)
            else:
                return self.getTypedRuleContext(jacParser.TermContext,i)


        def PLUS(self, i:int=None):
            if i is None:
                return self.getTokens(jacParser.PLUS)
            else:
                return self.getToken(jacParser.PLUS, i)

        def MINUS(self, i:int=None):
            if i is None:
                return self.getTokens(jacParser.MINUS)
            else:
                return self.getToken(jacParser.MINUS, i)

        def getRuleIndex(self):
            return jacParser.RULE_arithmetic

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArithmetic" ):
                listener.enterArithmetic(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArithmetic" ):
                listener.exitArithmetic(self)




    def arithmetic(self):

        localctx = jacParser.ArithmeticContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_arithmetic)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 657
            self.term()
            self.state = 662
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,63,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 658
                    _la = self._input.LA(1)
                    if not(_la==jacParser.PLUS or _la==jacParser.MINUS):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 659
                    self.term() 
                self.state = 664
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,63,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TermContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def factor(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(jacParser.FactorContext)
            else:
                return self.getTypedRuleContext(jacParser.FactorContext,i)


        def STAR_MUL(self, i:int=None):
            if i is None:
                return self.getTokens(jacParser.STAR_MUL)
            else:
                return self.getToken(jacParser.STAR_MUL, i)

        def DIV(self, i:int=None):
            if i is None:
                return self.getTokens(jacParser.DIV)
            else:
                return self.getToken(jacParser.DIV, i)

        def MOD(self, i:int=None):
            if i is None:
                return self.getTokens(jacParser.MOD)
            else:
                return self.getToken(jacParser.MOD, i)

        def getRuleIndex(self):
            return jacParser.RULE_term

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTerm" ):
                listener.enterTerm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTerm" ):
                listener.exitTerm(self)




    def term(self):

        localctx = jacParser.TermContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_term)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 665
            self.factor()
            self.state = 670
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,64,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 666
                    _la = self._input.LA(1)
                    if not(((((_la - 80)) & ~0x3f) == 0 and ((1 << (_la - 80)) & ((1 << (jacParser.STAR_MUL - 80)) | (1 << (jacParser.DIV - 80)) | (1 << (jacParser.MOD - 80)))) != 0)):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 667
                    self.factor() 
                self.state = 672
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,64,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FactorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def factor(self):
            return self.getTypedRuleContext(jacParser.FactorContext,0)


        def PLUS(self):
            return self.getToken(jacParser.PLUS, 0)

        def MINUS(self):
            return self.getToken(jacParser.MINUS, 0)

        def power(self):
            return self.getTypedRuleContext(jacParser.PowerContext,0)


        def getRuleIndex(self):
            return jacParser.RULE_factor

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFactor" ):
                listener.enterFactor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFactor" ):
                listener.exitFactor(self)




    def factor(self):

        localctx = jacParser.FactorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_factor)
        self._la = 0 # Token type
        try:
            self.state = 676
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,65,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 673
                _la = self._input.LA(1)
                if not(_la==jacParser.PLUS or _la==jacParser.MINUS):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 674
                self.factor()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 675
                self.power()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PowerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def func_call(self):
            return self.getTypedRuleContext(jacParser.Func_callContext,0)


        def POW(self, i:int=None):
            if i is None:
                return self.getTokens(jacParser.POW)
            else:
                return self.getToken(jacParser.POW, i)

        def factor(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(jacParser.FactorContext)
            else:
                return self.getTypedRuleContext(jacParser.FactorContext,i)


        def getRuleIndex(self):
            return jacParser.RULE_power

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPower" ):
                listener.enterPower(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPower" ):
                listener.exitPower(self)




    def power(self):

        localctx = jacParser.PowerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_power)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 678
            self.func_call()
            self.state = 683
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,66,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 679
                    self.match(jacParser.POW)
                    self.state = 680
                    self.factor() 
                self.state = 685
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,66,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Func_callContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def atom(self):
            return self.getTypedRuleContext(jacParser.AtomContext,0)


        def LPAREN(self):
            return self.getToken(jacParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(jacParser.RPAREN, 0)

        def expr_list(self):
            return self.getTypedRuleContext(jacParser.Expr_listContext,0)


        def DBL_COLON(self):
            return self.getToken(jacParser.DBL_COLON, 0)

        def NAME(self):
            return self.getToken(jacParser.NAME, 0)

        def spawn_ctx(self):
            return self.getTypedRuleContext(jacParser.Spawn_ctxContext,0)


        def getRuleIndex(self):
            return jacParser.RULE_func_call

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunc_call" ):
                listener.enterFunc_call(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunc_call" ):
                listener.exitFunc_call(self)




    def func_call(self):

        localctx = jacParser.Func_callContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_func_call)
        self._la = 0 # Token type
        try:
            self.state = 702
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,71,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 686
                self.atom(0)
                self.state = 692
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,68,self._ctx)
                if la_ == 1:
                    self.state = 687
                    self.match(jacParser.LPAREN)
                    self.state = 689
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << jacParser.T__1) | (1 << jacParser.T__2) | (1 << jacParser.T__4) | (1 << jacParser.T__5) | (1 << jacParser.T__6) | (1 << jacParser.TYP_STRING) | (1 << jacParser.TYP_INT) | (1 << jacParser.TYP_FLOAT) | (1 << jacParser.TYP_LIST) | (1 << jacParser.TYP_DICT) | (1 << jacParser.TYP_BOOL) | (1 << jacParser.KW_TYPE) | (1 << jacParser.KW_NODE) | (1 << jacParser.KW_SPAWN) | (1 << jacParser.DBL_COLON) | (1 << jacParser.LBRACE) | (1 << jacParser.KW_EDGE))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (jacParser.NOT - 65)) | (1 << (jacParser.PLUS - 65)) | (1 << (jacParser.MINUS - 65)) | (1 << (jacParser.STAR_MUL - 65)) | (1 << (jacParser.LPAREN - 65)) | (1 << (jacParser.LSQUARE - 65)) | (1 << (jacParser.FLOAT - 65)) | (1 << (jacParser.STRING - 65)) | (1 << (jacParser.BOOL - 65)) | (1 << (jacParser.INT - 65)) | (1 << (jacParser.NULL - 65)) | (1 << (jacParser.NAME - 65)))) != 0):
                        self.state = 688
                        self.expr_list()


                    self.state = 691
                    self.match(jacParser.RPAREN)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 695
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << jacParser.T__1) | (1 << jacParser.T__2) | (1 << jacParser.T__4) | (1 << jacParser.T__5) | (1 << jacParser.T__6) | (1 << jacParser.TYP_STRING) | (1 << jacParser.TYP_INT) | (1 << jacParser.TYP_FLOAT) | (1 << jacParser.TYP_LIST) | (1 << jacParser.TYP_DICT) | (1 << jacParser.TYP_BOOL) | (1 << jacParser.KW_TYPE) | (1 << jacParser.KW_NODE) | (1 << jacParser.KW_SPAWN) | (1 << jacParser.LBRACE) | (1 << jacParser.KW_EDGE))) != 0) or ((((_la - 79)) & ~0x3f) == 0 and ((1 << (_la - 79)) & ((1 << (jacParser.MINUS - 79)) | (1 << (jacParser.STAR_MUL - 79)) | (1 << (jacParser.LPAREN - 79)) | (1 << (jacParser.LSQUARE - 79)) | (1 << (jacParser.FLOAT - 79)) | (1 << (jacParser.STRING - 79)) | (1 << (jacParser.BOOL - 79)) | (1 << (jacParser.INT - 79)) | (1 << (jacParser.NULL - 79)) | (1 << (jacParser.NAME - 79)))) != 0):
                    self.state = 694
                    self.atom(0)


                self.state = 697
                self.match(jacParser.DBL_COLON)
                self.state = 698
                self.match(jacParser.NAME)
                self.state = 700
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,70,self._ctx)
                if la_ == 1:
                    self.state = 699
                    self.spawn_ctx()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AtomContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INT(self):
            return self.getToken(jacParser.INT, 0)

        def FLOAT(self):
            return self.getToken(jacParser.FLOAT, 0)

        def STRING(self):
            return self.getToken(jacParser.STRING, 0)

        def BOOL(self):
            return self.getToken(jacParser.BOOL, 0)

        def NULL(self):
            return self.getToken(jacParser.NULL, 0)

        def NAME(self):
            return self.getToken(jacParser.NAME, 0)

        def node_edge_ref(self):
            return self.getTypedRuleContext(jacParser.Node_edge_refContext,0)


        def list_val(self):
            return self.getTypedRuleContext(jacParser.List_valContext,0)


        def dict_val(self):
            return self.getTypedRuleContext(jacParser.Dict_valContext,0)


        def LPAREN(self):
            return self.getToken(jacParser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(jacParser.ExpressionContext,0)


        def RPAREN(self):
            return self.getToken(jacParser.RPAREN, 0)

        def spawn(self):
            return self.getTypedRuleContext(jacParser.SpawnContext,0)


        def ref(self):
            return self.getTypedRuleContext(jacParser.RefContext,0)


        def deref(self):
            return self.getTypedRuleContext(jacParser.DerefContext,0)


        def any_type(self):
            return self.getTypedRuleContext(jacParser.Any_typeContext,0)


        def atom(self):
            return self.getTypedRuleContext(jacParser.AtomContext,0)


        def DOT(self):
            return self.getToken(jacParser.DOT, 0)

        def built_in(self):
            return self.getTypedRuleContext(jacParser.Built_inContext,0)


        def index_slice(self):
            return self.getTypedRuleContext(jacParser.Index_sliceContext,0)


        def getRuleIndex(self):
            return jacParser.RULE_atom

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAtom" ):
                listener.enterAtom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAtom" ):
                listener.exitAtom(self)



    def atom(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = jacParser.AtomContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 112
        self.enterRecursionRule(localctx, 112, self.RULE_atom, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 722
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,72,self._ctx)
            if la_ == 1:
                self.state = 705
                self.match(jacParser.INT)
                pass

            elif la_ == 2:
                self.state = 706
                self.match(jacParser.FLOAT)
                pass

            elif la_ == 3:
                self.state = 707
                self.match(jacParser.STRING)
                pass

            elif la_ == 4:
                self.state = 708
                self.match(jacParser.BOOL)
                pass

            elif la_ == 5:
                self.state = 709
                self.match(jacParser.NULL)
                pass

            elif la_ == 6:
                self.state = 710
                self.match(jacParser.NAME)
                pass

            elif la_ == 7:
                self.state = 711
                self.node_edge_ref()
                pass

            elif la_ == 8:
                self.state = 712
                self.list_val()
                pass

            elif la_ == 9:
                self.state = 713
                self.dict_val()
                pass

            elif la_ == 10:
                self.state = 714
                self.match(jacParser.LPAREN)
                self.state = 715
                self.expression()
                self.state = 716
                self.match(jacParser.RPAREN)
                pass

            elif la_ == 11:
                self.state = 718
                self.spawn()
                pass

            elif la_ == 12:
                self.state = 719
                self.ref()
                pass

            elif la_ == 13:
                self.state = 720
                self.deref()
                pass

            elif la_ == 14:
                self.state = 721
                self.any_type()
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 734
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,74,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 732
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,73,self._ctx)
                    if la_ == 1:
                        localctx = jacParser.AtomContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_atom)
                        self.state = 724
                        if not self.precpred(self._ctx, 6):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 6)")
                        self.state = 725
                        self.match(jacParser.DOT)
                        self.state = 726
                        self.built_in()
                        pass

                    elif la_ == 2:
                        localctx = jacParser.AtomContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_atom)
                        self.state = 727
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 728
                        self.match(jacParser.DOT)
                        self.state = 729
                        self.match(jacParser.NAME)
                        pass

                    elif la_ == 3:
                        localctx = jacParser.AtomContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_atom)
                        self.state = 730
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 731
                        self.index_slice()
                        pass

             
                self.state = 736
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,74,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class RefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(jacParser.ExpressionContext,0)


        def getRuleIndex(self):
            return jacParser.RULE_ref

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRef" ):
                listener.enterRef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRef" ):
                listener.exitRef(self)




    def ref(self):

        localctx = jacParser.RefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_ref)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 737
            self.match(jacParser.T__1)
            self.state = 738
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DerefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STAR_MUL(self):
            return self.getToken(jacParser.STAR_MUL, 0)

        def expression(self):
            return self.getTypedRuleContext(jacParser.ExpressionContext,0)


        def getRuleIndex(self):
            return jacParser.RULE_deref

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeref" ):
                listener.enterDeref(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeref" ):
                listener.exitDeref(self)




    def deref(self):

        localctx = jacParser.DerefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_deref)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 740
            self.match(jacParser.STAR_MUL)
            self.state = 741
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Built_inContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def cast_built_in(self):
            return self.getTypedRuleContext(jacParser.Cast_built_inContext,0)


        def obj_built_in(self):
            return self.getTypedRuleContext(jacParser.Obj_built_inContext,0)


        def dict_built_in(self):
            return self.getTypedRuleContext(jacParser.Dict_built_inContext,0)


        def list_built_in(self):
            return self.getTypedRuleContext(jacParser.List_built_inContext,0)


        def string_built_in(self):
            return self.getTypedRuleContext(jacParser.String_built_inContext,0)


        def getRuleIndex(self):
            return jacParser.RULE_built_in

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBuilt_in" ):
                listener.enterBuilt_in(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBuilt_in" ):
                listener.exitBuilt_in(self)




    def built_in(self):

        localctx = jacParser.Built_inContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_built_in)
        try:
            self.state = 748
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,75,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 743
                self.cast_built_in()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 744
                self.obj_built_in()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 745
                self.dict_built_in()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 746
                self.list_built_in()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 747
                self.string_built_in()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Cast_built_inContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_type(self):
            return self.getTypedRuleContext(jacParser.Any_typeContext,0)


        def getRuleIndex(self):
            return jacParser.RULE_cast_built_in

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCast_built_in" ):
                listener.enterCast_built_in(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCast_built_in" ):
                listener.exitCast_built_in(self)




    def cast_built_in(self):

        localctx = jacParser.Cast_built_inContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_cast_built_in)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 750
            self.any_type()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Obj_built_inContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_CONTEXT(self):
            return self.getToken(jacParser.KW_CONTEXT, 0)

        def KW_INFO(self):
            return self.getToken(jacParser.KW_INFO, 0)

        def KW_DETAILS(self):
            return self.getToken(jacParser.KW_DETAILS, 0)

        def getRuleIndex(self):
            return jacParser.RULE_obj_built_in

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObj_built_in" ):
                listener.enterObj_built_in(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObj_built_in" ):
                listener.exitObj_built_in(self)




    def obj_built_in(self):

        localctx = jacParser.Obj_built_inContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_obj_built_in)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 752
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << jacParser.KW_CONTEXT) | (1 << jacParser.KW_INFO) | (1 << jacParser.KW_DETAILS))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dict_built_inContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_KEYS(self):
            return self.getToken(jacParser.KW_KEYS, 0)

        def LBRACE(self):
            return self.getToken(jacParser.LBRACE, 0)

        def name_list(self):
            return self.getTypedRuleContext(jacParser.Name_listContext,0)


        def RBRACE(self):
            return self.getToken(jacParser.RBRACE, 0)

        def getRuleIndex(self):
            return jacParser.RULE_dict_built_in

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDict_built_in" ):
                listener.enterDict_built_in(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDict_built_in" ):
                listener.exitDict_built_in(self)




    def dict_built_in(self):

        localctx = jacParser.Dict_built_inContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_dict_built_in)
        try:
            self.state = 759
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [jacParser.KW_KEYS]:
                self.enterOuterAlt(localctx, 1)
                self.state = 754
                self.match(jacParser.KW_KEYS)
                pass
            elif token in [jacParser.LBRACE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 755
                self.match(jacParser.LBRACE)
                self.state = 756
                self.name_list()
                self.state = 757
                self.match(jacParser.RBRACE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class List_built_inContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_LENGTH(self):
            return self.getToken(jacParser.KW_LENGTH, 0)

        def getRuleIndex(self):
            return jacParser.RULE_list_built_in

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterList_built_in" ):
                listener.enterList_built_in(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitList_built_in" ):
                listener.exitList_built_in(self)




    def list_built_in(self):

        localctx = jacParser.List_built_inContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_list_built_in)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 761
            self.match(jacParser.KW_LENGTH)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class String_built_inContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TYP_STRING(self):
            return self.getToken(jacParser.TYP_STRING, 0)

        def DBL_COLON(self):
            return self.getToken(jacParser.DBL_COLON, 0)

        def NAME(self):
            return self.getToken(jacParser.NAME, 0)

        def LPAREN(self):
            return self.getToken(jacParser.LPAREN, 0)

        def expr_list(self):
            return self.getTypedRuleContext(jacParser.Expr_listContext,0)


        def RPAREN(self):
            return self.getToken(jacParser.RPAREN, 0)

        def getRuleIndex(self):
            return jacParser.RULE_string_built_in

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterString_built_in" ):
                listener.enterString_built_in(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitString_built_in" ):
                listener.exitString_built_in(self)




    def string_built_in(self):

        localctx = jacParser.String_built_inContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_string_built_in)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 763
            self.match(jacParser.TYP_STRING)
            self.state = 764
            self.match(jacParser.DBL_COLON)
            self.state = 765
            self.match(jacParser.NAME)
            self.state = 770
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,77,self._ctx)
            if la_ == 1:
                self.state = 766
                self.match(jacParser.LPAREN)
                self.state = 767
                self.expr_list()
                self.state = 768
                self.match(jacParser.RPAREN)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Node_edge_refContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def node_ref(self):
            return self.getTypedRuleContext(jacParser.Node_refContext,0)


        def filter_ctx(self):
            return self.getTypedRuleContext(jacParser.Filter_ctxContext,0)


        def edge_ref(self):
            return self.getTypedRuleContext(jacParser.Edge_refContext,0)


        def getRuleIndex(self):
            return jacParser.RULE_node_edge_ref

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNode_edge_ref" ):
                listener.enterNode_edge_ref(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNode_edge_ref" ):
                listener.exitNode_edge_ref(self)




    def node_edge_ref(self):

        localctx = jacParser.Node_edge_refContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_node_edge_ref)
        try:
            self.state = 783
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [jacParser.KW_NODE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 772
                self.node_ref()
                self.state = 774
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,78,self._ctx)
                if la_ == 1:
                    self.state = 773
                    self.filter_ctx()


                pass
            elif token in [jacParser.T__2, jacParser.T__4, jacParser.T__5, jacParser.T__6, jacParser.MINUS]:
                self.enterOuterAlt(localctx, 2)
                self.state = 776
                self.edge_ref()
                self.state = 781
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,80,self._ctx)
                if la_ == 1:
                    self.state = 777
                    self.node_ref()
                    self.state = 779
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,79,self._ctx)
                    if la_ == 1:
                        self.state = 778
                        self.filter_ctx()




                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Node_refContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_NODE(self):
            return self.getToken(jacParser.KW_NODE, 0)

        def DBL_COLON(self):
            return self.getToken(jacParser.DBL_COLON, 0)

        def NAME(self):
            return self.getToken(jacParser.NAME, 0)

        def getRuleIndex(self):
            return jacParser.RULE_node_ref

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNode_ref" ):
                listener.enterNode_ref(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNode_ref" ):
                listener.exitNode_ref(self)




    def node_ref(self):

        localctx = jacParser.Node_refContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_node_ref)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 785
            self.match(jacParser.KW_NODE)
            self.state = 786
            self.match(jacParser.DBL_COLON)
            self.state = 787
            self.match(jacParser.NAME)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Walker_refContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_WALKER(self):
            return self.getToken(jacParser.KW_WALKER, 0)

        def DBL_COLON(self):
            return self.getToken(jacParser.DBL_COLON, 0)

        def NAME(self):
            return self.getToken(jacParser.NAME, 0)

        def getRuleIndex(self):
            return jacParser.RULE_walker_ref

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWalker_ref" ):
                listener.enterWalker_ref(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWalker_ref" ):
                listener.exitWalker_ref(self)




    def walker_ref(self):

        localctx = jacParser.Walker_refContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_walker_ref)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 789
            self.match(jacParser.KW_WALKER)
            self.state = 790
            self.match(jacParser.DBL_COLON)
            self.state = 791
            self.match(jacParser.NAME)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Graph_refContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_GRAPH(self):
            return self.getToken(jacParser.KW_GRAPH, 0)

        def DBL_COLON(self):
            return self.getToken(jacParser.DBL_COLON, 0)

        def NAME(self):
            return self.getToken(jacParser.NAME, 0)

        def getRuleIndex(self):
            return jacParser.RULE_graph_ref

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGraph_ref" ):
                listener.enterGraph_ref(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGraph_ref" ):
                listener.exitGraph_ref(self)




    def graph_ref(self):

        localctx = jacParser.Graph_refContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_graph_ref)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 793
            self.match(jacParser.KW_GRAPH)
            self.state = 794
            self.match(jacParser.DBL_COLON)
            self.state = 795
            self.match(jacParser.NAME)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Edge_refContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def edge_to(self):
            return self.getTypedRuleContext(jacParser.Edge_toContext,0)


        def edge_from(self):
            return self.getTypedRuleContext(jacParser.Edge_fromContext,0)


        def edge_any(self):
            return self.getTypedRuleContext(jacParser.Edge_anyContext,0)


        def getRuleIndex(self):
            return jacParser.RULE_edge_ref

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEdge_ref" ):
                listener.enterEdge_ref(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEdge_ref" ):
                listener.exitEdge_ref(self)




    def edge_ref(self):

        localctx = jacParser.Edge_refContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_edge_ref)
        try:
            self.state = 800
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,82,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 797
                self.edge_to()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 798
                self.edge_from()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 799
                self.edge_any()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Edge_toContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MINUS(self):
            return self.getToken(jacParser.MINUS, 0)

        def LSQUARE(self):
            return self.getToken(jacParser.LSQUARE, 0)

        def NAME(self):
            return self.getToken(jacParser.NAME, 0)

        def RSQUARE(self):
            return self.getToken(jacParser.RSQUARE, 0)

        def spawn_ctx(self):
            return self.getTypedRuleContext(jacParser.Spawn_ctxContext,0)


        def filter_ctx(self):
            return self.getTypedRuleContext(jacParser.Filter_ctxContext,0)


        def getRuleIndex(self):
            return jacParser.RULE_edge_to

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEdge_to" ):
                listener.enterEdge_to(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEdge_to" ):
                listener.exitEdge_to(self)




    def edge_to(self):

        localctx = jacParser.Edge_toContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_edge_to)
        self._la = 0 # Token type
        try:
            self.state = 814
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [jacParser.T__2]:
                self.enterOuterAlt(localctx, 1)
                self.state = 802
                self.match(jacParser.T__2)
                pass
            elif token in [jacParser.MINUS]:
                self.enterOuterAlt(localctx, 2)
                self.state = 803
                self.match(jacParser.MINUS)
                self.state = 811
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==jacParser.LSQUARE:
                    self.state = 804
                    self.match(jacParser.LSQUARE)
                    self.state = 805
                    self.match(jacParser.NAME)
                    self.state = 808
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,83,self._ctx)
                    if la_ == 1:
                        self.state = 806
                        self.spawn_ctx()

                    elif la_ == 2:
                        self.state = 807
                        self.filter_ctx()


                    self.state = 810
                    self.match(jacParser.RSQUARE)


                self.state = 813
                self.match(jacParser.T__3)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Edge_fromContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MINUS(self):
            return self.getToken(jacParser.MINUS, 0)

        def LSQUARE(self):
            return self.getToken(jacParser.LSQUARE, 0)

        def NAME(self):
            return self.getToken(jacParser.NAME, 0)

        def RSQUARE(self):
            return self.getToken(jacParser.RSQUARE, 0)

        def spawn_ctx(self):
            return self.getTypedRuleContext(jacParser.Spawn_ctxContext,0)


        def filter_ctx(self):
            return self.getTypedRuleContext(jacParser.Filter_ctxContext,0)


        def getRuleIndex(self):
            return jacParser.RULE_edge_from

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEdge_from" ):
                listener.enterEdge_from(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEdge_from" ):
                listener.exitEdge_from(self)




    def edge_from(self):

        localctx = jacParser.Edge_fromContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_edge_from)
        self._la = 0 # Token type
        try:
            self.state = 828
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [jacParser.T__4]:
                self.enterOuterAlt(localctx, 1)
                self.state = 816
                self.match(jacParser.T__4)
                pass
            elif token in [jacParser.T__5]:
                self.enterOuterAlt(localctx, 2)
                self.state = 817
                self.match(jacParser.T__5)
                self.state = 825
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==jacParser.LSQUARE:
                    self.state = 818
                    self.match(jacParser.LSQUARE)
                    self.state = 819
                    self.match(jacParser.NAME)
                    self.state = 822
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,86,self._ctx)
                    if la_ == 1:
                        self.state = 820
                        self.spawn_ctx()

                    elif la_ == 2:
                        self.state = 821
                        self.filter_ctx()


                    self.state = 824
                    self.match(jacParser.RSQUARE)


                self.state = 827
                self.match(jacParser.MINUS)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Edge_anyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LSQUARE(self):
            return self.getToken(jacParser.LSQUARE, 0)

        def NAME(self):
            return self.getToken(jacParser.NAME, 0)

        def RSQUARE(self):
            return self.getToken(jacParser.RSQUARE, 0)

        def spawn_ctx(self):
            return self.getTypedRuleContext(jacParser.Spawn_ctxContext,0)


        def filter_ctx(self):
            return self.getTypedRuleContext(jacParser.Filter_ctxContext,0)


        def getRuleIndex(self):
            return jacParser.RULE_edge_any

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEdge_any" ):
                listener.enterEdge_any(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEdge_any" ):
                listener.exitEdge_any(self)




    def edge_any(self):

        localctx = jacParser.Edge_anyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_edge_any)
        self._la = 0 # Token type
        try:
            self.state = 842
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [jacParser.T__6]:
                self.enterOuterAlt(localctx, 1)
                self.state = 830
                self.match(jacParser.T__6)
                pass
            elif token in [jacParser.T__5]:
                self.enterOuterAlt(localctx, 2)
                self.state = 831
                self.match(jacParser.T__5)
                self.state = 839
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==jacParser.LSQUARE:
                    self.state = 832
                    self.match(jacParser.LSQUARE)
                    self.state = 833
                    self.match(jacParser.NAME)
                    self.state = 836
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,89,self._ctx)
                    if la_ == 1:
                        self.state = 834
                        self.spawn_ctx()

                    elif la_ == 2:
                        self.state = 835
                        self.filter_ctx()


                    self.state = 838
                    self.match(jacParser.RSQUARE)


                self.state = 841
                self.match(jacParser.T__3)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class List_valContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LSQUARE(self):
            return self.getToken(jacParser.LSQUARE, 0)

        def RSQUARE(self):
            return self.getToken(jacParser.RSQUARE, 0)

        def expr_list(self):
            return self.getTypedRuleContext(jacParser.Expr_listContext,0)


        def getRuleIndex(self):
            return jacParser.RULE_list_val

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterList_val" ):
                listener.enterList_val(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitList_val" ):
                listener.exitList_val(self)




    def list_val(self):

        localctx = jacParser.List_valContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_list_val)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 844
            self.match(jacParser.LSQUARE)
            self.state = 846
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << jacParser.T__1) | (1 << jacParser.T__2) | (1 << jacParser.T__4) | (1 << jacParser.T__5) | (1 << jacParser.T__6) | (1 << jacParser.TYP_STRING) | (1 << jacParser.TYP_INT) | (1 << jacParser.TYP_FLOAT) | (1 << jacParser.TYP_LIST) | (1 << jacParser.TYP_DICT) | (1 << jacParser.TYP_BOOL) | (1 << jacParser.KW_TYPE) | (1 << jacParser.KW_NODE) | (1 << jacParser.KW_SPAWN) | (1 << jacParser.DBL_COLON) | (1 << jacParser.LBRACE) | (1 << jacParser.KW_EDGE))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (jacParser.NOT - 65)) | (1 << (jacParser.PLUS - 65)) | (1 << (jacParser.MINUS - 65)) | (1 << (jacParser.STAR_MUL - 65)) | (1 << (jacParser.LPAREN - 65)) | (1 << (jacParser.LSQUARE - 65)) | (1 << (jacParser.FLOAT - 65)) | (1 << (jacParser.STRING - 65)) | (1 << (jacParser.BOOL - 65)) | (1 << (jacParser.INT - 65)) | (1 << (jacParser.NULL - 65)) | (1 << (jacParser.NAME - 65)))) != 0):
                self.state = 845
                self.expr_list()


            self.state = 848
            self.match(jacParser.RSQUARE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Index_sliceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LSQUARE(self):
            return self.getToken(jacParser.LSQUARE, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(jacParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(jacParser.ExpressionContext,i)


        def RSQUARE(self):
            return self.getToken(jacParser.RSQUARE, 0)

        def COLON(self):
            return self.getToken(jacParser.COLON, 0)

        def getRuleIndex(self):
            return jacParser.RULE_index_slice

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndex_slice" ):
                listener.enterIndex_slice(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndex_slice" ):
                listener.exitIndex_slice(self)




    def index_slice(self):

        localctx = jacParser.Index_sliceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_index_slice)
        try:
            self.state = 860
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,93,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 850
                self.match(jacParser.LSQUARE)
                self.state = 851
                self.expression()
                self.state = 852
                self.match(jacParser.RSQUARE)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 854
                self.match(jacParser.LSQUARE)
                self.state = 855
                self.expression()
                self.state = 856
                self.match(jacParser.COLON)
                self.state = 857
                self.expression()
                self.state = 858
                self.match(jacParser.RSQUARE)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dict_valContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(jacParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(jacParser.RBRACE, 0)

        def kv_pair(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(jacParser.Kv_pairContext)
            else:
                return self.getTypedRuleContext(jacParser.Kv_pairContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(jacParser.COMMA)
            else:
                return self.getToken(jacParser.COMMA, i)

        def getRuleIndex(self):
            return jacParser.RULE_dict_val

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDict_val" ):
                listener.enterDict_val(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDict_val" ):
                listener.exitDict_val(self)




    def dict_val(self):

        localctx = jacParser.Dict_valContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_dict_val)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 862
            self.match(jacParser.LBRACE)
            self.state = 871
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==jacParser.STRING:
                self.state = 863
                self.kv_pair()
                self.state = 868
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==jacParser.COMMA:
                    self.state = 864
                    self.match(jacParser.COMMA)
                    self.state = 865
                    self.kv_pair()
                    self.state = 870
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 873
            self.match(jacParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Kv_pairContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING(self):
            return self.getToken(jacParser.STRING, 0)

        def COLON(self):
            return self.getToken(jacParser.COLON, 0)

        def expression(self):
            return self.getTypedRuleContext(jacParser.ExpressionContext,0)


        def getRuleIndex(self):
            return jacParser.RULE_kv_pair

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKv_pair" ):
                listener.enterKv_pair(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKv_pair" ):
                listener.exitKv_pair(self)




    def kv_pair(self):

        localctx = jacParser.Kv_pairContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_kv_pair)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 875
            self.match(jacParser.STRING)
            self.state = 876
            self.match(jacParser.COLON)
            self.state = 877
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SpawnContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_SPAWN(self):
            return self.getToken(jacParser.KW_SPAWN, 0)

        def spawn_object(self):
            return self.getTypedRuleContext(jacParser.Spawn_objectContext,0)


        def expression(self):
            return self.getTypedRuleContext(jacParser.ExpressionContext,0)


        def getRuleIndex(self):
            return jacParser.RULE_spawn

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSpawn" ):
                listener.enterSpawn(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSpawn" ):
                listener.exitSpawn(self)




    def spawn(self):

        localctx = jacParser.SpawnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_spawn)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 879
            self.match(jacParser.KW_SPAWN)
            self.state = 881
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,96,self._ctx)
            if la_ == 1:
                self.state = 880
                self.expression()


            self.state = 883
            self.spawn_object()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Spawn_objectContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def node_spawn(self):
            return self.getTypedRuleContext(jacParser.Node_spawnContext,0)


        def walker_spawn(self):
            return self.getTypedRuleContext(jacParser.Walker_spawnContext,0)


        def graph_spawn(self):
            return self.getTypedRuleContext(jacParser.Graph_spawnContext,0)


        def getRuleIndex(self):
            return jacParser.RULE_spawn_object

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSpawn_object" ):
                listener.enterSpawn_object(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSpawn_object" ):
                listener.exitSpawn_object(self)




    def spawn_object(self):

        localctx = jacParser.Spawn_objectContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_spawn_object)
        try:
            self.state = 888
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,97,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 885
                self.node_spawn()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 886
                self.walker_spawn()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 887
                self.graph_spawn()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Node_spawnContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def node_ref(self):
            return self.getTypedRuleContext(jacParser.Node_refContext,0)


        def edge_ref(self):
            return self.getTypedRuleContext(jacParser.Edge_refContext,0)


        def spawn_ctx(self):
            return self.getTypedRuleContext(jacParser.Spawn_ctxContext,0)


        def getRuleIndex(self):
            return jacParser.RULE_node_spawn

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNode_spawn" ):
                listener.enterNode_spawn(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNode_spawn" ):
                listener.exitNode_spawn(self)




    def node_spawn(self):

        localctx = jacParser.Node_spawnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_node_spawn)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 891
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << jacParser.T__2) | (1 << jacParser.T__4) | (1 << jacParser.T__5) | (1 << jacParser.T__6))) != 0) or _la==jacParser.MINUS:
                self.state = 890
                self.edge_ref()


            self.state = 893
            self.node_ref()
            self.state = 895
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,99,self._ctx)
            if la_ == 1:
                self.state = 894
                self.spawn_ctx()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Graph_spawnContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def edge_ref(self):
            return self.getTypedRuleContext(jacParser.Edge_refContext,0)


        def graph_ref(self):
            return self.getTypedRuleContext(jacParser.Graph_refContext,0)


        def getRuleIndex(self):
            return jacParser.RULE_graph_spawn

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGraph_spawn" ):
                listener.enterGraph_spawn(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGraph_spawn" ):
                listener.exitGraph_spawn(self)




    def graph_spawn(self):

        localctx = jacParser.Graph_spawnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_graph_spawn)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 897
            self.edge_ref()
            self.state = 898
            self.graph_ref()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Walker_spawnContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def walker_ref(self):
            return self.getTypedRuleContext(jacParser.Walker_refContext,0)


        def spawn_ctx(self):
            return self.getTypedRuleContext(jacParser.Spawn_ctxContext,0)


        def getRuleIndex(self):
            return jacParser.RULE_walker_spawn

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWalker_spawn" ):
                listener.enterWalker_spawn(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWalker_spawn" ):
                listener.exitWalker_spawn(self)




    def walker_spawn(self):

        localctx = jacParser.Walker_spawnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_walker_spawn)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 900
            self.walker_ref()
            self.state = 902
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,100,self._ctx)
            if la_ == 1:
                self.state = 901
                self.spawn_ctx()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Spawn_ctxContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(jacParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(jacParser.RPAREN, 0)

        def spawn_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(jacParser.Spawn_assignContext)
            else:
                return self.getTypedRuleContext(jacParser.Spawn_assignContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(jacParser.COMMA)
            else:
                return self.getToken(jacParser.COMMA, i)

        def getRuleIndex(self):
            return jacParser.RULE_spawn_ctx

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSpawn_ctx" ):
                listener.enterSpawn_ctx(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSpawn_ctx" ):
                listener.exitSpawn_ctx(self)




    def spawn_ctx(self):

        localctx = jacParser.Spawn_ctxContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_spawn_ctx)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 904
            self.match(jacParser.LPAREN)
            self.state = 913
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==jacParser.NAME:
                self.state = 905
                self.spawn_assign()
                self.state = 910
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==jacParser.COMMA:
                    self.state = 906
                    self.match(jacParser.COMMA)
                    self.state = 907
                    self.spawn_assign()
                    self.state = 912
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 915
            self.match(jacParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Filter_ctxContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(jacParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(jacParser.RPAREN, 0)

        def filter_compare(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(jacParser.Filter_compareContext)
            else:
                return self.getTypedRuleContext(jacParser.Filter_compareContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(jacParser.COMMA)
            else:
                return self.getToken(jacParser.COMMA, i)

        def getRuleIndex(self):
            return jacParser.RULE_filter_ctx

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFilter_ctx" ):
                listener.enterFilter_ctx(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFilter_ctx" ):
                listener.exitFilter_ctx(self)




    def filter_ctx(self):

        localctx = jacParser.Filter_ctxContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_filter_ctx)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 917
            self.match(jacParser.LPAREN)
            self.state = 926
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==jacParser.NAME:
                self.state = 918
                self.filter_compare()
                self.state = 923
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==jacParser.COMMA:
                    self.state = 919
                    self.match(jacParser.COMMA)
                    self.state = 920
                    self.filter_compare()
                    self.state = 925
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 928
            self.match(jacParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Spawn_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(jacParser.NAME, 0)

        def EQ(self):
            return self.getToken(jacParser.EQ, 0)

        def expression(self):
            return self.getTypedRuleContext(jacParser.ExpressionContext,0)


        def getRuleIndex(self):
            return jacParser.RULE_spawn_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSpawn_assign" ):
                listener.enterSpawn_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSpawn_assign" ):
                listener.exitSpawn_assign(self)




    def spawn_assign(self):

        localctx = jacParser.Spawn_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_spawn_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 930
            self.match(jacParser.NAME)
            self.state = 931
            self.match(jacParser.EQ)
            self.state = 932
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Filter_compareContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(jacParser.NAME, 0)

        def cmp_op(self):
            return self.getTypedRuleContext(jacParser.Cmp_opContext,0)


        def expression(self):
            return self.getTypedRuleContext(jacParser.ExpressionContext,0)


        def getRuleIndex(self):
            return jacParser.RULE_filter_compare

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFilter_compare" ):
                listener.enterFilter_compare(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFilter_compare" ):
                listener.exitFilter_compare(self)




    def filter_compare(self):

        localctx = jacParser.Filter_compareContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_filter_compare)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 934
            self.match(jacParser.NAME)
            self.state = 935
            self.cmp_op()
            self.state = 936
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Any_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TYP_STRING(self):
            return self.getToken(jacParser.TYP_STRING, 0)

        def TYP_INT(self):
            return self.getToken(jacParser.TYP_INT, 0)

        def TYP_FLOAT(self):
            return self.getToken(jacParser.TYP_FLOAT, 0)

        def TYP_LIST(self):
            return self.getToken(jacParser.TYP_LIST, 0)

        def TYP_DICT(self):
            return self.getToken(jacParser.TYP_DICT, 0)

        def TYP_BOOL(self):
            return self.getToken(jacParser.TYP_BOOL, 0)

        def KW_NODE(self):
            return self.getToken(jacParser.KW_NODE, 0)

        def KW_EDGE(self):
            return self.getToken(jacParser.KW_EDGE, 0)

        def KW_TYPE(self):
            return self.getToken(jacParser.KW_TYPE, 0)

        def getRuleIndex(self):
            return jacParser.RULE_any_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAny_type" ):
                listener.enterAny_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAny_type" ):
                listener.exitAny_type(self)




    def any_type(self):

        localctx = jacParser.Any_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_any_type)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 938
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << jacParser.TYP_STRING) | (1 << jacParser.TYP_INT) | (1 << jacParser.TYP_FLOAT) | (1 << jacParser.TYP_LIST) | (1 << jacParser.TYP_DICT) | (1 << jacParser.TYP_BOOL) | (1 << jacParser.KW_TYPE) | (1 << jacParser.KW_NODE) | (1 << jacParser.KW_EDGE))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dot_graphContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(jacParser.LBRACE, 0)

        def dot_stmt_list(self):
            return self.getTypedRuleContext(jacParser.Dot_stmt_listContext,0)


        def RBRACE(self):
            return self.getToken(jacParser.RBRACE, 0)

        def KW_GRAPH(self):
            return self.getToken(jacParser.KW_GRAPH, 0)

        def KW_DIGRAPH(self):
            return self.getToken(jacParser.KW_DIGRAPH, 0)

        def KW_STRICT(self):
            return self.getToken(jacParser.KW_STRICT, 0)

        def dot_id(self):
            return self.getTypedRuleContext(jacParser.Dot_idContext,0)


        def getRuleIndex(self):
            return jacParser.RULE_dot_graph

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDot_graph" ):
                listener.enterDot_graph(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDot_graph" ):
                listener.exitDot_graph(self)




    def dot_graph(self):

        localctx = jacParser.Dot_graphContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_dot_graph)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 941
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==jacParser.KW_STRICT:
                self.state = 940
                self.match(jacParser.KW_STRICT)


            self.state = 943
            _la = self._input.LA(1)
            if not(_la==jacParser.KW_GRAPH or _la==jacParser.KW_DIGRAPH):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 945
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << jacParser.KW_GRAPH) | (1 << jacParser.KW_NODE) | (1 << jacParser.KW_EDGE))) != 0) or ((((_la - 88)) & ~0x3f) == 0 and ((1 << (_la - 88)) & ((1 << (jacParser.FLOAT - 88)) | (1 << (jacParser.STRING - 88)) | (1 << (jacParser.INT - 88)) | (1 << (jacParser.NAME - 88)))) != 0):
                self.state = 944
                self.dot_id()


            self.state = 947
            self.match(jacParser.LBRACE)
            self.state = 948
            self.dot_stmt_list()
            self.state = 949
            self.match(jacParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dot_stmt_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dot_stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(jacParser.Dot_stmtContext)
            else:
                return self.getTypedRuleContext(jacParser.Dot_stmtContext,i)


        def SEMI(self, i:int=None):
            if i is None:
                return self.getTokens(jacParser.SEMI)
            else:
                return self.getToken(jacParser.SEMI, i)

        def getRuleIndex(self):
            return jacParser.RULE_dot_stmt_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDot_stmt_list" ):
                listener.enterDot_stmt_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDot_stmt_list" ):
                listener.exitDot_stmt_list(self)




    def dot_stmt_list(self):

        localctx = jacParser.Dot_stmt_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_dot_stmt_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 957
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << jacParser.KW_GRAPH) | (1 << jacParser.KW_SUBGRAPH) | (1 << jacParser.KW_NODE) | (1 << jacParser.LBRACE) | (1 << jacParser.KW_EDGE))) != 0) or ((((_la - 88)) & ~0x3f) == 0 and ((1 << (_la - 88)) & ((1 << (jacParser.FLOAT - 88)) | (1 << (jacParser.STRING - 88)) | (1 << (jacParser.INT - 88)) | (1 << (jacParser.NAME - 88)))) != 0):
                self.state = 951
                self.dot_stmt()
                self.state = 953
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==jacParser.SEMI:
                    self.state = 952
                    self.match(jacParser.SEMI)


                self.state = 959
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dot_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dot_node_stmt(self):
            return self.getTypedRuleContext(jacParser.Dot_node_stmtContext,0)


        def dot_edge_stmt(self):
            return self.getTypedRuleContext(jacParser.Dot_edge_stmtContext,0)


        def dot_attr_stmt(self):
            return self.getTypedRuleContext(jacParser.Dot_attr_stmtContext,0)


        def dot_id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(jacParser.Dot_idContext)
            else:
                return self.getTypedRuleContext(jacParser.Dot_idContext,i)


        def EQ(self):
            return self.getToken(jacParser.EQ, 0)

        def dot_subgraph(self):
            return self.getTypedRuleContext(jacParser.Dot_subgraphContext,0)


        def getRuleIndex(self):
            return jacParser.RULE_dot_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDot_stmt" ):
                listener.enterDot_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDot_stmt" ):
                listener.exitDot_stmt(self)




    def dot_stmt(self):

        localctx = jacParser.Dot_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_dot_stmt)
        try:
            self.state = 968
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,109,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 960
                self.dot_node_stmt()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 961
                self.dot_edge_stmt()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 962
                self.dot_attr_stmt()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 963
                self.dot_id()
                self.state = 964
                self.match(jacParser.EQ)
                self.state = 965
                self.dot_id()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 967
                self.dot_subgraph()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dot_attr_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dot_attr_list(self):
            return self.getTypedRuleContext(jacParser.Dot_attr_listContext,0)


        def KW_GRAPH(self):
            return self.getToken(jacParser.KW_GRAPH, 0)

        def KW_NODE(self):
            return self.getToken(jacParser.KW_NODE, 0)

        def KW_EDGE(self):
            return self.getToken(jacParser.KW_EDGE, 0)

        def getRuleIndex(self):
            return jacParser.RULE_dot_attr_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDot_attr_stmt" ):
                listener.enterDot_attr_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDot_attr_stmt" ):
                listener.exitDot_attr_stmt(self)




    def dot_attr_stmt(self):

        localctx = jacParser.Dot_attr_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_dot_attr_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 970
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << jacParser.KW_GRAPH) | (1 << jacParser.KW_NODE) | (1 << jacParser.KW_EDGE))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 971
            self.dot_attr_list()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dot_attr_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LSQUARE(self, i:int=None):
            if i is None:
                return self.getTokens(jacParser.LSQUARE)
            else:
                return self.getToken(jacParser.LSQUARE, i)

        def RSQUARE(self, i:int=None):
            if i is None:
                return self.getTokens(jacParser.RSQUARE)
            else:
                return self.getToken(jacParser.RSQUARE, i)

        def dot_a_list(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(jacParser.Dot_a_listContext)
            else:
                return self.getTypedRuleContext(jacParser.Dot_a_listContext,i)


        def getRuleIndex(self):
            return jacParser.RULE_dot_attr_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDot_attr_list" ):
                listener.enterDot_attr_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDot_attr_list" ):
                listener.exitDot_attr_list(self)




    def dot_attr_list(self):

        localctx = jacParser.Dot_attr_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_dot_attr_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 978 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 973
                self.match(jacParser.LSQUARE)
                self.state = 975
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << jacParser.KW_GRAPH) | (1 << jacParser.KW_NODE) | (1 << jacParser.KW_EDGE))) != 0) or ((((_la - 88)) & ~0x3f) == 0 and ((1 << (_la - 88)) & ((1 << (jacParser.FLOAT - 88)) | (1 << (jacParser.STRING - 88)) | (1 << (jacParser.INT - 88)) | (1 << (jacParser.NAME - 88)))) != 0):
                    self.state = 974
                    self.dot_a_list()


                self.state = 977
                self.match(jacParser.RSQUARE)
                self.state = 980 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==jacParser.LSQUARE):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dot_a_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dot_id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(jacParser.Dot_idContext)
            else:
                return self.getTypedRuleContext(jacParser.Dot_idContext,i)


        def EQ(self, i:int=None):
            if i is None:
                return self.getTokens(jacParser.EQ)
            else:
                return self.getToken(jacParser.EQ, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(jacParser.COMMA)
            else:
                return self.getToken(jacParser.COMMA, i)

        def getRuleIndex(self):
            return jacParser.RULE_dot_a_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDot_a_list" ):
                listener.enterDot_a_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDot_a_list" ):
                listener.exitDot_a_list(self)




    def dot_a_list(self):

        localctx = jacParser.Dot_a_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_dot_a_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 990 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 982
                self.dot_id()
                self.state = 985
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==jacParser.EQ:
                    self.state = 983
                    self.match(jacParser.EQ)
                    self.state = 984
                    self.dot_id()


                self.state = 988
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==jacParser.COMMA:
                    self.state = 987
                    self.match(jacParser.COMMA)


                self.state = 992 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << jacParser.KW_GRAPH) | (1 << jacParser.KW_NODE) | (1 << jacParser.KW_EDGE))) != 0) or ((((_la - 88)) & ~0x3f) == 0 and ((1 << (_la - 88)) & ((1 << (jacParser.FLOAT - 88)) | (1 << (jacParser.STRING - 88)) | (1 << (jacParser.INT - 88)) | (1 << (jacParser.NAME - 88)))) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dot_edge_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dot_edgeRHS(self):
            return self.getTypedRuleContext(jacParser.Dot_edgeRHSContext,0)


        def dot_node_id(self):
            return self.getTypedRuleContext(jacParser.Dot_node_idContext,0)


        def dot_subgraph(self):
            return self.getTypedRuleContext(jacParser.Dot_subgraphContext,0)


        def dot_attr_list(self):
            return self.getTypedRuleContext(jacParser.Dot_attr_listContext,0)


        def getRuleIndex(self):
            return jacParser.RULE_dot_edge_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDot_edge_stmt" ):
                listener.enterDot_edge_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDot_edge_stmt" ):
                listener.exitDot_edge_stmt(self)




    def dot_edge_stmt(self):

        localctx = jacParser.Dot_edge_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_dot_edge_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 996
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [jacParser.KW_GRAPH, jacParser.KW_NODE, jacParser.KW_EDGE, jacParser.FLOAT, jacParser.STRING, jacParser.INT, jacParser.NAME]:
                self.state = 994
                self.dot_node_id()
                pass
            elif token in [jacParser.KW_SUBGRAPH, jacParser.LBRACE]:
                self.state = 995
                self.dot_subgraph()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 998
            self.dot_edgeRHS()
            self.state = 1000
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==jacParser.LSQUARE:
                self.state = 999
                self.dot_attr_list()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dot_edgeRHSContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dot_edgeop(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(jacParser.Dot_edgeopContext)
            else:
                return self.getTypedRuleContext(jacParser.Dot_edgeopContext,i)


        def dot_node_id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(jacParser.Dot_node_idContext)
            else:
                return self.getTypedRuleContext(jacParser.Dot_node_idContext,i)


        def dot_subgraph(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(jacParser.Dot_subgraphContext)
            else:
                return self.getTypedRuleContext(jacParser.Dot_subgraphContext,i)


        def getRuleIndex(self):
            return jacParser.RULE_dot_edgeRHS

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDot_edgeRHS" ):
                listener.enterDot_edgeRHS(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDot_edgeRHS" ):
                listener.exitDot_edgeRHS(self)




    def dot_edgeRHS(self):

        localctx = jacParser.Dot_edgeRHSContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_dot_edgeRHS)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1007 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1002
                self.dot_edgeop()
                self.state = 1005
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [jacParser.KW_GRAPH, jacParser.KW_NODE, jacParser.KW_EDGE, jacParser.FLOAT, jacParser.STRING, jacParser.INT, jacParser.NAME]:
                    self.state = 1003
                    self.dot_node_id()
                    pass
                elif token in [jacParser.KW_SUBGRAPH, jacParser.LBRACE]:
                    self.state = 1004
                    self.dot_subgraph()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1009 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==jacParser.T__3 or _la==jacParser.T__7):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dot_edgeopContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return jacParser.RULE_dot_edgeop

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDot_edgeop" ):
                listener.enterDot_edgeop(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDot_edgeop" ):
                listener.exitDot_edgeop(self)




    def dot_edgeop(self):

        localctx = jacParser.Dot_edgeopContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_dot_edgeop)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1011
            _la = self._input.LA(1)
            if not(_la==jacParser.T__3 or _la==jacParser.T__7):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dot_node_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dot_node_id(self):
            return self.getTypedRuleContext(jacParser.Dot_node_idContext,0)


        def dot_attr_list(self):
            return self.getTypedRuleContext(jacParser.Dot_attr_listContext,0)


        def getRuleIndex(self):
            return jacParser.RULE_dot_node_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDot_node_stmt" ):
                listener.enterDot_node_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDot_node_stmt" ):
                listener.exitDot_node_stmt(self)




    def dot_node_stmt(self):

        localctx = jacParser.Dot_node_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_dot_node_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1013
            self.dot_node_id()
            self.state = 1015
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==jacParser.LSQUARE:
                self.state = 1014
                self.dot_attr_list()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dot_node_idContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dot_id(self):
            return self.getTypedRuleContext(jacParser.Dot_idContext,0)


        def dot_port(self):
            return self.getTypedRuleContext(jacParser.Dot_portContext,0)


        def getRuleIndex(self):
            return jacParser.RULE_dot_node_id

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDot_node_id" ):
                listener.enterDot_node_id(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDot_node_id" ):
                listener.exitDot_node_id(self)




    def dot_node_id(self):

        localctx = jacParser.Dot_node_idContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_dot_node_id)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1017
            self.dot_id()
            self.state = 1019
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==jacParser.COLON:
                self.state = 1018
                self.dot_port()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dot_portContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(jacParser.COLON)
            else:
                return self.getToken(jacParser.COLON, i)

        def dot_id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(jacParser.Dot_idContext)
            else:
                return self.getTypedRuleContext(jacParser.Dot_idContext,i)


        def getRuleIndex(self):
            return jacParser.RULE_dot_port

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDot_port" ):
                listener.enterDot_port(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDot_port" ):
                listener.exitDot_port(self)




    def dot_port(self):

        localctx = jacParser.Dot_portContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_dot_port)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1021
            self.match(jacParser.COLON)
            self.state = 1022
            self.dot_id()
            self.state = 1025
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==jacParser.COLON:
                self.state = 1023
                self.match(jacParser.COLON)
                self.state = 1024
                self.dot_id()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dot_subgraphContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(jacParser.LBRACE, 0)

        def dot_stmt_list(self):
            return self.getTypedRuleContext(jacParser.Dot_stmt_listContext,0)


        def RBRACE(self):
            return self.getToken(jacParser.RBRACE, 0)

        def KW_SUBGRAPH(self):
            return self.getToken(jacParser.KW_SUBGRAPH, 0)

        def dot_id(self):
            return self.getTypedRuleContext(jacParser.Dot_idContext,0)


        def getRuleIndex(self):
            return jacParser.RULE_dot_subgraph

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDot_subgraph" ):
                listener.enterDot_subgraph(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDot_subgraph" ):
                listener.exitDot_subgraph(self)




    def dot_subgraph(self):

        localctx = jacParser.Dot_subgraphContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_dot_subgraph)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1031
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==jacParser.KW_SUBGRAPH:
                self.state = 1027
                self.match(jacParser.KW_SUBGRAPH)
                self.state = 1029
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << jacParser.KW_GRAPH) | (1 << jacParser.KW_NODE) | (1 << jacParser.KW_EDGE))) != 0) or ((((_la - 88)) & ~0x3f) == 0 and ((1 << (_la - 88)) & ((1 << (jacParser.FLOAT - 88)) | (1 << (jacParser.STRING - 88)) | (1 << (jacParser.INT - 88)) | (1 << (jacParser.NAME - 88)))) != 0):
                    self.state = 1028
                    self.dot_id()




            self.state = 1033
            self.match(jacParser.LBRACE)
            self.state = 1034
            self.dot_stmt_list()
            self.state = 1035
            self.match(jacParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dot_idContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(jacParser.NAME, 0)

        def STRING(self):
            return self.getToken(jacParser.STRING, 0)

        def INT(self):
            return self.getToken(jacParser.INT, 0)

        def FLOAT(self):
            return self.getToken(jacParser.FLOAT, 0)

        def KW_GRAPH(self):
            return self.getToken(jacParser.KW_GRAPH, 0)

        def KW_NODE(self):
            return self.getToken(jacParser.KW_NODE, 0)

        def KW_EDGE(self):
            return self.getToken(jacParser.KW_EDGE, 0)

        def getRuleIndex(self):
            return jacParser.RULE_dot_id

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDot_id" ):
                listener.enterDot_id(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDot_id" ):
                listener.exitDot_id(self)




    def dot_id(self):

        localctx = jacParser.Dot_idContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_dot_id)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1037
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << jacParser.KW_GRAPH) | (1 << jacParser.KW_NODE) | (1 << jacParser.KW_EDGE))) != 0) or ((((_la - 88)) & ~0x3f) == 0 and ((1 << (_la - 88)) & ((1 << (jacParser.FLOAT - 88)) | (1 << (jacParser.STRING - 88)) | (1 << (jacParser.INT - 88)) | (1 << (jacParser.NAME - 88)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[56] = self.atom_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def atom_sempred(self, localctx:AtomContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 6)
         

            if predIndex == 1:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 2:
                return self.precpred(self._ctx, 4)
         




