# Generated from jac.g4 by ANTLR 4.9.2
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO


def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3b")
        buf.write("\u03cc\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write("\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t")
        buf.write("&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.\t.\4")
        buf.write("/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t\64")
        buf.write("\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t")
        buf.write(";\4<\t<\4=\t=\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\t")
        buf.write("D\4E\tE\4F\tF\4G\tG\4H\tH\4I\tI\4J\tJ\4K\tK\4L\tL\4M\t")
        buf.write("M\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT\4U\tU\4V\t")
        buf.write("V\4W\tW\4X\tX\4Y\tY\4Z\tZ\4[\t[\4\\\t\\\4]\t]\4^\t^\4")
        buf.write("_\t_\4`\t`\4a\ta\4b\tb\3\2\5\2\u00c6\n\2\3\2\6\2\u00c9")
        buf.write("\n\2\r\2\16\2\u00ca\3\2\3\2\3\3\3\3\5\3\u00d1\n\3\3\4")
        buf.write("\3\4\3\4\3\4\5\4\u00d7\n\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4")
        buf.write("\5\4\u00e0\n\4\3\5\3\5\3\5\5\5\u00e5\n\5\3\5\3\5\7\5\u00e9")
        buf.write("\n\5\f\5\16\5\u00ec\13\5\3\5\5\5\u00ef\n\5\3\5\3\5\7\5")
        buf.write("\u00f3\n\5\f\5\16\5\u00f6\13\5\3\5\5\5\u00f9\n\5\3\5\3")
        buf.write("\5\3\6\3\6\3\6\3\6\5\6\u0101\n\6\3\7\3\7\3\7\3\b\3\b\3")
        buf.write("\b\3\b\3\t\3\t\3\t\3\t\3\n\3\n\3\n\3\n\3\13\3\13\7\13")
        buf.write("\u0114\n\13\f\13\16\13\u0117\13\13\3\13\3\13\3\13\3\13")
        buf.write("\5\13\u011d\n\13\3\f\3\f\5\f\u0121\n\f\3\r\3\r\5\r\u0125")
        buf.write("\n\r\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16")
        buf.write("\3\16\3\16\5\16\u0133\n\16\3\17\3\17\3\17\3\17\3\17\3")
        buf.write("\17\3\17\3\17\3\17\3\17\5\17\u013f\n\17\3\20\3\20\3\20")
        buf.write("\3\20\3\20\3\21\3\21\5\21\u0148\n\21\3\21\5\21\u014b\n")
        buf.write("\21\3\21\3\21\3\21\7\21\u0150\n\21\f\21\16\21\u0153\13")
        buf.write("\21\3\21\3\21\3\22\3\22\3\22\3\22\5\22\u015b\n\22\3\23")
        buf.write("\3\23\3\23\3\23\3\23\5\23\u0162\n\23\3\23\3\23\3\23\3")
        buf.write("\23\3\23\5\23\u0169\n\23\7\23\u016b\n\23\f\23\16\23\u016e")
        buf.write("\13\23\3\23\3\23\3\23\3\23\3\23\5\23\u0175\n\23\3\23\5")
        buf.write("\23\u0178\n\23\3\24\3\24\5\24\u017c\n\24\3\24\3\24\3\25")
        buf.write("\3\25\5\25\u0182\n\25\3\25\3\25\3\25\5\25\u0187\n\25\3")
        buf.write("\26\3\26\3\26\7\26\u018c\n\26\f\26\16\26\u018f\13\26\3")
        buf.write("\27\3\27\3\27\7\27\u0194\n\27\f\27\16\27\u0197\13\27\3")
        buf.write("\30\3\30\3\30\7\30\u019c\n\30\f\30\16\30\u019f\13\30\3")
        buf.write("\31\3\31\7\31\u01a3\n\31\f\31\16\31\u01a6\13\31\3\31\3")
        buf.write("\31\3\31\5\31\u01ab\n\31\3\32\3\32\3\32\3\33\3\33\3\33")
        buf.write("\3\33\3\33\3\33\3\33\3\33\3\33\3\33\3\33\3\33\3\33\5\33")
        buf.write("\u01bd\n\33\3\34\3\34\3\34\3\34\7\34\u01c3\n\34\f\34\16")
        buf.write("\34\u01c6\13\34\3\34\5\34\u01c9\n\34\3\35\3\35\3\35\3")
        buf.write("\35\3\36\3\36\3\36\3\37\3\37\3\37\3\37\3\37\3\37\3\37")
        buf.write("\3\37\3\37\3\37\3\37\3\37\3\37\3\37\5\37\u01e0\n\37\3")
        buf.write(" \3 \3 \3 \3!\3!\3\"\3\"\3\"\3\"\3#\3#\3#\3#\3#\5#\u01f1")
        buf.write("\n#\3$\3$\3$\3$\3%\3%\3%\3%\5%\u01fb\n%\3&\3&\3&\3&\3")
        buf.write("\'\3\'\3\'\3\'\5\'\u0205\n\'\3(\3(\3(\3)\3)\3)\3*\3*\3")
        buf.write("*\3+\3+\5+\u0212\n+\3+\3+\3+\5+\u0217\n+\3,\3,\3,\7,\u021c")
        buf.write("\n,\f,\16,\u021f\13,\3-\3-\3-\3-\3-\3-\7-\u0227\n-\f-")
        buf.write("\16-\u022a\13-\5-\u022c\n-\3.\3.\3.\3.\3.\3.\3.\3.\5.")
        buf.write("\u0236\n.\3/\3/\3/\3\60\3\60\3\60\7\60\u023e\n\60\f\60")
        buf.write("\16\60\u0241\13\60\3\61\3\61\3\61\7\61\u0246\n\61\f\61")
        buf.write("\16\61\u0249\13\61\3\62\3\62\3\62\5\62\u024e\n\62\3\63")
        buf.write("\3\63\3\63\7\63\u0253\n\63\f\63\16\63\u0256\13\63\3\64")
        buf.write("\3\64\3\64\5\64\u025b\n\64\3\64\5\64\u025e\n\64\3\64\5")
        buf.write("\64\u0261\n\64\3\64\3\64\3\64\5\64\u0266\n\64\5\64\u0268")
        buf.write("\n\64\3\65\3\65\3\65\3\65\3\65\3\65\3\65\3\65\3\65\3\65")
        buf.write("\3\65\3\65\3\65\3\65\3\65\3\65\3\65\3\65\5\65\u027c\n")
        buf.write("\65\3\65\3\65\3\65\3\65\3\65\3\65\3\65\7\65\u0285\n\65")
        buf.write("\f\65\16\65\u0288\13\65\3\66\3\66\3\66\3\67\3\67\3\67")
        buf.write("\38\38\38\38\38\58\u0295\n8\39\39\3:\3:\3:\3:\3:\5:\u029e")
        buf.write("\n:\3:\3:\3:\3:\3:\5:\u02a5\n:\3:\3:\3:\3:\3:\5:\u02ac")
        buf.write("\n:\5:\u02ae\n:\3;\3;\3<\3<\3<\3<\3<\3<\5<\u02b8\n<\3")
        buf.write("=\3=\3=\3=\3=\3=\3=\5=\u02c1\n=\3>\3>\5>\u02c5\n>\3>\3")
        buf.write(">\3>\5>\u02ca\n>\5>\u02cc\n>\5>\u02ce\n>\3?\3?\3?\3?\3")
        buf.write("@\3@\3@\3@\3A\3A\3A\3A\3B\3B\3B\5B\u02df\nB\3C\3C\3C\3")
        buf.write("C\3C\3C\5C\u02e7\nC\3C\5C\u02ea\nC\3C\5C\u02ed\nC\3D\3")
        buf.write("D\3D\3D\3D\3D\5D\u02f5\nD\3D\5D\u02f8\nD\3D\5D\u02fb\n")
        buf.write("D\3E\3E\3E\3E\3E\3E\5E\u0303\nE\3E\5E\u0306\nE\3E\5E\u0309")
        buf.write("\nE\3F\3F\5F\u030d\nF\3F\3F\3G\3G\3G\3G\3H\3H\3H\3H\3")
        buf.write("H\3H\3I\3I\3I\3I\7I\u031f\nI\fI\16I\u0322\13I\5I\u0324")
        buf.write("\nI\3I\3I\3J\3J\3J\3J\3K\3K\5K\u032e\nK\3K\3K\3L\3L\3")
        buf.write("L\5L\u0335\nL\3M\5M\u0338\nM\3M\3M\5M\u033c\nM\3N\3N\3")
        buf.write("N\3O\3O\5O\u0343\nO\3P\3P\3P\3P\7P\u0349\nP\fP\16P\u034c")
        buf.write("\13P\5P\u034e\nP\3P\3P\3Q\3Q\3Q\3Q\7Q\u0356\nQ\fQ\16Q")
        buf.write("\u0359\13Q\5Q\u035b\nQ\3Q\3Q\3R\3R\3R\3R\3S\3S\3S\3S\3")
        buf.write("T\3T\3U\5U\u036a\nU\3U\3U\5U\u036e\nU\3U\3U\3U\3U\3V\3")
        buf.write("V\5V\u0376\nV\7V\u0378\nV\fV\16V\u037b\13V\3W\3W\3W\3")
        buf.write("W\3W\3W\3W\3W\5W\u0385\nW\3X\3X\3X\3Y\3Y\5Y\u038c\nY\3")
        buf.write("Y\6Y\u038f\nY\rY\16Y\u0390\3Z\3Z\3Z\5Z\u0396\nZ\3Z\5Z")
        buf.write("\u0399\nZ\6Z\u039b\nZ\rZ\16Z\u039c\3[\3[\5[\u03a1\n[\3")
        buf.write("[\3[\5[\u03a5\n[\3\\\3\\\3\\\5\\\u03aa\n\\\6\\\u03ac\n")
        buf.write("\\\r\\\16\\\u03ad\3]\3]\3^\3^\5^\u03b4\n^\3_\3_\5_\u03b8")
        buf.write("\n_\3`\3`\3`\3`\5`\u03be\n`\3a\3a\5a\u03c2\na\5a\u03c4")
        buf.write("\na\3a\3a\3a\3a\3b\3b\3b\2\3hc\2\4\6\b\n\f\16\20\22\24")
        buf.write("\26\30\32\34\36 \"$&(*,.\60\62\64\668:<>@BDFHJLNPRTVX")
        buf.write("Z\\^`bdfhjlnprtvxz|~\u0080\u0082\u0084\u0086\u0088\u008a")
        buf.write("\u008c\u008e\u0090\u0092\u0094\u0096\u0098\u009a\u009c")
        buf.write("\u009e\u00a0\u00a2\u00a4\u00a6\u00a8\u00aa\u00ac\u00ae")
        buf.write("\u00b0\u00b2\u00b4\u00b6\u00b8\u00ba\u00bc\u00be\u00c0")
        buf.write("\u00c2\2\r\4\2\33\34\"\"\4\2:;==\3\2,/\3\2\61\62\3\2N")
        buf.write("O\3\2PR\5\2\13\21\26\26((\4\2\22\22\24\24\5\2\22\22\26")
        buf.write("\26((\4\2\6\6\n\n\b\2\22\22\26\26((XY[[]]\2\u0406\2\u00c5")
        buf.write("\3\2\2\2\4\u00d0\3\2\2\2\6\u00df\3\2\2\2\b\u00e1\3\2\2")
        buf.write("\2\n\u00fc\3\2\2\2\f\u0102\3\2\2\2\16\u0105\3\2\2\2\20")
        buf.write("\u0109\3\2\2\2\22\u010d\3\2\2\2\24\u011c\3\2\2\2\26\u0120")
        buf.write("\3\2\2\2\30\u0124\3\2\2\2\32\u0132\3\2\2\2\34\u013e\3")
        buf.write("\2\2\2\36\u0140\3\2\2\2 \u0145\3\2\2\2\"\u015a\3\2\2\2")
        buf.write("$\u0177\3\2\2\2&\u0179\3\2\2\2(\u017f\3\2\2\2*\u0188\3")
        buf.write("\2\2\2,\u0190\3\2\2\2.\u0198\3\2\2\2\60\u01aa\3\2\2\2")
        buf.write("\62\u01ac\3\2\2\2\64\u01bc\3\2\2\2\66\u01be\3\2\2\28\u01ca")
        buf.write("\3\2\2\2:\u01ce\3\2\2\2<\u01df\3\2\2\2>\u01e1\3\2\2\2")
        buf.write("@\u01e5\3\2\2\2B\u01e7\3\2\2\2D\u01f0\3\2\2\2F\u01f2\3")
        buf.write("\2\2\2H\u01f6\3\2\2\2J\u01fc\3\2\2\2L\u0200\3\2\2\2N\u0206")
        buf.write("\3\2\2\2P\u0209\3\2\2\2R\u020c\3\2\2\2T\u020f\3\2\2\2")
        buf.write("V\u0218\3\2\2\2X\u022b\3\2\2\2Z\u0235\3\2\2\2\\\u0237")
        buf.write("\3\2\2\2^\u023a\3\2\2\2`\u0242\3\2\2\2b\u024d\3\2\2\2")
        buf.write("d\u024f\3\2\2\2f\u0267\3\2\2\2h\u027b\3\2\2\2j\u0289\3")
        buf.write("\2\2\2l\u028c\3\2\2\2n\u0294\3\2\2\2p\u0296\3\2\2\2r\u02ad")
        buf.write("\3\2\2\2t\u02af\3\2\2\2v\u02b7\3\2\2\2x\u02b9\3\2\2\2")
        buf.write("z\u02cd\3\2\2\2|\u02cf\3\2\2\2~\u02d3\3\2\2\2\u0080\u02d7")
        buf.write("\3\2\2\2\u0082\u02de\3\2\2\2\u0084\u02ec\3\2\2\2\u0086")
        buf.write("\u02fa\3\2\2\2\u0088\u0308\3\2\2\2\u008a\u030a\3\2\2\2")
        buf.write("\u008c\u0310\3\2\2\2\u008e\u0314\3\2\2\2\u0090\u031a\3")
        buf.write("\2\2\2\u0092\u0327\3\2\2\2\u0094\u032b\3\2\2\2\u0096\u0334")
        buf.write("\3\2\2\2\u0098\u0337\3\2\2\2\u009a\u033d\3\2\2\2\u009c")
        buf.write("\u0340\3\2\2\2\u009e\u0344\3\2\2\2\u00a0\u0351\3\2\2\2")
        buf.write("\u00a2\u035e\3\2\2\2\u00a4\u0362\3\2\2\2\u00a6\u0366\3")
        buf.write("\2\2\2\u00a8\u0369\3\2\2\2\u00aa\u0379\3\2\2\2\u00ac\u0384")
        buf.write("\3\2\2\2\u00ae\u0386\3\2\2\2\u00b0\u038e\3\2\2\2\u00b2")
        buf.write("\u039a\3\2\2\2\u00b4\u03a0\3\2\2\2\u00b6\u03ab\3\2\2\2")
        buf.write("\u00b8\u03af\3\2\2\2\u00ba\u03b1\3\2\2\2\u00bc\u03b5\3")
        buf.write("\2\2\2\u00be\u03b9\3\2\2\2\u00c0\u03c3\3\2\2\2\u00c2\u03c9")
        buf.write("\3\2\2\2\u00c4\u00c6\5\n\6\2\u00c5\u00c4\3\2\2\2\u00c5")
        buf.write("\u00c6\3\2\2\2\u00c6\u00c8\3\2\2\2\u00c7\u00c9\5\4\3\2")
        buf.write("\u00c8\u00c7\3\2\2\2\u00c9\u00ca\3\2\2\2\u00ca\u00c8\3")
        buf.write("\2\2\2\u00ca\u00cb\3\2\2\2\u00cb\u00cc\3\2\2\2\u00cc\u00cd")
        buf.write("\7\2\2\3\u00cd\3\3\2\2\2\u00ce\u00d1\5\6\4\2\u00cf\u00d1")
        buf.write("\5\b\5\2\u00d0\u00ce\3\2\2\2\u00d0\u00cf\3\2\2\2\u00d1")
        buf.write("\5\3\2\2\2\u00d2\u00d3\7\26\2\2\u00d3\u00d6\7]\2\2\u00d4")
        buf.write("\u00d5\7#\2\2\u00d5\u00d7\7[\2\2\u00d6\u00d4\3\2\2\2\u00d6")
        buf.write("\u00d7\3\2\2\2\u00d7\u00d8\3\2\2\2\u00d8\u00e0\5\24\13")
        buf.write("\2\u00d9\u00da\7(\2\2\u00da\u00db\7]\2\2\u00db\u00e0\5")
        buf.write("\24\13\2\u00dc\u00dd\7\22\2\2\u00dd\u00de\7]\2\2\u00de")
        buf.write("\u00e0\5\30\r\2\u00df\u00d2\3\2\2\2\u00df\u00d9\3\2\2")
        buf.write("\2\u00df\u00dc\3\2\2\2\u00e0\7\3\2\2\2\u00e1\u00e2\7)")
        buf.write("\2\2\u00e2\u00e4\7]\2\2\u00e3\u00e5\5\f\7\2\u00e4\u00e3")
        buf.write("\3\2\2\2\u00e4\u00e5\3\2\2\2\u00e5\u00e6\3\2\2\2\u00e6")
        buf.write("\u00ea\7&\2\2\u00e7\u00e9\5\26\f\2\u00e8\u00e7\3\2\2\2")
        buf.write("\u00e9\u00ec\3\2\2\2\u00ea\u00e8\3\2\2\2\u00ea\u00eb\3")
        buf.write("\2\2\2\u00eb\u00ee\3\2\2\2\u00ec\u00ea\3\2\2\2\u00ed\u00ef")
        buf.write("\5\16\b\2\u00ee\u00ed\3\2\2\2\u00ee\u00ef\3\2\2\2\u00ef")
        buf.write("\u00f4\3\2\2\2\u00f0\u00f3\5\64\33\2\u00f1\u00f3\5\22")
        buf.write("\n\2\u00f2\u00f0\3\2\2\2\u00f2\u00f1\3\2\2\2\u00f3\u00f6")
        buf.write("\3\2\2\2\u00f4\u00f2\3\2\2\2\u00f4\u00f5\3\2\2\2\u00f5")
        buf.write("\u00f8\3\2\2\2\u00f6\u00f4\3\2\2\2\u00f7\u00f9\5\20\t")
        buf.write("\2\u00f8\u00f7\3\2\2\2\u00f8\u00f9\3\2\2\2\u00f9\u00fa")
        buf.write("\3\2\2\2\u00fa\u00fb\7\'\2\2\u00fb\t\3\2\2\2\u00fc\u00fd")
        buf.write("\7\3\2\2\u00fd\u00fe\7#\2\2\u00fe\u0100\7Y\2\2\u00ff\u0101")
        buf.write("\7*\2\2\u0100\u00ff\3\2\2\2\u0100\u0101\3\2\2\2\u0101")
        buf.write("\13\3\2\2\2\u0102\u0103\7#\2\2\u0103\u0104\5,\27\2\u0104")
        buf.write("\r\3\2\2\2\u0105\u0106\7\32\2\2\u0106\u0107\7\33\2\2\u0107")
        buf.write("\u0108\5\60\31\2\u0108\17\3\2\2\2\u0109\u010a\7\32\2\2")
        buf.write("\u010a\u010b\7\34\2\2\u010b\u010c\5\60\31\2\u010c\21\3")
        buf.write("\2\2\2\u010d\u010e\7\32\2\2\u010e\u010f\7\"\2\2\u010f")
        buf.write("\u0110\5\60\31\2\u0110\23\3\2\2\2\u0111\u0115\7&\2\2\u0112")
        buf.write("\u0114\5\26\f\2\u0113\u0112\3\2\2\2\u0114\u0117\3\2\2")
        buf.write("\2\u0115\u0113\3\2\2\2\u0115\u0116\3\2\2\2\u0116\u0118")
        buf.write("\3\2\2\2\u0117\u0115\3\2\2\2\u0118\u011d\7\'\2\2\u0119")
        buf.write("\u011a\7#\2\2\u011a\u011d\5\26\f\2\u011b\u011d\7*\2\2")
        buf.write("\u011c\u0111\3\2\2\2\u011c\u0119\3\2\2\2\u011c\u011b\3")
        buf.write("\2\2\2\u011d\25\3\2\2\2\u011e\u0121\5 \21\2\u011f\u0121")
        buf.write("\5$\23\2\u0120\u011e\3\2\2\2\u0120\u011f\3\2\2\2\u0121")
        buf.write("\27\3\2\2\2\u0122\u0125\5\32\16\2\u0123\u0125\5\34\17")
        buf.write("\2\u0124\u0122\3\2\2\2\u0124\u0123\3\2\2\2\u0125\31\3")
        buf.write("\2\2\2\u0126\u0127\7&\2\2\u0127\u0128\5\36\20\2\u0128")
        buf.write("\u0129\7\31\2\2\u0129\u012a\5\60\31\2\u012a\u012b\7\'")
        buf.write("\2\2\u012b\u0133\3\2\2\2\u012c\u012d\7#\2\2\u012d\u012e")
        buf.write("\5\36\20\2\u012e\u012f\7\31\2\2\u012f\u0130\5\60\31\2")
        buf.write("\u0130\u0131\7*\2\2\u0131\u0133\3\2\2\2\u0132\u0126\3")
        buf.write("\2\2\2\u0132\u012c\3\2\2\2\u0133\33\3\2\2\2\u0134\u0135")
        buf.write("\7&\2\2\u0135\u0136\5\36\20\2\u0136\u0137\5\u00a8U\2\u0137")
        buf.write("\u0138\7\'\2\2\u0138\u013f\3\2\2\2\u0139\u013a\7#\2\2")
        buf.write("\u013a\u013b\5\36\20\2\u013b\u013c\5\u00a8U\2\u013c\u013d")
        buf.write("\7*\2\2\u013d\u013f\3\2\2\2\u013e\u0134\3\2\2\2\u013e")
        buf.write("\u0139\3\2\2\2\u013f\35\3\2\2\2\u0140\u0141\7J\2\2\u0141")
        buf.write("\u0142\7I\2\2\u0142\u0143\7]\2\2\u0143\u0144\7*\2\2\u0144")
        buf.write("\37\3\2\2\2\u0145\u0147\7J\2\2\u0146\u0148\7K\2\2\u0147")
        buf.write("\u0146\3\2\2\2\u0147\u0148\3\2\2\2\u0148\u014a\3\2\2\2")
        buf.write("\u0149\u014b\7I\2\2\u014a\u0149\3\2\2\2\u014a\u014b\3")
        buf.write("\2\2\2\u014b\u014c\3\2\2\2\u014c\u0151\5\"\22\2\u014d")
        buf.write("\u014e\7L\2\2\u014e\u0150\5\"\22\2\u014f\u014d\3\2\2\2")
        buf.write("\u0150\u0153\3\2\2\2\u0151\u014f\3\2\2\2\u0151\u0152\3")
        buf.write("\2\2\2\u0152\u0154\3\2\2\2\u0153\u0151\3\2\2\2\u0154\u0155")
        buf.write("\7*\2\2\u0155!\3\2\2\2\u0156\u015b\7]\2\2\u0157\u0158")
        buf.write("\7]\2\2\u0158\u0159\7+\2\2\u0159\u015b\5L\'\2\u015a\u0156")
        buf.write("\3\2\2\2\u015a\u0157\3\2\2\2\u015b#\3\2\2\2\u015c\u015d")
        buf.write("\7M\2\2\u015d\u0161\5*\26\2\u015e\u015f\5(\25\2\u015f")
        buf.write("\u0160\5&\24\2\u0160\u0162\3\2\2\2\u0161\u015e\3\2\2\2")
        buf.write("\u0161\u0162\3\2\2\2\u0162\u016c\3\2\2\2\u0163\u0164\7")
        buf.write("L\2\2\u0164\u0168\5*\26\2\u0165\u0166\5(\25\2\u0166\u0167")
        buf.write("\5&\24\2\u0167\u0169\3\2\2\2\u0168\u0165\3\2\2\2\u0168")
        buf.write("\u0169\3\2\2\2\u0169\u016b\3\2\2\2\u016a\u0163\3\2\2\2")
        buf.write("\u016b\u016e\3\2\2\2\u016c\u016a\3\2\2\2\u016c\u016d\3")
        buf.write("\2\2\2\u016d\u016f\3\2\2\2\u016e\u016c\3\2\2\2\u016f\u0170")
        buf.write("\7*\2\2\u0170\u0178\3\2\2\2\u0171\u0172\7M\2\2\u0172\u0174")
        buf.write("\7]\2\2\u0173\u0175\5&\24\2\u0174\u0173\3\2\2\2\u0174")
        buf.write("\u0175\3\2\2\2\u0175\u0176\3\2\2\2\u0176\u0178\5\60\31")
        buf.write("\2\u0177\u015c\3\2\2\2\u0177\u0171\3\2\2\2\u0178%\3\2")
        buf.write("\2\2\u0179\u017b\7\32\2\2\u017a\u017c\5,\27\2\u017b\u017a")
        buf.write("\3\2\2\2\u017b\u017c\3\2\2\2\u017c\u017d\3\2\2\2\u017d")
        buf.write("\u017e\t\2\2\2\u017e\'\3\2\2\2\u017f\u0181\7$\2\2\u0180")
        buf.write("\u0182\5.\30\2\u0181\u0180\3\2\2\2\u0181\u0182\3\2\2\2")
        buf.write("\u0182\u0186\3\2\2\2\u0183\u0187\7$\2\2\u0184\u0185\7")
        buf.write("%\2\2\u0185\u0187\5L\'\2\u0186\u0183\3\2\2\2\u0186\u0184")
        buf.write("\3\2\2\2\u0187)\3\2\2\2\u0188\u018d\7]\2\2\u0189\u018a")
        buf.write("\7@\2\2\u018a\u018c\7]\2\2\u018b\u0189\3\2\2\2\u018c\u018f")
        buf.write("\3\2\2\2\u018d\u018b\3\2\2\2\u018d\u018e\3\2\2\2\u018e")
        buf.write("+\3\2\2\2\u018f\u018d\3\2\2\2\u0190\u0195\7]\2\2\u0191")
        buf.write("\u0192\7L\2\2\u0192\u0194\7]\2\2\u0193\u0191\3\2\2\2\u0194")
        buf.write("\u0197\3\2\2\2\u0195\u0193\3\2\2\2\u0195\u0196\3\2\2\2")
        buf.write("\u0196-\3\2\2\2\u0197\u0195\3\2\2\2\u0198\u019d\5L\'\2")
        buf.write("\u0199\u019a\7L\2\2\u019a\u019c\5L\'\2\u019b\u0199\3\2")
        buf.write("\2\2\u019c\u019f\3\2\2\2\u019d\u019b\3\2\2\2\u019d\u019e")
        buf.write("\3\2\2\2\u019e/\3\2\2\2\u019f\u019d\3\2\2\2\u01a0\u01a4")
        buf.write("\7&\2\2\u01a1\u01a3\5\64\33\2\u01a2\u01a1\3\2\2\2\u01a3")
        buf.write("\u01a6\3\2\2\2\u01a4\u01a2\3\2\2\2\u01a4\u01a5\3\2\2\2")
        buf.write("\u01a5\u01a7\3\2\2\2\u01a6\u01a4\3\2\2\2\u01a7\u01ab\7")
        buf.write("\'\2\2\u01a8\u01a9\7#\2\2\u01a9\u01ab\5\64\33\2\u01aa")
        buf.write("\u01a0\3\2\2\2\u01aa\u01a8\3\2\2\2\u01ab\61\3\2\2\2\u01ac")
        buf.write("\u01ad\5,\27\2\u01ad\u01ae\5\60\31\2\u01ae\63\3\2\2\2")
        buf.write("\u01af\u01bd\5\60\31\2\u01b0\u01bd\5\62\32\2\u01b1\u01b2")
        buf.write("\5L\'\2\u01b2\u01b3\7*\2\2\u01b3\u01bd\3\2\2\2\u01b4\u01bd")
        buf.write("\5\66\34\2\u01b5\u01bd\5<\37\2\u01b6\u01bd\5> \2\u01b7")
        buf.write("\u01b8\5@!\2\u01b8\u01b9\7*\2\2\u01b9\u01bd\3\2\2\2\u01ba")
        buf.write("\u01bd\5B\"\2\u01bb\u01bd\5D#\2\u01bc\u01af\3\2\2\2\u01bc")
        buf.write("\u01b0\3\2\2\2\u01bc\u01b1\3\2\2\2\u01bc\u01b4\3\2\2\2")
        buf.write("\u01bc\u01b5\3\2\2\2\u01bc\u01b6\3\2\2\2\u01bc\u01b7\3")
        buf.write("\2\2\2\u01bc\u01ba\3\2\2\2\u01bc\u01bb\3\2\2\2\u01bd\65")
        buf.write("\3\2\2\2\u01be\u01bf\7\63\2\2\u01bf\u01c0\5L\'\2\u01c0")
        buf.write("\u01c4\5\60\31\2\u01c1\u01c3\58\35\2\u01c2\u01c1\3\2\2")
        buf.write("\2\u01c3\u01c6\3\2\2\2\u01c4\u01c2\3\2\2\2\u01c4\u01c5")
        buf.write("\3\2\2\2\u01c5\u01c8\3\2\2\2\u01c6\u01c4\3\2\2\2\u01c7")
        buf.write("\u01c9\5:\36\2\u01c8\u01c7\3\2\2\2\u01c8\u01c9\3\2\2\2")
        buf.write("\u01c9\67\3\2\2\2\u01ca\u01cb\7\64\2\2\u01cb\u01cc\5L")
        buf.write("\'\2\u01cc\u01cd\5\60\31\2\u01cd9\3\2\2\2\u01ce\u01cf")
        buf.write("\7\65\2\2\u01cf\u01d0\5\60\31\2\u01d0;\3\2\2\2\u01d1\u01d2")
        buf.write("\7\66\2\2\u01d2\u01d3\5L\'\2\u01d3\u01d4\7\67\2\2\u01d4")
        buf.write("\u01d5\5L\'\2\u01d5\u01d6\78\2\2\u01d6\u01d7\5L\'\2\u01d7")
        buf.write("\u01d8\5\60\31\2\u01d8\u01e0\3\2\2\2\u01d9\u01da\7\66")
        buf.write("\2\2\u01da\u01db\7]\2\2\u01db\u01dc\7H\2\2\u01dc\u01dd")
        buf.write("\5L\'\2\u01dd\u01de\5\60\31\2\u01de\u01e0\3\2\2\2\u01df")
        buf.write("\u01d1\3\2\2\2\u01df\u01d9\3\2\2\2\u01e0=\3\2\2\2\u01e1")
        buf.write("\u01e2\79\2\2\u01e2\u01e3\5L\'\2\u01e3\u01e4\5\60\31\2")
        buf.write("\u01e4?\3\2\2\2\u01e5\u01e6\t\3\2\2\u01e6A\3\2\2\2\u01e7")
        buf.write("\u01e8\7>\2\2\u01e8\u01e9\5L\'\2\u01e9\u01ea\7*\2\2\u01ea")
        buf.write("C\3\2\2\2\u01eb\u01f1\5F$\2\u01ec\u01f1\5H%\2\u01ed\u01f1")
        buf.write("\5J&\2\u01ee\u01ef\7<\2\2\u01ef\u01f1\7*\2\2\u01f0\u01eb")
        buf.write("\3\2\2\2\u01f0\u01ec\3\2\2\2\u01f0\u01ed\3\2\2\2\u01f0")
        buf.write("\u01ee\3\2\2\2\u01f1E\3\2\2\2\u01f2\u01f3\7\27\2\2\u01f3")
        buf.write("\u01f4\5L\'\2\u01f4\u01f5\7*\2\2\u01f5G\3\2\2\2\u01f6")
        buf.write("\u01f7\7\30\2\2\u01f7\u01fa\5L\'\2\u01f8\u01fb\7*\2\2")
        buf.write("\u01f9\u01fb\5:\36\2\u01fa\u01f8\3\2\2\2\u01fa\u01f9\3")
        buf.write("\2\2\2\u01fbI\3\2\2\2\u01fc\u01fd\7?\2\2\u01fd\u01fe\5")
        buf.write("L\'\2\u01fe\u01ff\7*\2\2\u01ffK\3\2\2\2\u0200\u0204\5")
        buf.write("T+\2\u0201\u0205\5N(\2\u0202\u0205\5P)\2\u0203\u0205\5")
        buf.write("R*\2\u0204\u0201\3\2\2\2\u0204\u0202\3\2\2\2\u0204\u0203")
        buf.write("\3\2\2\2\u0204\u0205\3\2\2\2\u0205M\3\2\2\2\u0206\u0207")
        buf.write("\7+\2\2\u0207\u0208\5L\'\2\u0208O\3\2\2\2\u0209\u020a")
        buf.write("\7\60\2\2\u020a\u020b\5L\'\2\u020bQ\3\2\2\2\u020c\u020d")
        buf.write("\t\4\2\2\u020d\u020e\5L\'\2\u020eS\3\2\2\2\u020f\u0216")
        buf.write("\5V,\2\u0210\u0212\7A\2\2\u0211\u0210\3\2\2\2\u0211\u0212")
        buf.write("\3\2\2\2\u0212\u0213\3\2\2\2\u0213\u0214\5\u0082B\2\u0214")
        buf.write("\u0215\5L\'\2\u0215\u0217\3\2\2\2\u0216\u0211\3\2\2\2")
        buf.write("\u0216\u0217\3\2\2\2\u0217U\3\2\2\2\u0218\u021d\5X-\2")
        buf.write("\u0219\u021a\t\5\2\2\u021a\u021c\5X-\2\u021b\u0219\3\2")
        buf.write("\2\2\u021c\u021f\3\2\2\2\u021d\u021b\3\2\2\2\u021d\u021e")
        buf.write("\3\2\2\2\u021eW\3\2\2\2\u021f\u021d\3\2\2\2\u0220\u0221")
        buf.write("\7A\2\2\u0221\u022c\5X-\2\u0222\u0228\5^\60\2\u0223\u0224")
        buf.write("\5Z.\2\u0224\u0225\5^\60\2\u0225\u0227\3\2\2\2\u0226\u0223")
        buf.write("\3\2\2\2\u0227\u022a\3\2\2\2\u0228\u0226\3\2\2\2\u0228")
        buf.write("\u0229\3\2\2\2\u0229\u022c\3\2\2\2\u022a\u0228\3\2\2\2")
        buf.write("\u022b\u0220\3\2\2\2\u022b\u0222\3\2\2\2\u022cY\3\2\2")
        buf.write("\2\u022d\u0236\7B\2\2\u022e\u0236\7C\2\2\u022f\u0236\7")
        buf.write("D\2\2\u0230\u0236\7E\2\2\u0231\u0236\7F\2\2\u0232\u0236")
        buf.write("\7G\2\2\u0233\u0236\7H\2\2\u0234\u0236\5\\/\2\u0235\u022d")
        buf.write("\3\2\2\2\u0235\u022e\3\2\2\2\u0235\u022f\3\2\2\2\u0235")
        buf.write("\u0230\3\2\2\2\u0235\u0231\3\2\2\2\u0235\u0232\3\2\2\2")
        buf.write("\u0235\u0233\3\2\2\2\u0235\u0234\3\2\2\2\u0236[\3\2\2")
        buf.write("\2\u0237\u0238\7A\2\2\u0238\u0239\7H\2\2\u0239]\3\2\2")
        buf.write("\2\u023a\u023f\5`\61\2\u023b\u023c\t\6\2\2\u023c\u023e")
        buf.write("\5`\61\2\u023d\u023b\3\2\2\2\u023e\u0241\3\2\2\2\u023f")
        buf.write("\u023d\3\2\2\2\u023f\u0240\3\2\2\2\u0240_\3\2\2\2\u0241")
        buf.write("\u023f\3\2\2\2\u0242\u0247\5b\62\2\u0243\u0244\t\7\2\2")
        buf.write("\u0244\u0246\5b\62\2\u0245\u0243\3\2\2\2\u0246\u0249\3")
        buf.write("\2\2\2\u0247\u0245\3\2\2\2\u0247\u0248\3\2\2\2\u0248a")
        buf.write("\3\2\2\2\u0249\u0247\3\2\2\2\u024a\u024b\t\6\2\2\u024b")
        buf.write("\u024e\5b\62\2\u024c\u024e\5d\63\2\u024d\u024a\3\2\2\2")
        buf.write("\u024d\u024c\3\2\2\2\u024ec\3\2\2\2\u024f\u0254\5f\64")
        buf.write("\2\u0250\u0251\7S\2\2\u0251\u0253\5b\62\2\u0252\u0250")
        buf.write("\3\2\2\2\u0253\u0256\3\2\2\2\u0254\u0252\3\2\2\2\u0254")
        buf.write("\u0255\3\2\2\2\u0255e\3\2\2\2\u0256\u0254\3\2\2\2\u0257")
        buf.write("\u025d\5h\65\2\u0258\u025a\7T\2\2\u0259\u025b\5.\30\2")
        buf.write("\u025a\u0259\3\2\2\2\u025a\u025b\3\2\2\2\u025b\u025c\3")
        buf.write("\2\2\2\u025c\u025e\7U\2\2\u025d\u0258\3\2\2\2\u025d\u025e")
        buf.write("\3\2\2\2\u025e\u0268\3\2\2\2\u025f\u0261\5h\65\2\u0260")
        buf.write("\u025f\3\2\2\2\u0260\u0261\3\2\2\2\u0261\u0262\3\2\2\2")
        buf.write("\u0262\u0263\7$\2\2\u0263\u0265\7]\2\2\u0264\u0266\5\u009e")
        buf.write("P\2\u0265\u0264\3\2\2\2\u0265\u0266\3\2\2\2\u0266\u0268")
        buf.write("\3\2\2\2\u0267\u0257\3\2\2\2\u0267\u0260\3\2\2\2\u0268")
        buf.write("g\3\2\2\2\u0269\u026a\b\65\1\2\u026a\u027c\7[\2\2\u026b")
        buf.write("\u027c\7X\2\2\u026c\u027c\7Y\2\2\u026d\u027c\7Z\2\2\u026e")
        buf.write("\u027c\7\\\2\2\u026f\u027c\5z>\2\u0270\u027c\5\u008aF")
        buf.write("\2\u0271\u027c\5\u0090I\2\u0272\u027c\5*\26\2\u0273\u0274")
        buf.write("\7T\2\2\u0274\u0275\5L\'\2\u0275\u0276\7U\2\2\u0276\u027c")
        buf.write("\3\2\2\2\u0277\u027c\5\u0094K\2\u0278\u027c\5j\66\2\u0279")
        buf.write("\u027c\5l\67\2\u027a\u027c\5\u00a6T\2\u027b\u0269\3\2")
        buf.write("\2\2\u027b\u026b\3\2\2\2\u027b\u026c\3\2\2\2\u027b\u026d")
        buf.write("\3\2\2\2\u027b\u026e\3\2\2\2\u027b\u026f\3\2\2\2\u027b")
        buf.write("\u0270\3\2\2\2\u027b\u0271\3\2\2\2\u027b\u0272\3\2\2\2")
        buf.write("\u027b\u0273\3\2\2\2\u027b\u0277\3\2\2\2\u027b\u0278\3")
        buf.write("\2\2\2\u027b\u0279\3\2\2\2\u027b\u027a\3\2\2\2\u027c\u0286")
        buf.write("\3\2\2\2\u027d\u027e\f\b\2\2\u027e\u027f\7@\2\2\u027f")
        buf.write("\u0285\5n8\2\u0280\u0281\f\7\2\2\u0281\u0285\5\u008cG")
        buf.write("\2\u0282\u0283\f\6\2\2\u0283\u0285\5\u008eH\2\u0284\u027d")
        buf.write("\3\2\2\2\u0284\u0280\3\2\2\2\u0284\u0282\3\2\2\2\u0285")
        buf.write("\u0288\3\2\2\2\u0286\u0284\3\2\2\2\u0286\u0287\3\2\2\2")
        buf.write("\u0287i\3\2\2\2\u0288\u0286\3\2\2\2\u0289\u028a\7\4\2")
        buf.write("\2\u028a\u028b\5L\'\2\u028bk\3\2\2\2\u028c\u028d\7P\2")
        buf.write("\2\u028d\u028e\5L\'\2\u028em\3\2\2\2\u028f\u0295\5p9\2")
        buf.write("\u0290\u0295\5r:\2\u0291\u0295\5t;\2\u0292\u0295\5v<\2")
        buf.write("\u0293\u0295\5x=\2\u0294\u028f\3\2\2\2\u0294\u0290\3\2")
        buf.write("\2\2\u0294\u0291\3\2\2\2\u0294\u0292\3\2\2\2\u0294\u0293")
        buf.write("\3\2\2\2\u0295o\3\2\2\2\u0296\u0297\5\u00a6T\2\u0297q")
        buf.write("\3\2\2\2\u0298\u029d\7\37\2\2\u0299\u029a\7#\2\2\u029a")
        buf.write("\u029b\5,\27\2\u029b\u029c\7#\2\2\u029c\u029e\3\2\2\2")
        buf.write("\u029d\u0299\3\2\2\2\u029d\u029e\3\2\2\2\u029e\u02ae\3")
        buf.write("\2\2\2\u029f\u02a4\7 \2\2\u02a0\u02a1\7#\2\2\u02a1\u02a2")
        buf.write("\5,\27\2\u02a2\u02a3\7#\2\2\u02a3\u02a5\3\2\2\2\u02a4")
        buf.write("\u02a0\3\2\2\2\u02a4\u02a5\3\2\2\2\u02a5\u02ae\3\2\2\2")
        buf.write("\u02a6\u02ab\7!\2\2\u02a7\u02a8\7#\2\2\u02a8\u02a9\5,")
        buf.write("\27\2\u02a9\u02aa\7#\2\2\u02aa\u02ac\3\2\2\2\u02ab\u02a7")
        buf.write("\3\2\2\2\u02ab\u02ac\3\2\2\2\u02ac\u02ae\3\2\2\2\u02ad")
        buf.write("\u0298\3\2\2\2\u02ad\u029f\3\2\2\2\u02ad\u02a6\3\2\2\2")
        buf.write("\u02aes\3\2\2\2\u02af\u02b0\7\36\2\2\u02b0u\3\2\2\2\u02b1")
        buf.write("\u02b8\7\35\2\2\u02b2\u02b3\7?\2\2\u02b3\u02b4\7#\2\2")
        buf.write("\u02b4\u02b5\5L\'\2\u02b5\u02b6\7#\2\2\u02b6\u02b8\3\2")
        buf.write("\2\2\u02b7\u02b1\3\2\2\2\u02b7\u02b2\3\2\2\2\u02b8w\3")
        buf.write("\2\2\2\u02b9\u02ba\7\13\2\2\u02ba\u02bb\7@\2\2\u02bb\u02c0")
        buf.write("\7]\2\2\u02bc\u02bd\7T\2\2\u02bd\u02be\5.\30\2\u02be\u02bf")
        buf.write("\7U\2\2\u02bf\u02c1\3\2\2\2\u02c0\u02bc\3\2\2\2\u02c0")
        buf.write("\u02c1\3\2\2\2\u02c1y\3\2\2\2\u02c2\u02c4\5|?\2\u02c3")
        buf.write("\u02c5\5\u00a0Q\2\u02c4\u02c3\3\2\2\2\u02c4\u02c5\3\2")
        buf.write("\2\2\u02c5\u02ce\3\2\2\2\u02c6\u02cb\5\u0082B\2\u02c7")
        buf.write("\u02c9\5|?\2\u02c8\u02ca\5\u00a0Q\2\u02c9\u02c8\3\2\2")
        buf.write("\2\u02c9\u02ca\3\2\2\2\u02ca\u02cc\3\2\2\2\u02cb\u02c7")
        buf.write("\3\2\2\2\u02cb\u02cc\3\2\2\2\u02cc\u02ce\3\2\2\2\u02cd")
        buf.write("\u02c2\3\2\2\2\u02cd\u02c6\3\2\2\2\u02ce{\3\2\2\2\u02cf")
        buf.write("\u02d0\7\26\2\2\u02d0\u02d1\7$\2\2\u02d1\u02d2\7]\2\2")
        buf.write("\u02d2}\3\2\2\2\u02d3\u02d4\7)\2\2\u02d4\u02d5\7$\2\2")
        buf.write("\u02d5\u02d6\7]\2\2\u02d6\177\3\2\2\2\u02d7\u02d8\7\22")
        buf.write("\2\2\u02d8\u02d9\7$\2\2\u02d9\u02da\7]\2\2\u02da\u0081")
        buf.write("\3\2\2\2\u02db\u02df\5\u0084C\2\u02dc\u02df\5\u0086D\2")
        buf.write("\u02dd\u02df\5\u0088E\2\u02de\u02db\3\2\2\2\u02de\u02dc")
        buf.write("\3\2\2\2\u02de\u02dd\3\2\2\2\u02df\u0083\3\2\2\2\u02e0")
        buf.write("\u02ed\7\5\2\2\u02e1\u02e9\7O\2\2\u02e2\u02e3\7V\2\2\u02e3")
        buf.write("\u02e6\7]\2\2\u02e4\u02e7\5\u009eP\2\u02e5\u02e7\5\u00a0")
        buf.write("Q\2\u02e6\u02e4\3\2\2\2\u02e6\u02e5\3\2\2\2\u02e6\u02e7")
        buf.write("\3\2\2\2\u02e7\u02e8\3\2\2\2\u02e8\u02ea\7W\2\2\u02e9")
        buf.write("\u02e2\3\2\2\2\u02e9\u02ea\3\2\2\2\u02ea\u02eb\3\2\2\2")
        buf.write("\u02eb\u02ed\7\6\2\2\u02ec\u02e0\3\2\2\2\u02ec\u02e1\3")
        buf.write("\2\2\2\u02ed\u0085\3\2\2\2\u02ee\u02fb\7\7\2\2\u02ef\u02f7")
        buf.write("\7\b\2\2\u02f0\u02f1\7V\2\2\u02f1\u02f4\7]\2\2\u02f2\u02f5")
        buf.write("\5\u009eP\2\u02f3\u02f5\5\u00a0Q\2\u02f4\u02f2\3\2\2\2")
        buf.write("\u02f4\u02f3\3\2\2\2\u02f4\u02f5\3\2\2\2\u02f5\u02f6\3")
        buf.write("\2\2\2\u02f6\u02f8\7W\2\2\u02f7\u02f0\3\2\2\2\u02f7\u02f8")
        buf.write("\3\2\2\2\u02f8\u02f9\3\2\2\2\u02f9\u02fb\7O\2\2\u02fa")
        buf.write("\u02ee\3\2\2\2\u02fa\u02ef\3\2\2\2\u02fb\u0087\3\2\2\2")
        buf.write("\u02fc\u0309\7\t\2\2\u02fd\u0305\7\b\2\2\u02fe\u02ff\7")
        buf.write("V\2\2\u02ff\u0302\7]\2\2\u0300\u0303\5\u009eP\2\u0301")
        buf.write("\u0303\5\u00a0Q\2\u0302\u0300\3\2\2\2\u0302\u0301\3\2")
        buf.write("\2\2\u0302\u0303\3\2\2\2\u0303\u0304\3\2\2\2\u0304\u0306")
        buf.write("\7W\2\2\u0305\u02fe\3\2\2\2\u0305\u0306\3\2\2\2\u0306")
        buf.write("\u0307\3\2\2\2\u0307\u0309\7\6\2\2\u0308\u02fc\3\2\2\2")
        buf.write("\u0308\u02fd\3\2\2\2\u0309\u0089\3\2\2\2\u030a\u030c\7")
        buf.write("V\2\2\u030b\u030d\5.\30\2\u030c\u030b\3\2\2\2\u030c\u030d")
        buf.write("\3\2\2\2\u030d\u030e\3\2\2\2\u030e\u030f\7W\2\2\u030f")
        buf.write("\u008b\3\2\2\2\u0310\u0311\7V\2\2\u0311\u0312\5L\'\2\u0312")
        buf.write("\u0313\7W\2\2\u0313\u008d\3\2\2\2\u0314\u0315\7V\2\2\u0315")
        buf.write("\u0316\5L\'\2\u0316\u0317\7#\2\2\u0317\u0318\5L\'\2\u0318")
        buf.write("\u0319\7W\2\2\u0319\u008f\3\2\2\2\u031a\u0323\7&\2\2\u031b")
        buf.write("\u0320\5\u0092J\2\u031c\u031d\7L\2\2\u031d\u031f\5\u0092")
        buf.write("J\2\u031e\u031c\3\2\2\2\u031f\u0322\3\2\2\2\u0320\u031e")
        buf.write("\3\2\2\2\u0320\u0321\3\2\2\2\u0321\u0324\3\2\2\2\u0322")
        buf.write("\u0320\3\2\2\2\u0323\u031b\3\2\2\2\u0323\u0324\3\2\2\2")
        buf.write("\u0324\u0325\3\2\2\2\u0325\u0326\7\'\2\2\u0326\u0091\3")
        buf.write("\2\2\2\u0327\u0328\7Y\2\2\u0328\u0329\7#\2\2\u0329\u032a")
        buf.write("\5L\'\2\u032a\u0093\3\2\2\2\u032b\u032d\7\31\2\2\u032c")
        buf.write("\u032e\5L\'\2\u032d\u032c\3\2\2\2\u032d\u032e\3\2\2\2")
        buf.write("\u032e\u032f\3\2\2\2\u032f\u0330\5\u0096L\2\u0330\u0095")
        buf.write("\3\2\2\2\u0331\u0335\5\u0098M\2\u0332\u0335\5\u009cO\2")
        buf.write("\u0333\u0335\5\u009aN\2\u0334\u0331\3\2\2\2\u0334\u0332")
        buf.write("\3\2\2\2\u0334\u0333\3\2\2\2\u0335\u0097\3\2\2\2\u0336")
        buf.write("\u0338\5\u0082B\2\u0337\u0336\3\2\2\2\u0337\u0338\3\2")
        buf.write("\2\2\u0338\u0339\3\2\2\2\u0339\u033b\5|?\2\u033a\u033c")
        buf.write("\5\u009eP\2\u033b\u033a\3\2\2\2\u033b\u033c\3\2\2\2\u033c")
        buf.write("\u0099\3\2\2\2\u033d\u033e\5\u0082B\2\u033e\u033f\5\u0080")
        buf.write("A\2\u033f\u009b\3\2\2\2\u0340\u0342\5~@\2\u0341\u0343")
        buf.write("\5\u009eP\2\u0342\u0341\3\2\2\2\u0342\u0343\3\2\2\2\u0343")
        buf.write("\u009d\3\2\2\2\u0344\u034d\7T\2\2\u0345\u034a\5\u00a2")
        buf.write("R\2\u0346\u0347\7L\2\2\u0347\u0349\5\u00a2R\2\u0348\u0346")
        buf.write("\3\2\2\2\u0349\u034c\3\2\2\2\u034a\u0348\3\2\2\2\u034a")
        buf.write("\u034b\3\2\2\2\u034b\u034e\3\2\2\2\u034c\u034a\3\2\2\2")
        buf.write("\u034d\u0345\3\2\2\2\u034d\u034e\3\2\2\2\u034e\u034f\3")
        buf.write("\2\2\2\u034f\u0350\7U\2\2\u0350\u009f\3\2\2\2\u0351\u035a")
        buf.write("\7T\2\2\u0352\u0357\5\u00a4S\2\u0353\u0354\7L\2\2\u0354")
        buf.write("\u0356\5\u00a4S\2\u0355\u0353\3\2\2\2\u0356\u0359\3\2")
        buf.write("\2\2\u0357\u0355\3\2\2\2\u0357\u0358\3\2\2\2\u0358\u035b")
        buf.write("\3\2\2\2\u0359\u0357\3\2\2\2\u035a\u0352\3\2\2\2\u035a")
        buf.write("\u035b\3\2\2\2\u035b\u035c\3\2\2\2\u035c\u035d\7U\2\2")
        buf.write("\u035d\u00a1\3\2\2\2\u035e\u035f\7]\2\2\u035f\u0360\7")
        buf.write("+\2\2\u0360\u0361\5L\'\2\u0361\u00a3\3\2\2\2\u0362\u0363")
        buf.write("\7]\2\2\u0363\u0364\5Z.\2\u0364\u0365\5L\'\2\u0365\u00a5")
        buf.write("\3\2\2\2\u0366\u0367\t\b\2\2\u0367\u00a7\3\2\2\2\u0368")
        buf.write("\u036a\7\23\2\2\u0369\u0368\3\2\2\2\u0369\u036a\3\2\2")
        buf.write("\2\u036a\u036b\3\2\2\2\u036b\u036d\t\t\2\2\u036c\u036e")
        buf.write("\5\u00c2b\2\u036d\u036c\3\2\2\2\u036d\u036e\3\2\2\2\u036e")
        buf.write("\u036f\3\2\2\2\u036f\u0370\7&\2\2\u0370\u0371\5\u00aa")
        buf.write("V\2\u0371\u0372\7\'\2\2\u0372\u00a9\3\2\2\2\u0373\u0375")
        buf.write("\5\u00acW\2\u0374\u0376\7*\2\2\u0375\u0374\3\2\2\2\u0375")
        buf.write("\u0376\3\2\2\2\u0376\u0378\3\2\2\2\u0377\u0373\3\2\2\2")
        buf.write("\u0378\u037b\3\2\2\2\u0379\u0377\3\2\2\2\u0379\u037a\3")
        buf.write("\2\2\2\u037a\u00ab\3\2\2\2\u037b\u0379\3\2\2\2\u037c\u0385")
        buf.write("\5\u00ba^\2\u037d\u0385\5\u00b4[\2\u037e\u0385\5\u00ae")
        buf.write("X\2\u037f\u0380\5\u00c2b\2\u0380\u0381\7+\2\2\u0381\u0382")
        buf.write("\5\u00c2b\2\u0382\u0385\3\2\2\2\u0383\u0385\5\u00c0a\2")
        buf.write("\u0384\u037c\3\2\2\2\u0384\u037d\3\2\2\2\u0384\u037e\3")
        buf.write("\2\2\2\u0384\u037f\3\2\2\2\u0384\u0383\3\2\2\2\u0385\u00ad")
        buf.write("\3\2\2\2\u0386\u0387\t\n\2\2\u0387\u0388\5\u00b0Y\2\u0388")
        buf.write("\u00af\3\2\2\2\u0389\u038b\7V\2\2\u038a\u038c\5\u00b2")
        buf.write("Z\2\u038b\u038a\3\2\2\2\u038b\u038c\3\2\2\2\u038c\u038d")
        buf.write("\3\2\2\2\u038d\u038f\7W\2\2\u038e\u0389\3\2\2\2\u038f")
        buf.write("\u0390\3\2\2\2\u0390\u038e\3\2\2\2\u0390\u0391\3\2\2\2")
        buf.write("\u0391\u00b1\3\2\2\2\u0392\u0395\5\u00c2b\2\u0393\u0394")
        buf.write("\7+\2\2\u0394\u0396\5\u00c2b\2\u0395\u0393\3\2\2\2\u0395")
        buf.write("\u0396\3\2\2\2\u0396\u0398\3\2\2\2\u0397\u0399\7L\2\2")
        buf.write("\u0398\u0397\3\2\2\2\u0398\u0399\3\2\2\2\u0399\u039b\3")
        buf.write("\2\2\2\u039a\u0392\3\2\2\2\u039b\u039c\3\2\2\2\u039c\u039a")
        buf.write("\3\2\2\2\u039c\u039d\3\2\2\2\u039d\u00b3\3\2\2\2\u039e")
        buf.write("\u03a1\5\u00bc_\2\u039f\u03a1\5\u00c0a\2\u03a0\u039e\3")
        buf.write("\2\2\2\u03a0\u039f\3\2\2\2\u03a1\u03a2\3\2\2\2\u03a2\u03a4")
        buf.write("\5\u00b6\\\2\u03a3\u03a5\5\u00b0Y\2\u03a4\u03a3\3\2\2")
        buf.write("\2\u03a4\u03a5\3\2\2\2\u03a5\u00b5\3\2\2\2\u03a6\u03a9")
        buf.write("\5\u00b8]\2\u03a7\u03aa\5\u00bc_\2\u03a8\u03aa\5\u00c0")
        buf.write("a\2\u03a9\u03a7\3\2\2\2\u03a9\u03a8\3\2\2\2\u03aa\u03ac")
        buf.write("\3\2\2\2\u03ab\u03a6\3\2\2\2\u03ac\u03ad\3\2\2\2\u03ad")
        buf.write("\u03ab\3\2\2\2\u03ad\u03ae\3\2\2\2\u03ae\u00b7\3\2\2\2")
        buf.write("\u03af\u03b0\t\13\2\2\u03b0\u00b9\3\2\2\2\u03b1\u03b3")
        buf.write("\5\u00bc_\2\u03b2\u03b4\5\u00b0Y\2\u03b3\u03b2\3\2\2\2")
        buf.write("\u03b3\u03b4\3\2\2\2\u03b4\u00bb\3\2\2\2\u03b5\u03b7\5")
        buf.write("\u00c2b\2\u03b6\u03b8\5\u00be`\2\u03b7\u03b6\3\2\2\2\u03b7")
        buf.write("\u03b8\3\2\2\2\u03b8\u00bd\3\2\2\2\u03b9\u03ba\7#\2\2")
        buf.write("\u03ba\u03bd\5\u00c2b\2\u03bb\u03bc\7#\2\2\u03bc\u03be")
        buf.write("\5\u00c2b\2\u03bd\u03bb\3\2\2\2\u03bd\u03be\3\2\2\2\u03be")
        buf.write("\u00bf\3\2\2\2\u03bf\u03c1\7\25\2\2\u03c0\u03c2\5\u00c2")
        buf.write("b\2\u03c1\u03c0\3\2\2\2\u03c1\u03c2\3\2\2\2\u03c2\u03c4")
        buf.write("\3\2\2\2\u03c3\u03bf\3\2\2\2\u03c3\u03c4\3\2\2\2\u03c4")
        buf.write("\u03c5\3\2\2\2\u03c5\u03c6\7&\2\2\u03c6\u03c7\5\u00aa")
        buf.write("V\2\u03c7\u03c8\7\'\2\2\u03c8\u00c1\3\2\2\2\u03c9\u03ca")
        buf.write("\t\f\2\2\u03ca\u00c3\3\2\2\2r\u00c5\u00ca\u00d0\u00d6")
        buf.write("\u00df\u00e4\u00ea\u00ee\u00f2\u00f4\u00f8\u0100\u0115")
        buf.write("\u011c\u0120\u0124\u0132\u013e\u0147\u014a\u0151\u015a")
        buf.write("\u0161\u0168\u016c\u0174\u0177\u017b\u0181\u0186\u018d")
        buf.write("\u0195\u019d\u01a4\u01aa\u01bc\u01c4\u01c8\u01df\u01f0")
        buf.write("\u01fa\u0204\u0211\u0216\u021d\u0228\u022b\u0235\u023f")
        buf.write("\u0247\u024d\u0254\u025a\u025d\u0260\u0265\u0267\u027b")
        buf.write("\u0284\u0286\u0294\u029d\u02a4\u02ab\u02ad\u02b7\u02c0")
        buf.write("\u02c4\u02c9\u02cb\u02cd\u02de\u02e6\u02e9\u02ec\u02f4")
        buf.write("\u02f7\u02fa\u0302\u0305\u0308\u030c\u0320\u0323\u032d")
        buf.write("\u0334\u0337\u033b\u0342\u034a\u034d\u0357\u035a\u0369")
        buf.write("\u036d\u0375\u0379\u0384\u038b\u0390\u0395\u0398\u039c")
        buf.write("\u03a0\u03a4\u03a9\u03ad\u03b3\u03b7\u03bd\u03c1\u03c3")
        return buf.getvalue()


class jacParser ( Parser ):

    grammarFileName = "jac.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'version'", "'&'", "'-->'", "'->'", "'<--'", 
                     "'<-'", "'<-->'", "'--'", "'str'", "'int'", "'float'", 
                     "'list'", "'dict'", "'bool'", "'type'", "'graph'", 
                     "'strict'", "'digraph'", "'subgraph'", "'node'", "'ignore'", 
                     "'take'", "'spawn'", "'with'", "'entry'", "'exit'", 
                     "'length'", "'keys'", "'context'", "'info'", "'details'", 
                     "'activity'", "':'", "'::'", "'::>'", "'{'", "'}'", 
                     "'edge'", "'walker'", "';'", "'='", "'+='", "'-='", 
                     "'*='", "'/='", "':='", "<INVALID>", "<INVALID>", "'if'", 
                     "'elif'", "'else'", "'for'", "'to'", "'by'", "'while'", 
                     "'continue'", "'break'", "'disengage'", "'skip'", "'report'", 
                     "'destroy'", "'.'", "<INVALID>", "'=='", "'<'", "'>'", 
                     "'<='", "'>='", "'!='", "'in'", "'anchor'", "'has'", 
                     "'private'", "','", "'can'", "'+'", "'-'", "'*'", "'/'", 
                     "'%'", "'^'", "'('", "')'", "'['", "']'", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "'null'" ]

    symbolicNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "TYP_STRING", "TYP_INT", "TYP_FLOAT", 
                      "TYP_LIST", "TYP_DICT", "TYP_BOOL", "KW_TYPE", "KW_GRAPH", 
                      "KW_STRICT", "KW_DIGRAPH", "KW_SUBGRAPH", "KW_NODE", 
                      "KW_IGNORE", "KW_TAKE", "KW_SPAWN", "KW_WITH", "KW_ENTRY", 
                      "KW_EXIT", "KW_LENGTH", "KW_KEYS", "KW_CONTEXT", "KW_INFO", 
                      "KW_DETAILS", "KW_ACTIVITY", "COLON", "DBL_COLON", 
                      "COLON_OUT", "LBRACE", "RBRACE", "KW_EDGE", "KW_WALKER", 
                      "SEMI", "EQ", "PEQ", "MEQ", "TEQ", "DEQ", "CPY_EQ", 
                      "KW_AND", "KW_OR", "KW_IF", "KW_ELIF", "KW_ELSE", 
                      "KW_FOR", "KW_TO", "KW_BY", "KW_WHILE", "KW_CONTINUE", 
                      "KW_BREAK", "KW_DISENGAGE", "KW_SKIP", "KW_REPORT", 
                      "KW_DESTROY", "DOT", "NOT", "EE", "LT", "GT", "LTE", 
                      "GTE", "NE", "KW_IN", "KW_ANCHOR", "KW_HAS", "KW_PRIVATE", 
                      "COMMA", "KW_CAN", "PLUS", "MINUS", "MUL", "DIV", 
                      "MOD", "POW", "LPAREN", "RPAREN", "LSQUARE", "RSQUARE", 
                      "FLOAT", "STRING", "BOOL", "INT", "NULL", "NAME", 
                      "COMMENT", "LINE_COMMENT", "PY_COMMENT", "WS", "ErrorChar" ]

    RULE_start = 0
    RULE_element = 1
    RULE_architype = 2
    RULE_walker = 3
    RULE_ver_label = 4
    RULE_namespaces = 5
    RULE_walk_entry_block = 6
    RULE_walk_exit_block = 7
    RULE_walk_activity_block = 8
    RULE_attr_block = 9
    RULE_attr_stmt = 10
    RULE_graph_block = 11
    RULE_graph_block_spawn = 12
    RULE_graph_block_dot = 13
    RULE_has_root = 14
    RULE_has_stmt = 15
    RULE_has_assign = 16
    RULE_can_stmt = 17
    RULE_event_clause = 18
    RULE_preset_in_out = 19
    RULE_dotted_name = 20
    RULE_name_list = 21
    RULE_expr_list = 22
    RULE_code_block = 23
    RULE_node_ctx_block = 24
    RULE_statement = 25
    RULE_if_stmt = 26
    RULE_elif_stmt = 27
    RULE_else_stmt = 28
    RULE_for_stmt = 29
    RULE_while_stmt = 30
    RULE_ctrl_stmt = 31
    RULE_report_action = 32
    RULE_walker_action = 33
    RULE_ignore_action = 34
    RULE_take_action = 35
    RULE_destroy_action = 36
    RULE_expression = 37
    RULE_assignment = 38
    RULE_copy_assign = 39
    RULE_inc_assign = 40
    RULE_connect = 41
    RULE_logical = 42
    RULE_compare = 43
    RULE_cmp_op = 44
    RULE_nin = 45
    RULE_arithmetic = 46
    RULE_term = 47
    RULE_factor = 48
    RULE_power = 49
    RULE_func_call = 50
    RULE_atom = 51
    RULE_ref = 52
    RULE_deref = 53
    RULE_built_in = 54
    RULE_cast_built_in = 55
    RULE_obj_built_in = 56
    RULE_dict_built_in = 57
    RULE_list_built_in = 58
    RULE_string_built_in = 59
    RULE_node_edge_ref = 60
    RULE_node_ref = 61
    RULE_walker_ref = 62
    RULE_graph_ref = 63
    RULE_edge_ref = 64
    RULE_edge_to = 65
    RULE_edge_from = 66
    RULE_edge_any = 67
    RULE_list_val = 68
    RULE_index = 69
    RULE_index_range = 70
    RULE_dict_val = 71
    RULE_kv_pair = 72
    RULE_spawn = 73
    RULE_spawn_object = 74
    RULE_node_spawn = 75
    RULE_graph_spawn = 76
    RULE_walker_spawn = 77
    RULE_spawn_ctx = 78
    RULE_filter_ctx = 79
    RULE_spawn_assign = 80
    RULE_filter_compare = 81
    RULE_any_type = 82
    RULE_dot_graph = 83
    RULE_dot_stmt_list = 84
    RULE_dot_stmt = 85
    RULE_dot_attr_stmt = 86
    RULE_dot_attr_list = 87
    RULE_dot_a_list = 88
    RULE_dot_edge_stmt = 89
    RULE_dot_edgeRHS = 90
    RULE_dot_edgeop = 91
    RULE_dot_node_stmt = 92
    RULE_dot_node_id = 93
    RULE_dot_port = 94
    RULE_dot_subgraph = 95
    RULE_dot_id = 96

    ruleNames =  [ "start", "element", "architype", "walker", "ver_label", 
                   "namespaces", "walk_entry_block", "walk_exit_block", 
                   "walk_activity_block", "attr_block", "attr_stmt", "graph_block", 
                   "graph_block_spawn", "graph_block_dot", "has_root", "has_stmt", 
                   "has_assign", "can_stmt", "event_clause", "preset_in_out", 
                   "dotted_name", "name_list", "expr_list", "code_block", 
                   "node_ctx_block", "statement", "if_stmt", "elif_stmt", 
                   "else_stmt", "for_stmt", "while_stmt", "ctrl_stmt", "report_action", 
                   "walker_action", "ignore_action", "take_action", "destroy_action", 
                   "expression", "assignment", "copy_assign", "inc_assign", 
                   "connect", "logical", "compare", "cmp_op", "nin", "arithmetic", 
                   "term", "factor", "power", "func_call", "atom", "ref", 
                   "deref", "built_in", "cast_built_in", "obj_built_in", 
                   "dict_built_in", "list_built_in", "string_built_in", 
                   "node_edge_ref", "node_ref", "walker_ref", "graph_ref", 
                   "edge_ref", "edge_to", "edge_from", "edge_any", "list_val", 
                   "index", "index_range", "dict_val", "kv_pair", "spawn", 
                   "spawn_object", "node_spawn", "graph_spawn", "walker_spawn", 
                   "spawn_ctx", "filter_ctx", "spawn_assign", "filter_compare", 
                   "any_type", "dot_graph", "dot_stmt_list", "dot_stmt", 
                   "dot_attr_stmt", "dot_attr_list", "dot_a_list", "dot_edge_stmt", 
                   "dot_edgeRHS", "dot_edgeop", "dot_node_stmt", "dot_node_id", 
                   "dot_port", "dot_subgraph", "dot_id" ]

    EOF = Token.EOF
    T__0=1
    T__1=2
    T__2=3
    T__3=4
    T__4=5
    T__5=6
    T__6=7
    T__7=8
    TYP_STRING=9
    TYP_INT=10
    TYP_FLOAT=11
    TYP_LIST=12
    TYP_DICT=13
    TYP_BOOL=14
    KW_TYPE=15
    KW_GRAPH=16
    KW_STRICT=17
    KW_DIGRAPH=18
    KW_SUBGRAPH=19
    KW_NODE=20
    KW_IGNORE=21
    KW_TAKE=22
    KW_SPAWN=23
    KW_WITH=24
    KW_ENTRY=25
    KW_EXIT=26
    KW_LENGTH=27
    KW_KEYS=28
    KW_CONTEXT=29
    KW_INFO=30
    KW_DETAILS=31
    KW_ACTIVITY=32
    COLON=33
    DBL_COLON=34
    COLON_OUT=35
    LBRACE=36
    RBRACE=37
    KW_EDGE=38
    KW_WALKER=39
    SEMI=40
    EQ=41
    PEQ=42
    MEQ=43
    TEQ=44
    DEQ=45
    CPY_EQ=46
    KW_AND=47
    KW_OR=48
    KW_IF=49
    KW_ELIF=50
    KW_ELSE=51
    KW_FOR=52
    KW_TO=53
    KW_BY=54
    KW_WHILE=55
    KW_CONTINUE=56
    KW_BREAK=57
    KW_DISENGAGE=58
    KW_SKIP=59
    KW_REPORT=60
    KW_DESTROY=61
    DOT=62
    NOT=63
    EE=64
    LT=65
    GT=66
    LTE=67
    GTE=68
    NE=69
    KW_IN=70
    KW_ANCHOR=71
    KW_HAS=72
    KW_PRIVATE=73
    COMMA=74
    KW_CAN=75
    PLUS=76
    MINUS=77
    MUL=78
    DIV=79
    MOD=80
    POW=81
    LPAREN=82
    RPAREN=83
    LSQUARE=84
    RSQUARE=85
    FLOAT=86
    STRING=87
    BOOL=88
    INT=89
    NULL=90
    NAME=91
    COMMENT=92
    LINE_COMMENT=93
    PY_COMMENT=94
    WS=95
    ErrorChar=96

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.9.2")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class StartContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(jacParser.EOF, 0)

        def ver_label(self):
            return self.getTypedRuleContext(jacParser.Ver_labelContext,0)


        def element(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(jacParser.ElementContext)
            else:
                return self.getTypedRuleContext(jacParser.ElementContext,i)


        def getRuleIndex(self):
            return jacParser.RULE_start

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStart" ):
                listener.enterStart(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStart" ):
                listener.exitStart(self)




    def start(self):

        localctx = jacParser.StartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_start)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 195
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==jacParser.T__0:
                self.state = 194
                self.ver_label()


            self.state = 198 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 197
                self.element()
                self.state = 200 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << jacParser.KW_GRAPH) | (1 << jacParser.KW_NODE) | (1 << jacParser.KW_EDGE) | (1 << jacParser.KW_WALKER))) != 0)):
                    break

            self.state = 202
            self.match(jacParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ElementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def architype(self):
            return self.getTypedRuleContext(jacParser.ArchitypeContext,0)


        def walker(self):
            return self.getTypedRuleContext(jacParser.WalkerContext,0)


        def getRuleIndex(self):
            return jacParser.RULE_element

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElement" ):
                listener.enterElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElement" ):
                listener.exitElement(self)




    def element(self):

        localctx = jacParser.ElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_element)
        try:
            self.state = 206
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [jacParser.KW_GRAPH, jacParser.KW_NODE, jacParser.KW_EDGE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 204
                self.architype()
                pass
            elif token in [jacParser.KW_WALKER]:
                self.enterOuterAlt(localctx, 2)
                self.state = 205
                self.walker()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArchitypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_NODE(self):
            return self.getToken(jacParser.KW_NODE, 0)

        def NAME(self):
            return self.getToken(jacParser.NAME, 0)

        def attr_block(self):
            return self.getTypedRuleContext(jacParser.Attr_blockContext,0)


        def COLON(self):
            return self.getToken(jacParser.COLON, 0)

        def INT(self):
            return self.getToken(jacParser.INT, 0)

        def KW_EDGE(self):
            return self.getToken(jacParser.KW_EDGE, 0)

        def KW_GRAPH(self):
            return self.getToken(jacParser.KW_GRAPH, 0)

        def graph_block(self):
            return self.getTypedRuleContext(jacParser.Graph_blockContext,0)


        def getRuleIndex(self):
            return jacParser.RULE_architype

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArchitype" ):
                listener.enterArchitype(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArchitype" ):
                listener.exitArchitype(self)




    def architype(self):

        localctx = jacParser.ArchitypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_architype)
        try:
            self.state = 221
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [jacParser.KW_NODE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 208
                self.match(jacParser.KW_NODE)
                self.state = 209
                self.match(jacParser.NAME)
                self.state = 212
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,3,self._ctx)
                if la_ == 1:
                    self.state = 210
                    self.match(jacParser.COLON)
                    self.state = 211
                    self.match(jacParser.INT)


                self.state = 214
                self.attr_block()
                pass
            elif token in [jacParser.KW_EDGE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 215
                self.match(jacParser.KW_EDGE)
                self.state = 216
                self.match(jacParser.NAME)
                self.state = 217
                self.attr_block()
                pass
            elif token in [jacParser.KW_GRAPH]:
                self.enterOuterAlt(localctx, 3)
                self.state = 218
                self.match(jacParser.KW_GRAPH)
                self.state = 219
                self.match(jacParser.NAME)
                self.state = 220
                self.graph_block()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WalkerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_WALKER(self):
            return self.getToken(jacParser.KW_WALKER, 0)

        def NAME(self):
            return self.getToken(jacParser.NAME, 0)

        def LBRACE(self):
            return self.getToken(jacParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(jacParser.RBRACE, 0)

        def namespaces(self):
            return self.getTypedRuleContext(jacParser.NamespacesContext,0)


        def attr_stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(jacParser.Attr_stmtContext)
            else:
                return self.getTypedRuleContext(jacParser.Attr_stmtContext,i)


        def walk_entry_block(self):
            return self.getTypedRuleContext(jacParser.Walk_entry_blockContext,0)


        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(jacParser.StatementContext)
            else:
                return self.getTypedRuleContext(jacParser.StatementContext,i)


        def walk_activity_block(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(jacParser.Walk_activity_blockContext)
            else:
                return self.getTypedRuleContext(jacParser.Walk_activity_blockContext,i)


        def walk_exit_block(self):
            return self.getTypedRuleContext(jacParser.Walk_exit_blockContext,0)


        def getRuleIndex(self):
            return jacParser.RULE_walker

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWalker" ):
                listener.enterWalker(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWalker" ):
                listener.exitWalker(self)




    def walker(self):

        localctx = jacParser.WalkerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_walker)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 223
            self.match(jacParser.KW_WALKER)
            self.state = 224
            self.match(jacParser.NAME)
            self.state = 226
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==jacParser.COLON:
                self.state = 225
                self.namespaces()


            self.state = 228
            self.match(jacParser.LBRACE)
            self.state = 232
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==jacParser.KW_HAS or _la==jacParser.KW_CAN:
                self.state = 229
                self.attr_stmt()
                self.state = 234
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 236
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,7,self._ctx)
            if la_ == 1:
                self.state = 235
                self.walk_entry_block()


            self.state = 242
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,9,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 240
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [jacParser.T__1, jacParser.T__2, jacParser.T__4, jacParser.T__5, jacParser.T__6, jacParser.TYP_STRING, jacParser.TYP_INT, jacParser.TYP_FLOAT, jacParser.TYP_LIST, jacParser.TYP_DICT, jacParser.TYP_BOOL, jacParser.KW_TYPE, jacParser.KW_NODE, jacParser.KW_IGNORE, jacParser.KW_TAKE, jacParser.KW_SPAWN, jacParser.COLON, jacParser.DBL_COLON, jacParser.LBRACE, jacParser.KW_EDGE, jacParser.KW_IF, jacParser.KW_FOR, jacParser.KW_WHILE, jacParser.KW_CONTINUE, jacParser.KW_BREAK, jacParser.KW_DISENGAGE, jacParser.KW_SKIP, jacParser.KW_REPORT, jacParser.KW_DESTROY, jacParser.NOT, jacParser.PLUS, jacParser.MINUS, jacParser.MUL, jacParser.LPAREN, jacParser.LSQUARE, jacParser.FLOAT, jacParser.STRING, jacParser.BOOL, jacParser.INT, jacParser.NULL, jacParser.NAME]:
                        self.state = 238
                        self.statement()
                        pass
                    elif token in [jacParser.KW_WITH]:
                        self.state = 239
                        self.walk_activity_block()
                        pass
                    else:
                        raise NoViableAltException(self)
             
                self.state = 244
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,9,self._ctx)

            self.state = 246
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==jacParser.KW_WITH:
                self.state = 245
                self.walk_exit_block()


            self.state = 248
            self.match(jacParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Ver_labelContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLON(self):
            return self.getToken(jacParser.COLON, 0)

        def STRING(self):
            return self.getToken(jacParser.STRING, 0)

        def SEMI(self):
            return self.getToken(jacParser.SEMI, 0)

        def getRuleIndex(self):
            return jacParser.RULE_ver_label

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVer_label" ):
                listener.enterVer_label(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVer_label" ):
                listener.exitVer_label(self)




    def ver_label(self):

        localctx = jacParser.Ver_labelContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_ver_label)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 250
            self.match(jacParser.T__0)
            self.state = 251
            self.match(jacParser.COLON)
            self.state = 252
            self.match(jacParser.STRING)
            self.state = 254
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==jacParser.SEMI:
                self.state = 253
                self.match(jacParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NamespacesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLON(self):
            return self.getToken(jacParser.COLON, 0)

        def name_list(self):
            return self.getTypedRuleContext(jacParser.Name_listContext,0)


        def getRuleIndex(self):
            return jacParser.RULE_namespaces

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamespaces" ):
                listener.enterNamespaces(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamespaces" ):
                listener.exitNamespaces(self)




    def namespaces(self):

        localctx = jacParser.NamespacesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_namespaces)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 256
            self.match(jacParser.COLON)
            self.state = 257
            self.name_list()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Walk_entry_blockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_WITH(self):
            return self.getToken(jacParser.KW_WITH, 0)

        def KW_ENTRY(self):
            return self.getToken(jacParser.KW_ENTRY, 0)

        def code_block(self):
            return self.getTypedRuleContext(jacParser.Code_blockContext,0)


        def getRuleIndex(self):
            return jacParser.RULE_walk_entry_block

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWalk_entry_block" ):
                listener.enterWalk_entry_block(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWalk_entry_block" ):
                listener.exitWalk_entry_block(self)




    def walk_entry_block(self):

        localctx = jacParser.Walk_entry_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_walk_entry_block)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 259
            self.match(jacParser.KW_WITH)
            self.state = 260
            self.match(jacParser.KW_ENTRY)
            self.state = 261
            self.code_block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Walk_exit_blockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_WITH(self):
            return self.getToken(jacParser.KW_WITH, 0)

        def KW_EXIT(self):
            return self.getToken(jacParser.KW_EXIT, 0)

        def code_block(self):
            return self.getTypedRuleContext(jacParser.Code_blockContext,0)


        def getRuleIndex(self):
            return jacParser.RULE_walk_exit_block

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWalk_exit_block" ):
                listener.enterWalk_exit_block(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWalk_exit_block" ):
                listener.exitWalk_exit_block(self)




    def walk_exit_block(self):

        localctx = jacParser.Walk_exit_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_walk_exit_block)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 263
            self.match(jacParser.KW_WITH)
            self.state = 264
            self.match(jacParser.KW_EXIT)
            self.state = 265
            self.code_block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Walk_activity_blockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_WITH(self):
            return self.getToken(jacParser.KW_WITH, 0)

        def KW_ACTIVITY(self):
            return self.getToken(jacParser.KW_ACTIVITY, 0)

        def code_block(self):
            return self.getTypedRuleContext(jacParser.Code_blockContext,0)


        def getRuleIndex(self):
            return jacParser.RULE_walk_activity_block

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWalk_activity_block" ):
                listener.enterWalk_activity_block(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWalk_activity_block" ):
                listener.exitWalk_activity_block(self)




    def walk_activity_block(self):

        localctx = jacParser.Walk_activity_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_walk_activity_block)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 267
            self.match(jacParser.KW_WITH)
            self.state = 268
            self.match(jacParser.KW_ACTIVITY)
            self.state = 269
            self.code_block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Attr_blockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(jacParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(jacParser.RBRACE, 0)

        def attr_stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(jacParser.Attr_stmtContext)
            else:
                return self.getTypedRuleContext(jacParser.Attr_stmtContext,i)


        def COLON(self):
            return self.getToken(jacParser.COLON, 0)

        def SEMI(self):
            return self.getToken(jacParser.SEMI, 0)

        def getRuleIndex(self):
            return jacParser.RULE_attr_block

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttr_block" ):
                listener.enterAttr_block(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttr_block" ):
                listener.exitAttr_block(self)




    def attr_block(self):

        localctx = jacParser.Attr_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_attr_block)
        self._la = 0 # Token type
        try:
            self.state = 282
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [jacParser.LBRACE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 271
                self.match(jacParser.LBRACE)
                self.state = 275
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==jacParser.KW_HAS or _la==jacParser.KW_CAN:
                    self.state = 272
                    self.attr_stmt()
                    self.state = 277
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 278
                self.match(jacParser.RBRACE)
                pass
            elif token in [jacParser.COLON]:
                self.enterOuterAlt(localctx, 2)
                self.state = 279
                self.match(jacParser.COLON)
                self.state = 280
                self.attr_stmt()
                pass
            elif token in [jacParser.SEMI]:
                self.enterOuterAlt(localctx, 3)
                self.state = 281
                self.match(jacParser.SEMI)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Attr_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def has_stmt(self):
            return self.getTypedRuleContext(jacParser.Has_stmtContext,0)


        def can_stmt(self):
            return self.getTypedRuleContext(jacParser.Can_stmtContext,0)


        def getRuleIndex(self):
            return jacParser.RULE_attr_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttr_stmt" ):
                listener.enterAttr_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttr_stmt" ):
                listener.exitAttr_stmt(self)




    def attr_stmt(self):

        localctx = jacParser.Attr_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_attr_stmt)
        try:
            self.state = 286
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [jacParser.KW_HAS]:
                self.enterOuterAlt(localctx, 1)
                self.state = 284
                self.has_stmt()
                pass
            elif token in [jacParser.KW_CAN]:
                self.enterOuterAlt(localctx, 2)
                self.state = 285
                self.can_stmt()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Graph_blockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def graph_block_spawn(self):
            return self.getTypedRuleContext(jacParser.Graph_block_spawnContext,0)


        def graph_block_dot(self):
            return self.getTypedRuleContext(jacParser.Graph_block_dotContext,0)


        def getRuleIndex(self):
            return jacParser.RULE_graph_block

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGraph_block" ):
                listener.enterGraph_block(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGraph_block" ):
                listener.exitGraph_block(self)




    def graph_block(self):

        localctx = jacParser.Graph_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_graph_block)
        try:
            self.state = 290
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,15,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 288
                self.graph_block_spawn()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 289
                self.graph_block_dot()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Graph_block_spawnContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(jacParser.LBRACE, 0)

        def has_root(self):
            return self.getTypedRuleContext(jacParser.Has_rootContext,0)


        def KW_SPAWN(self):
            return self.getToken(jacParser.KW_SPAWN, 0)

        def code_block(self):
            return self.getTypedRuleContext(jacParser.Code_blockContext,0)


        def RBRACE(self):
            return self.getToken(jacParser.RBRACE, 0)

        def COLON(self):
            return self.getToken(jacParser.COLON, 0)

        def SEMI(self):
            return self.getToken(jacParser.SEMI, 0)

        def getRuleIndex(self):
            return jacParser.RULE_graph_block_spawn

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGraph_block_spawn" ):
                listener.enterGraph_block_spawn(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGraph_block_spawn" ):
                listener.exitGraph_block_spawn(self)




    def graph_block_spawn(self):

        localctx = jacParser.Graph_block_spawnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_graph_block_spawn)
        try:
            self.state = 304
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [jacParser.LBRACE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 292
                self.match(jacParser.LBRACE)
                self.state = 293
                self.has_root()
                self.state = 294
                self.match(jacParser.KW_SPAWN)
                self.state = 295
                self.code_block()
                self.state = 296
                self.match(jacParser.RBRACE)
                pass
            elif token in [jacParser.COLON]:
                self.enterOuterAlt(localctx, 2)
                self.state = 298
                self.match(jacParser.COLON)
                self.state = 299
                self.has_root()
                self.state = 300
                self.match(jacParser.KW_SPAWN)
                self.state = 301
                self.code_block()
                self.state = 302
                self.match(jacParser.SEMI)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Graph_block_dotContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(jacParser.LBRACE, 0)

        def has_root(self):
            return self.getTypedRuleContext(jacParser.Has_rootContext,0)


        def dot_graph(self):
            return self.getTypedRuleContext(jacParser.Dot_graphContext,0)


        def RBRACE(self):
            return self.getToken(jacParser.RBRACE, 0)

        def COLON(self):
            return self.getToken(jacParser.COLON, 0)

        def SEMI(self):
            return self.getToken(jacParser.SEMI, 0)

        def getRuleIndex(self):
            return jacParser.RULE_graph_block_dot

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGraph_block_dot" ):
                listener.enterGraph_block_dot(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGraph_block_dot" ):
                listener.exitGraph_block_dot(self)




    def graph_block_dot(self):

        localctx = jacParser.Graph_block_dotContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_graph_block_dot)
        try:
            self.state = 316
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [jacParser.LBRACE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 306
                self.match(jacParser.LBRACE)
                self.state = 307
                self.has_root()
                self.state = 308
                self.dot_graph()
                self.state = 309
                self.match(jacParser.RBRACE)
                pass
            elif token in [jacParser.COLON]:
                self.enterOuterAlt(localctx, 2)
                self.state = 311
                self.match(jacParser.COLON)
                self.state = 312
                self.has_root()
                self.state = 313
                self.dot_graph()
                self.state = 314
                self.match(jacParser.SEMI)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Has_rootContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_HAS(self):
            return self.getToken(jacParser.KW_HAS, 0)

        def KW_ANCHOR(self):
            return self.getToken(jacParser.KW_ANCHOR, 0)

        def NAME(self):
            return self.getToken(jacParser.NAME, 0)

        def SEMI(self):
            return self.getToken(jacParser.SEMI, 0)

        def getRuleIndex(self):
            return jacParser.RULE_has_root

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHas_root" ):
                listener.enterHas_root(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHas_root" ):
                listener.exitHas_root(self)




    def has_root(self):

        localctx = jacParser.Has_rootContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_has_root)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 318
            self.match(jacParser.KW_HAS)
            self.state = 319
            self.match(jacParser.KW_ANCHOR)
            self.state = 320
            self.match(jacParser.NAME)
            self.state = 321
            self.match(jacParser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Has_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_HAS(self):
            return self.getToken(jacParser.KW_HAS, 0)

        def has_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(jacParser.Has_assignContext)
            else:
                return self.getTypedRuleContext(jacParser.Has_assignContext,i)


        def SEMI(self):
            return self.getToken(jacParser.SEMI, 0)

        def KW_PRIVATE(self):
            return self.getToken(jacParser.KW_PRIVATE, 0)

        def KW_ANCHOR(self):
            return self.getToken(jacParser.KW_ANCHOR, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(jacParser.COMMA)
            else:
                return self.getToken(jacParser.COMMA, i)

        def getRuleIndex(self):
            return jacParser.RULE_has_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHas_stmt" ):
                listener.enterHas_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHas_stmt" ):
                listener.exitHas_stmt(self)




    def has_stmt(self):

        localctx = jacParser.Has_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_has_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 323
            self.match(jacParser.KW_HAS)
            self.state = 325
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==jacParser.KW_PRIVATE:
                self.state = 324
                self.match(jacParser.KW_PRIVATE)


            self.state = 328
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==jacParser.KW_ANCHOR:
                self.state = 327
                self.match(jacParser.KW_ANCHOR)


            self.state = 330
            self.has_assign()
            self.state = 335
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==jacParser.COMMA:
                self.state = 331
                self.match(jacParser.COMMA)
                self.state = 332
                self.has_assign()
                self.state = 337
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 338
            self.match(jacParser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Has_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(jacParser.NAME, 0)

        def EQ(self):
            return self.getToken(jacParser.EQ, 0)

        def expression(self):
            return self.getTypedRuleContext(jacParser.ExpressionContext,0)


        def getRuleIndex(self):
            return jacParser.RULE_has_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHas_assign" ):
                listener.enterHas_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHas_assign" ):
                listener.exitHas_assign(self)




    def has_assign(self):

        localctx = jacParser.Has_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_has_assign)
        try:
            self.state = 344
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,21,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 340
                self.match(jacParser.NAME)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 341
                self.match(jacParser.NAME)
                self.state = 342
                self.match(jacParser.EQ)
                self.state = 343
                self.expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Can_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_CAN(self):
            return self.getToken(jacParser.KW_CAN, 0)

        def dotted_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(jacParser.Dotted_nameContext)
            else:
                return self.getTypedRuleContext(jacParser.Dotted_nameContext,i)


        def SEMI(self):
            return self.getToken(jacParser.SEMI, 0)

        def preset_in_out(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(jacParser.Preset_in_outContext)
            else:
                return self.getTypedRuleContext(jacParser.Preset_in_outContext,i)


        def event_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(jacParser.Event_clauseContext)
            else:
                return self.getTypedRuleContext(jacParser.Event_clauseContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(jacParser.COMMA)
            else:
                return self.getToken(jacParser.COMMA, i)

        def NAME(self):
            return self.getToken(jacParser.NAME, 0)

        def code_block(self):
            return self.getTypedRuleContext(jacParser.Code_blockContext,0)


        def getRuleIndex(self):
            return jacParser.RULE_can_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCan_stmt" ):
                listener.enterCan_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCan_stmt" ):
                listener.exitCan_stmt(self)




    def can_stmt(self):

        localctx = jacParser.Can_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_can_stmt)
        self._la = 0 # Token type
        try:
            self.state = 373
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,26,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 346
                self.match(jacParser.KW_CAN)
                self.state = 347
                self.dotted_name()
                self.state = 351
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==jacParser.DBL_COLON:
                    self.state = 348
                    self.preset_in_out()
                    self.state = 349
                    self.event_clause()


                self.state = 362
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==jacParser.COMMA:
                    self.state = 353
                    self.match(jacParser.COMMA)
                    self.state = 354
                    self.dotted_name()
                    self.state = 358
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==jacParser.DBL_COLON:
                        self.state = 355
                        self.preset_in_out()
                        self.state = 356
                        self.event_clause()


                    self.state = 364
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 365
                self.match(jacParser.SEMI)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 367
                self.match(jacParser.KW_CAN)
                self.state = 368
                self.match(jacParser.NAME)
                self.state = 370
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==jacParser.KW_WITH:
                    self.state = 369
                    self.event_clause()


                self.state = 372
                self.code_block()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Event_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_WITH(self):
            return self.getToken(jacParser.KW_WITH, 0)

        def KW_ENTRY(self):
            return self.getToken(jacParser.KW_ENTRY, 0)

        def KW_EXIT(self):
            return self.getToken(jacParser.KW_EXIT, 0)

        def KW_ACTIVITY(self):
            return self.getToken(jacParser.KW_ACTIVITY, 0)

        def name_list(self):
            return self.getTypedRuleContext(jacParser.Name_listContext,0)


        def getRuleIndex(self):
            return jacParser.RULE_event_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEvent_clause" ):
                listener.enterEvent_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEvent_clause" ):
                listener.exitEvent_clause(self)




    def event_clause(self):

        localctx = jacParser.Event_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_event_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 375
            self.match(jacParser.KW_WITH)
            self.state = 377
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==jacParser.NAME:
                self.state = 376
                self.name_list()


            self.state = 379
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << jacParser.KW_ENTRY) | (1 << jacParser.KW_EXIT) | (1 << jacParser.KW_ACTIVITY))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Preset_in_outContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DBL_COLON(self, i:int=None):
            if i is None:
                return self.getTokens(jacParser.DBL_COLON)
            else:
                return self.getToken(jacParser.DBL_COLON, i)

        def COLON_OUT(self):
            return self.getToken(jacParser.COLON_OUT, 0)

        def expression(self):
            return self.getTypedRuleContext(jacParser.ExpressionContext,0)


        def expr_list(self):
            return self.getTypedRuleContext(jacParser.Expr_listContext,0)


        def getRuleIndex(self):
            return jacParser.RULE_preset_in_out

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPreset_in_out" ):
                listener.enterPreset_in_out(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPreset_in_out" ):
                listener.exitPreset_in_out(self)




    def preset_in_out(self):

        localctx = jacParser.Preset_in_outContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_preset_in_out)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 381
            self.match(jacParser.DBL_COLON)
            self.state = 383
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,28,self._ctx)
            if la_ == 1:
                self.state = 382
                self.expr_list()


            self.state = 388
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [jacParser.DBL_COLON]:
                self.state = 385
                self.match(jacParser.DBL_COLON)
                pass
            elif token in [jacParser.COLON_OUT]:
                self.state = 386
                self.match(jacParser.COLON_OUT)
                self.state = 387
                self.expression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dotted_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self, i:int=None):
            if i is None:
                return self.getTokens(jacParser.NAME)
            else:
                return self.getToken(jacParser.NAME, i)

        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(jacParser.DOT)
            else:
                return self.getToken(jacParser.DOT, i)

        def getRuleIndex(self):
            return jacParser.RULE_dotted_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDotted_name" ):
                listener.enterDotted_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDotted_name" ):
                listener.exitDotted_name(self)




    def dotted_name(self):

        localctx = jacParser.Dotted_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_dotted_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 390
            self.match(jacParser.NAME)
            self.state = 395
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,30,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 391
                    self.match(jacParser.DOT)
                    self.state = 392
                    self.match(jacParser.NAME) 
                self.state = 397
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,30,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Name_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self, i:int=None):
            if i is None:
                return self.getTokens(jacParser.NAME)
            else:
                return self.getToken(jacParser.NAME, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(jacParser.COMMA)
            else:
                return self.getToken(jacParser.COMMA, i)

        def getRuleIndex(self):
            return jacParser.RULE_name_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterName_list" ):
                listener.enterName_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitName_list" ):
                listener.exitName_list(self)




    def name_list(self):

        localctx = jacParser.Name_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_name_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 398
            self.match(jacParser.NAME)
            self.state = 403
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==jacParser.COMMA:
                self.state = 399
                self.match(jacParser.COMMA)
                self.state = 400
                self.match(jacParser.NAME)
                self.state = 405
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Expr_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(jacParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(jacParser.ExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(jacParser.COMMA)
            else:
                return self.getToken(jacParser.COMMA, i)

        def getRuleIndex(self):
            return jacParser.RULE_expr_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpr_list" ):
                listener.enterExpr_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpr_list" ):
                listener.exitExpr_list(self)




    def expr_list(self):

        localctx = jacParser.Expr_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_expr_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 406
            self.expression()
            self.state = 411
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==jacParser.COMMA:
                self.state = 407
                self.match(jacParser.COMMA)
                self.state = 408
                self.expression()
                self.state = 413
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Code_blockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(jacParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(jacParser.RBRACE, 0)

        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(jacParser.StatementContext)
            else:
                return self.getTypedRuleContext(jacParser.StatementContext,i)


        def COLON(self):
            return self.getToken(jacParser.COLON, 0)

        def getRuleIndex(self):
            return jacParser.RULE_code_block

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCode_block" ):
                listener.enterCode_block(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCode_block" ):
                listener.exitCode_block(self)




    def code_block(self):

        localctx = jacParser.Code_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_code_block)
        self._la = 0 # Token type
        try:
            self.state = 424
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [jacParser.LBRACE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 414
                self.match(jacParser.LBRACE)
                self.state = 418
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << jacParser.T__1) | (1 << jacParser.T__2) | (1 << jacParser.T__4) | (1 << jacParser.T__5) | (1 << jacParser.T__6) | (1 << jacParser.TYP_STRING) | (1 << jacParser.TYP_INT) | (1 << jacParser.TYP_FLOAT) | (1 << jacParser.TYP_LIST) | (1 << jacParser.TYP_DICT) | (1 << jacParser.TYP_BOOL) | (1 << jacParser.KW_TYPE) | (1 << jacParser.KW_NODE) | (1 << jacParser.KW_IGNORE) | (1 << jacParser.KW_TAKE) | (1 << jacParser.KW_SPAWN) | (1 << jacParser.COLON) | (1 << jacParser.DBL_COLON) | (1 << jacParser.LBRACE) | (1 << jacParser.KW_EDGE) | (1 << jacParser.KW_IF) | (1 << jacParser.KW_FOR) | (1 << jacParser.KW_WHILE) | (1 << jacParser.KW_CONTINUE) | (1 << jacParser.KW_BREAK) | (1 << jacParser.KW_DISENGAGE) | (1 << jacParser.KW_SKIP) | (1 << jacParser.KW_REPORT) | (1 << jacParser.KW_DESTROY) | (1 << jacParser.NOT))) != 0) or ((((_la - 76)) & ~0x3f) == 0 and ((1 << (_la - 76)) & ((1 << (jacParser.PLUS - 76)) | (1 << (jacParser.MINUS - 76)) | (1 << (jacParser.MUL - 76)) | (1 << (jacParser.LPAREN - 76)) | (1 << (jacParser.LSQUARE - 76)) | (1 << (jacParser.FLOAT - 76)) | (1 << (jacParser.STRING - 76)) | (1 << (jacParser.BOOL - 76)) | (1 << (jacParser.INT - 76)) | (1 << (jacParser.NULL - 76)) | (1 << (jacParser.NAME - 76)))) != 0):
                    self.state = 415
                    self.statement()
                    self.state = 420
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 421
                self.match(jacParser.RBRACE)
                pass
            elif token in [jacParser.COLON]:
                self.enterOuterAlt(localctx, 2)
                self.state = 422
                self.match(jacParser.COLON)
                self.state = 423
                self.statement()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Node_ctx_blockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def name_list(self):
            return self.getTypedRuleContext(jacParser.Name_listContext,0)


        def code_block(self):
            return self.getTypedRuleContext(jacParser.Code_blockContext,0)


        def getRuleIndex(self):
            return jacParser.RULE_node_ctx_block

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNode_ctx_block" ):
                listener.enterNode_ctx_block(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNode_ctx_block" ):
                listener.exitNode_ctx_block(self)




    def node_ctx_block(self):

        localctx = jacParser.Node_ctx_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_node_ctx_block)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 426
            self.name_list()
            self.state = 427
            self.code_block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def code_block(self):
            return self.getTypedRuleContext(jacParser.Code_blockContext,0)


        def node_ctx_block(self):
            return self.getTypedRuleContext(jacParser.Node_ctx_blockContext,0)


        def expression(self):
            return self.getTypedRuleContext(jacParser.ExpressionContext,0)


        def SEMI(self):
            return self.getToken(jacParser.SEMI, 0)

        def if_stmt(self):
            return self.getTypedRuleContext(jacParser.If_stmtContext,0)


        def for_stmt(self):
            return self.getTypedRuleContext(jacParser.For_stmtContext,0)


        def while_stmt(self):
            return self.getTypedRuleContext(jacParser.While_stmtContext,0)


        def ctrl_stmt(self):
            return self.getTypedRuleContext(jacParser.Ctrl_stmtContext,0)


        def report_action(self):
            return self.getTypedRuleContext(jacParser.Report_actionContext,0)


        def walker_action(self):
            return self.getTypedRuleContext(jacParser.Walker_actionContext,0)


        def getRuleIndex(self):
            return jacParser.RULE_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatement" ):
                listener.enterStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatement" ):
                listener.exitStatement(self)




    def statement(self):

        localctx = jacParser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_statement)
        try:
            self.state = 442
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,35,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 429
                self.code_block()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 430
                self.node_ctx_block()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 431
                self.expression()
                self.state = 432
                self.match(jacParser.SEMI)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 434
                self.if_stmt()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 435
                self.for_stmt()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 436
                self.while_stmt()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 437
                self.ctrl_stmt()
                self.state = 438
                self.match(jacParser.SEMI)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 440
                self.report_action()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 441
                self.walker_action()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class If_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_IF(self):
            return self.getToken(jacParser.KW_IF, 0)

        def expression(self):
            return self.getTypedRuleContext(jacParser.ExpressionContext,0)


        def code_block(self):
            return self.getTypedRuleContext(jacParser.Code_blockContext,0)


        def elif_stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(jacParser.Elif_stmtContext)
            else:
                return self.getTypedRuleContext(jacParser.Elif_stmtContext,i)


        def else_stmt(self):
            return self.getTypedRuleContext(jacParser.Else_stmtContext,0)


        def getRuleIndex(self):
            return jacParser.RULE_if_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIf_stmt" ):
                listener.enterIf_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIf_stmt" ):
                listener.exitIf_stmt(self)




    def if_stmt(self):

        localctx = jacParser.If_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_if_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 444
            self.match(jacParser.KW_IF)
            self.state = 445
            self.expression()
            self.state = 446
            self.code_block()
            self.state = 450
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,36,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 447
                    self.elif_stmt() 
                self.state = 452
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,36,self._ctx)

            self.state = 454
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,37,self._ctx)
            if la_ == 1:
                self.state = 453
                self.else_stmt()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Elif_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_ELIF(self):
            return self.getToken(jacParser.KW_ELIF, 0)

        def expression(self):
            return self.getTypedRuleContext(jacParser.ExpressionContext,0)


        def code_block(self):
            return self.getTypedRuleContext(jacParser.Code_blockContext,0)


        def getRuleIndex(self):
            return jacParser.RULE_elif_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElif_stmt" ):
                listener.enterElif_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElif_stmt" ):
                listener.exitElif_stmt(self)




    def elif_stmt(self):

        localctx = jacParser.Elif_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_elif_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 456
            self.match(jacParser.KW_ELIF)
            self.state = 457
            self.expression()
            self.state = 458
            self.code_block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Else_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_ELSE(self):
            return self.getToken(jacParser.KW_ELSE, 0)

        def code_block(self):
            return self.getTypedRuleContext(jacParser.Code_blockContext,0)


        def getRuleIndex(self):
            return jacParser.RULE_else_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElse_stmt" ):
                listener.enterElse_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElse_stmt" ):
                listener.exitElse_stmt(self)




    def else_stmt(self):

        localctx = jacParser.Else_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_else_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 460
            self.match(jacParser.KW_ELSE)
            self.state = 461
            self.code_block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class For_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_FOR(self):
            return self.getToken(jacParser.KW_FOR, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(jacParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(jacParser.ExpressionContext,i)


        def KW_TO(self):
            return self.getToken(jacParser.KW_TO, 0)

        def KW_BY(self):
            return self.getToken(jacParser.KW_BY, 0)

        def code_block(self):
            return self.getTypedRuleContext(jacParser.Code_blockContext,0)


        def NAME(self):
            return self.getToken(jacParser.NAME, 0)

        def KW_IN(self):
            return self.getToken(jacParser.KW_IN, 0)

        def getRuleIndex(self):
            return jacParser.RULE_for_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFor_stmt" ):
                listener.enterFor_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFor_stmt" ):
                listener.exitFor_stmt(self)




    def for_stmt(self):

        localctx = jacParser.For_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_for_stmt)
        try:
            self.state = 477
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,38,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 463
                self.match(jacParser.KW_FOR)
                self.state = 464
                self.expression()
                self.state = 465
                self.match(jacParser.KW_TO)
                self.state = 466
                self.expression()
                self.state = 467
                self.match(jacParser.KW_BY)
                self.state = 468
                self.expression()
                self.state = 469
                self.code_block()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 471
                self.match(jacParser.KW_FOR)
                self.state = 472
                self.match(jacParser.NAME)
                self.state = 473
                self.match(jacParser.KW_IN)
                self.state = 474
                self.expression()
                self.state = 475
                self.code_block()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class While_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_WHILE(self):
            return self.getToken(jacParser.KW_WHILE, 0)

        def expression(self):
            return self.getTypedRuleContext(jacParser.ExpressionContext,0)


        def code_block(self):
            return self.getTypedRuleContext(jacParser.Code_blockContext,0)


        def getRuleIndex(self):
            return jacParser.RULE_while_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhile_stmt" ):
                listener.enterWhile_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhile_stmt" ):
                listener.exitWhile_stmt(self)




    def while_stmt(self):

        localctx = jacParser.While_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_while_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 479
            self.match(jacParser.KW_WHILE)
            self.state = 480
            self.expression()
            self.state = 481
            self.code_block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Ctrl_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_CONTINUE(self):
            return self.getToken(jacParser.KW_CONTINUE, 0)

        def KW_BREAK(self):
            return self.getToken(jacParser.KW_BREAK, 0)

        def KW_SKIP(self):
            return self.getToken(jacParser.KW_SKIP, 0)

        def getRuleIndex(self):
            return jacParser.RULE_ctrl_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCtrl_stmt" ):
                listener.enterCtrl_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCtrl_stmt" ):
                listener.exitCtrl_stmt(self)




    def ctrl_stmt(self):

        localctx = jacParser.Ctrl_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_ctrl_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 483
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << jacParser.KW_CONTINUE) | (1 << jacParser.KW_BREAK) | (1 << jacParser.KW_SKIP))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Report_actionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_REPORT(self):
            return self.getToken(jacParser.KW_REPORT, 0)

        def expression(self):
            return self.getTypedRuleContext(jacParser.ExpressionContext,0)


        def SEMI(self):
            return self.getToken(jacParser.SEMI, 0)

        def getRuleIndex(self):
            return jacParser.RULE_report_action

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReport_action" ):
                listener.enterReport_action(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReport_action" ):
                listener.exitReport_action(self)




    def report_action(self):

        localctx = jacParser.Report_actionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_report_action)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 485
            self.match(jacParser.KW_REPORT)
            self.state = 486
            self.expression()
            self.state = 487
            self.match(jacParser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Walker_actionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ignore_action(self):
            return self.getTypedRuleContext(jacParser.Ignore_actionContext,0)


        def take_action(self):
            return self.getTypedRuleContext(jacParser.Take_actionContext,0)


        def destroy_action(self):
            return self.getTypedRuleContext(jacParser.Destroy_actionContext,0)


        def KW_DISENGAGE(self):
            return self.getToken(jacParser.KW_DISENGAGE, 0)

        def SEMI(self):
            return self.getToken(jacParser.SEMI, 0)

        def getRuleIndex(self):
            return jacParser.RULE_walker_action

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWalker_action" ):
                listener.enterWalker_action(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWalker_action" ):
                listener.exitWalker_action(self)




    def walker_action(self):

        localctx = jacParser.Walker_actionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_walker_action)
        try:
            self.state = 494
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [jacParser.KW_IGNORE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 489
                self.ignore_action()
                pass
            elif token in [jacParser.KW_TAKE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 490
                self.take_action()
                pass
            elif token in [jacParser.KW_DESTROY]:
                self.enterOuterAlt(localctx, 3)
                self.state = 491
                self.destroy_action()
                pass
            elif token in [jacParser.KW_DISENGAGE]:
                self.enterOuterAlt(localctx, 4)
                self.state = 492
                self.match(jacParser.KW_DISENGAGE)
                self.state = 493
                self.match(jacParser.SEMI)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Ignore_actionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_IGNORE(self):
            return self.getToken(jacParser.KW_IGNORE, 0)

        def expression(self):
            return self.getTypedRuleContext(jacParser.ExpressionContext,0)


        def SEMI(self):
            return self.getToken(jacParser.SEMI, 0)

        def getRuleIndex(self):
            return jacParser.RULE_ignore_action

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIgnore_action" ):
                listener.enterIgnore_action(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIgnore_action" ):
                listener.exitIgnore_action(self)




    def ignore_action(self):

        localctx = jacParser.Ignore_actionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_ignore_action)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 496
            self.match(jacParser.KW_IGNORE)
            self.state = 497
            self.expression()
            self.state = 498
            self.match(jacParser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Take_actionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_TAKE(self):
            return self.getToken(jacParser.KW_TAKE, 0)

        def expression(self):
            return self.getTypedRuleContext(jacParser.ExpressionContext,0)


        def SEMI(self):
            return self.getToken(jacParser.SEMI, 0)

        def else_stmt(self):
            return self.getTypedRuleContext(jacParser.Else_stmtContext,0)


        def getRuleIndex(self):
            return jacParser.RULE_take_action

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTake_action" ):
                listener.enterTake_action(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTake_action" ):
                listener.exitTake_action(self)




    def take_action(self):

        localctx = jacParser.Take_actionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_take_action)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 500
            self.match(jacParser.KW_TAKE)
            self.state = 501
            self.expression()
            self.state = 504
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [jacParser.SEMI]:
                self.state = 502
                self.match(jacParser.SEMI)
                pass
            elif token in [jacParser.KW_ELSE]:
                self.state = 503
                self.else_stmt()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Destroy_actionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_DESTROY(self):
            return self.getToken(jacParser.KW_DESTROY, 0)

        def expression(self):
            return self.getTypedRuleContext(jacParser.ExpressionContext,0)


        def SEMI(self):
            return self.getToken(jacParser.SEMI, 0)

        def getRuleIndex(self):
            return jacParser.RULE_destroy_action

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDestroy_action" ):
                listener.enterDestroy_action(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDestroy_action" ):
                listener.exitDestroy_action(self)




    def destroy_action(self):

        localctx = jacParser.Destroy_actionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_destroy_action)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 506
            self.match(jacParser.KW_DESTROY)
            self.state = 507
            self.expression()
            self.state = 508
            self.match(jacParser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def connect(self):
            return self.getTypedRuleContext(jacParser.ConnectContext,0)


        def assignment(self):
            return self.getTypedRuleContext(jacParser.AssignmentContext,0)


        def copy_assign(self):
            return self.getTypedRuleContext(jacParser.Copy_assignContext,0)


        def inc_assign(self):
            return self.getTypedRuleContext(jacParser.Inc_assignContext,0)


        def getRuleIndex(self):
            return jacParser.RULE_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression" ):
                listener.enterExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression" ):
                listener.exitExpression(self)




    def expression(self):

        localctx = jacParser.ExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 510
            self.connect()
            self.state = 514
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,41,self._ctx)
            if la_ == 1:
                self.state = 511
                self.assignment()

            elif la_ == 2:
                self.state = 512
                self.copy_assign()

            elif la_ == 3:
                self.state = 513
                self.inc_assign()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssignmentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EQ(self):
            return self.getToken(jacParser.EQ, 0)

        def expression(self):
            return self.getTypedRuleContext(jacParser.ExpressionContext,0)


        def getRuleIndex(self):
            return jacParser.RULE_assignment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignment" ):
                listener.enterAssignment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignment" ):
                listener.exitAssignment(self)




    def assignment(self):

        localctx = jacParser.AssignmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_assignment)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 516
            self.match(jacParser.EQ)
            self.state = 517
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Copy_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CPY_EQ(self):
            return self.getToken(jacParser.CPY_EQ, 0)

        def expression(self):
            return self.getTypedRuleContext(jacParser.ExpressionContext,0)


        def getRuleIndex(self):
            return jacParser.RULE_copy_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCopy_assign" ):
                listener.enterCopy_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCopy_assign" ):
                listener.exitCopy_assign(self)




    def copy_assign(self):

        localctx = jacParser.Copy_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_copy_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 519
            self.match(jacParser.CPY_EQ)
            self.state = 520
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Inc_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(jacParser.ExpressionContext,0)


        def PEQ(self):
            return self.getToken(jacParser.PEQ, 0)

        def MEQ(self):
            return self.getToken(jacParser.MEQ, 0)

        def TEQ(self):
            return self.getToken(jacParser.TEQ, 0)

        def DEQ(self):
            return self.getToken(jacParser.DEQ, 0)

        def getRuleIndex(self):
            return jacParser.RULE_inc_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInc_assign" ):
                listener.enterInc_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInc_assign" ):
                listener.exitInc_assign(self)




    def inc_assign(self):

        localctx = jacParser.Inc_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_inc_assign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 522
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << jacParser.PEQ) | (1 << jacParser.MEQ) | (1 << jacParser.TEQ) | (1 << jacParser.DEQ))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 523
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConnectContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def logical(self):
            return self.getTypedRuleContext(jacParser.LogicalContext,0)


        def edge_ref(self):
            return self.getTypedRuleContext(jacParser.Edge_refContext,0)


        def expression(self):
            return self.getTypedRuleContext(jacParser.ExpressionContext,0)


        def NOT(self):
            return self.getToken(jacParser.NOT, 0)

        def getRuleIndex(self):
            return jacParser.RULE_connect

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConnect" ):
                listener.enterConnect(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConnect" ):
                listener.exitConnect(self)




    def connect(self):

        localctx = jacParser.ConnectContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_connect)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 525
            self.logical()
            self.state = 532
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,43,self._ctx)
            if la_ == 1:
                self.state = 527
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==jacParser.NOT:
                    self.state = 526
                    self.match(jacParser.NOT)


                self.state = 529
                self.edge_ref()
                self.state = 530
                self.expression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LogicalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def compare(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(jacParser.CompareContext)
            else:
                return self.getTypedRuleContext(jacParser.CompareContext,i)


        def KW_AND(self, i:int=None):
            if i is None:
                return self.getTokens(jacParser.KW_AND)
            else:
                return self.getToken(jacParser.KW_AND, i)

        def KW_OR(self, i:int=None):
            if i is None:
                return self.getTokens(jacParser.KW_OR)
            else:
                return self.getToken(jacParser.KW_OR, i)

        def getRuleIndex(self):
            return jacParser.RULE_logical

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogical" ):
                listener.enterLogical(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogical" ):
                listener.exitLogical(self)




    def logical(self):

        localctx = jacParser.LogicalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_logical)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 534
            self.compare()
            self.state = 539
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,44,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 535
                    _la = self._input.LA(1)
                    if not(_la==jacParser.KW_AND or _la==jacParser.KW_OR):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 536
                    self.compare() 
                self.state = 541
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,44,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CompareContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NOT(self):
            return self.getToken(jacParser.NOT, 0)

        def compare(self):
            return self.getTypedRuleContext(jacParser.CompareContext,0)


        def arithmetic(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(jacParser.ArithmeticContext)
            else:
                return self.getTypedRuleContext(jacParser.ArithmeticContext,i)


        def cmp_op(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(jacParser.Cmp_opContext)
            else:
                return self.getTypedRuleContext(jacParser.Cmp_opContext,i)


        def getRuleIndex(self):
            return jacParser.RULE_compare

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompare" ):
                listener.enterCompare(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompare" ):
                listener.exitCompare(self)




    def compare(self):

        localctx = jacParser.CompareContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_compare)
        try:
            self.state = 553
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [jacParser.NOT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 542
                self.match(jacParser.NOT)
                self.state = 543
                self.compare()
                pass
            elif token in [jacParser.T__1, jacParser.T__2, jacParser.T__4, jacParser.T__5, jacParser.T__6, jacParser.TYP_STRING, jacParser.TYP_INT, jacParser.TYP_FLOAT, jacParser.TYP_LIST, jacParser.TYP_DICT, jacParser.TYP_BOOL, jacParser.KW_TYPE, jacParser.KW_NODE, jacParser.KW_SPAWN, jacParser.DBL_COLON, jacParser.LBRACE, jacParser.KW_EDGE, jacParser.PLUS, jacParser.MINUS, jacParser.MUL, jacParser.LPAREN, jacParser.LSQUARE, jacParser.FLOAT, jacParser.STRING, jacParser.BOOL, jacParser.INT, jacParser.NULL, jacParser.NAME]:
                self.enterOuterAlt(localctx, 2)
                self.state = 544
                self.arithmetic()
                self.state = 550
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,45,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 545
                        self.cmp_op()
                        self.state = 546
                        self.arithmetic() 
                    self.state = 552
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,45,self._ctx)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Cmp_opContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EE(self):
            return self.getToken(jacParser.EE, 0)

        def LT(self):
            return self.getToken(jacParser.LT, 0)

        def GT(self):
            return self.getToken(jacParser.GT, 0)

        def LTE(self):
            return self.getToken(jacParser.LTE, 0)

        def GTE(self):
            return self.getToken(jacParser.GTE, 0)

        def NE(self):
            return self.getToken(jacParser.NE, 0)

        def KW_IN(self):
            return self.getToken(jacParser.KW_IN, 0)

        def nin(self):
            return self.getTypedRuleContext(jacParser.NinContext,0)


        def getRuleIndex(self):
            return jacParser.RULE_cmp_op

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCmp_op" ):
                listener.enterCmp_op(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCmp_op" ):
                listener.exitCmp_op(self)




    def cmp_op(self):

        localctx = jacParser.Cmp_opContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_cmp_op)
        try:
            self.state = 563
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [jacParser.EE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 555
                self.match(jacParser.EE)
                pass
            elif token in [jacParser.LT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 556
                self.match(jacParser.LT)
                pass
            elif token in [jacParser.GT]:
                self.enterOuterAlt(localctx, 3)
                self.state = 557
                self.match(jacParser.GT)
                pass
            elif token in [jacParser.LTE]:
                self.enterOuterAlt(localctx, 4)
                self.state = 558
                self.match(jacParser.LTE)
                pass
            elif token in [jacParser.GTE]:
                self.enterOuterAlt(localctx, 5)
                self.state = 559
                self.match(jacParser.GTE)
                pass
            elif token in [jacParser.NE]:
                self.enterOuterAlt(localctx, 6)
                self.state = 560
                self.match(jacParser.NE)
                pass
            elif token in [jacParser.KW_IN]:
                self.enterOuterAlt(localctx, 7)
                self.state = 561
                self.match(jacParser.KW_IN)
                pass
            elif token in [jacParser.NOT]:
                self.enterOuterAlt(localctx, 8)
                self.state = 562
                self.nin()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NinContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NOT(self):
            return self.getToken(jacParser.NOT, 0)

        def KW_IN(self):
            return self.getToken(jacParser.KW_IN, 0)

        def getRuleIndex(self):
            return jacParser.RULE_nin

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNin" ):
                listener.enterNin(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNin" ):
                listener.exitNin(self)




    def nin(self):

        localctx = jacParser.NinContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_nin)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 565
            self.match(jacParser.NOT)
            self.state = 566
            self.match(jacParser.KW_IN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArithmeticContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def term(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(jacParser.TermContext)
            else:
                return self.getTypedRuleContext(jacParser.TermContext,i)


        def PLUS(self, i:int=None):
            if i is None:
                return self.getTokens(jacParser.PLUS)
            else:
                return self.getToken(jacParser.PLUS, i)

        def MINUS(self, i:int=None):
            if i is None:
                return self.getTokens(jacParser.MINUS)
            else:
                return self.getToken(jacParser.MINUS, i)

        def getRuleIndex(self):
            return jacParser.RULE_arithmetic

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArithmetic" ):
                listener.enterArithmetic(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArithmetic" ):
                listener.exitArithmetic(self)




    def arithmetic(self):

        localctx = jacParser.ArithmeticContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_arithmetic)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 568
            self.term()
            self.state = 573
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,48,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 569
                    _la = self._input.LA(1)
                    if not(_la==jacParser.PLUS or _la==jacParser.MINUS):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 570
                    self.term() 
                self.state = 575
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,48,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TermContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def factor(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(jacParser.FactorContext)
            else:
                return self.getTypedRuleContext(jacParser.FactorContext,i)


        def MUL(self, i:int=None):
            if i is None:
                return self.getTokens(jacParser.MUL)
            else:
                return self.getToken(jacParser.MUL, i)

        def DIV(self, i:int=None):
            if i is None:
                return self.getTokens(jacParser.DIV)
            else:
                return self.getToken(jacParser.DIV, i)

        def MOD(self, i:int=None):
            if i is None:
                return self.getTokens(jacParser.MOD)
            else:
                return self.getToken(jacParser.MOD, i)

        def getRuleIndex(self):
            return jacParser.RULE_term

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTerm" ):
                listener.enterTerm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTerm" ):
                listener.exitTerm(self)




    def term(self):

        localctx = jacParser.TermContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_term)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 576
            self.factor()
            self.state = 581
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,49,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 577
                    _la = self._input.LA(1)
                    if not(((((_la - 78)) & ~0x3f) == 0 and ((1 << (_la - 78)) & ((1 << (jacParser.MUL - 78)) | (1 << (jacParser.DIV - 78)) | (1 << (jacParser.MOD - 78)))) != 0)):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 578
                    self.factor() 
                self.state = 583
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,49,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FactorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def factor(self):
            return self.getTypedRuleContext(jacParser.FactorContext,0)


        def PLUS(self):
            return self.getToken(jacParser.PLUS, 0)

        def MINUS(self):
            return self.getToken(jacParser.MINUS, 0)

        def power(self):
            return self.getTypedRuleContext(jacParser.PowerContext,0)


        def getRuleIndex(self):
            return jacParser.RULE_factor

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFactor" ):
                listener.enterFactor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFactor" ):
                listener.exitFactor(self)




    def factor(self):

        localctx = jacParser.FactorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_factor)
        self._la = 0 # Token type
        try:
            self.state = 587
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,50,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 584
                _la = self._input.LA(1)
                if not(_la==jacParser.PLUS or _la==jacParser.MINUS):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 585
                self.factor()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 586
                self.power()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PowerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def func_call(self):
            return self.getTypedRuleContext(jacParser.Func_callContext,0)


        def POW(self, i:int=None):
            if i is None:
                return self.getTokens(jacParser.POW)
            else:
                return self.getToken(jacParser.POW, i)

        def factor(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(jacParser.FactorContext)
            else:
                return self.getTypedRuleContext(jacParser.FactorContext,i)


        def getRuleIndex(self):
            return jacParser.RULE_power

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPower" ):
                listener.enterPower(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPower" ):
                listener.exitPower(self)




    def power(self):

        localctx = jacParser.PowerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_power)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 589
            self.func_call()
            self.state = 594
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,51,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 590
                    self.match(jacParser.POW)
                    self.state = 591
                    self.factor() 
                self.state = 596
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,51,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Func_callContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def atom(self):
            return self.getTypedRuleContext(jacParser.AtomContext,0)


        def LPAREN(self):
            return self.getToken(jacParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(jacParser.RPAREN, 0)

        def expr_list(self):
            return self.getTypedRuleContext(jacParser.Expr_listContext,0)


        def DBL_COLON(self):
            return self.getToken(jacParser.DBL_COLON, 0)

        def NAME(self):
            return self.getToken(jacParser.NAME, 0)

        def spawn_ctx(self):
            return self.getTypedRuleContext(jacParser.Spawn_ctxContext,0)


        def getRuleIndex(self):
            return jacParser.RULE_func_call

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunc_call" ):
                listener.enterFunc_call(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunc_call" ):
                listener.exitFunc_call(self)




    def func_call(self):

        localctx = jacParser.Func_callContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_func_call)
        self._la = 0 # Token type
        try:
            self.state = 613
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,56,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 597
                self.atom(0)
                self.state = 603
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,53,self._ctx)
                if la_ == 1:
                    self.state = 598
                    self.match(jacParser.LPAREN)
                    self.state = 600
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << jacParser.T__1) | (1 << jacParser.T__2) | (1 << jacParser.T__4) | (1 << jacParser.T__5) | (1 << jacParser.T__6) | (1 << jacParser.TYP_STRING) | (1 << jacParser.TYP_INT) | (1 << jacParser.TYP_FLOAT) | (1 << jacParser.TYP_LIST) | (1 << jacParser.TYP_DICT) | (1 << jacParser.TYP_BOOL) | (1 << jacParser.KW_TYPE) | (1 << jacParser.KW_NODE) | (1 << jacParser.KW_SPAWN) | (1 << jacParser.DBL_COLON) | (1 << jacParser.LBRACE) | (1 << jacParser.KW_EDGE) | (1 << jacParser.NOT))) != 0) or ((((_la - 76)) & ~0x3f) == 0 and ((1 << (_la - 76)) & ((1 << (jacParser.PLUS - 76)) | (1 << (jacParser.MINUS - 76)) | (1 << (jacParser.MUL - 76)) | (1 << (jacParser.LPAREN - 76)) | (1 << (jacParser.LSQUARE - 76)) | (1 << (jacParser.FLOAT - 76)) | (1 << (jacParser.STRING - 76)) | (1 << (jacParser.BOOL - 76)) | (1 << (jacParser.INT - 76)) | (1 << (jacParser.NULL - 76)) | (1 << (jacParser.NAME - 76)))) != 0):
                        self.state = 599
                        self.expr_list()


                    self.state = 602
                    self.match(jacParser.RPAREN)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 606
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << jacParser.T__1) | (1 << jacParser.T__2) | (1 << jacParser.T__4) | (1 << jacParser.T__5) | (1 << jacParser.T__6) | (1 << jacParser.TYP_STRING) | (1 << jacParser.TYP_INT) | (1 << jacParser.TYP_FLOAT) | (1 << jacParser.TYP_LIST) | (1 << jacParser.TYP_DICT) | (1 << jacParser.TYP_BOOL) | (1 << jacParser.KW_TYPE) | (1 << jacParser.KW_NODE) | (1 << jacParser.KW_SPAWN) | (1 << jacParser.LBRACE) | (1 << jacParser.KW_EDGE))) != 0) or ((((_la - 77)) & ~0x3f) == 0 and ((1 << (_la - 77)) & ((1 << (jacParser.MINUS - 77)) | (1 << (jacParser.MUL - 77)) | (1 << (jacParser.LPAREN - 77)) | (1 << (jacParser.LSQUARE - 77)) | (1 << (jacParser.FLOAT - 77)) | (1 << (jacParser.STRING - 77)) | (1 << (jacParser.BOOL - 77)) | (1 << (jacParser.INT - 77)) | (1 << (jacParser.NULL - 77)) | (1 << (jacParser.NAME - 77)))) != 0):
                    self.state = 605
                    self.atom(0)


                self.state = 608
                self.match(jacParser.DBL_COLON)
                self.state = 609
                self.match(jacParser.NAME)
                self.state = 611
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,55,self._ctx)
                if la_ == 1:
                    self.state = 610
                    self.spawn_ctx()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AtomContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INT(self):
            return self.getToken(jacParser.INT, 0)

        def FLOAT(self):
            return self.getToken(jacParser.FLOAT, 0)

        def STRING(self):
            return self.getToken(jacParser.STRING, 0)

        def BOOL(self):
            return self.getToken(jacParser.BOOL, 0)

        def NULL(self):
            return self.getToken(jacParser.NULL, 0)

        def node_edge_ref(self):
            return self.getTypedRuleContext(jacParser.Node_edge_refContext,0)


        def list_val(self):
            return self.getTypedRuleContext(jacParser.List_valContext,0)


        def dict_val(self):
            return self.getTypedRuleContext(jacParser.Dict_valContext,0)


        def dotted_name(self):
            return self.getTypedRuleContext(jacParser.Dotted_nameContext,0)


        def LPAREN(self):
            return self.getToken(jacParser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(jacParser.ExpressionContext,0)


        def RPAREN(self):
            return self.getToken(jacParser.RPAREN, 0)

        def spawn(self):
            return self.getTypedRuleContext(jacParser.SpawnContext,0)


        def ref(self):
            return self.getTypedRuleContext(jacParser.RefContext,0)


        def deref(self):
            return self.getTypedRuleContext(jacParser.DerefContext,0)


        def any_type(self):
            return self.getTypedRuleContext(jacParser.Any_typeContext,0)


        def atom(self):
            return self.getTypedRuleContext(jacParser.AtomContext,0)


        def DOT(self):
            return self.getToken(jacParser.DOT, 0)

        def built_in(self):
            return self.getTypedRuleContext(jacParser.Built_inContext,0)


        def index(self):
            return self.getTypedRuleContext(jacParser.IndexContext,0)


        def index_range(self):
            return self.getTypedRuleContext(jacParser.Index_rangeContext,0)


        def getRuleIndex(self):
            return jacParser.RULE_atom

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAtom" ):
                listener.enterAtom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAtom" ):
                listener.exitAtom(self)



    def atom(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = jacParser.AtomContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 102
        self.enterRecursionRule(localctx, 102, self.RULE_atom, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 633
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,57,self._ctx)
            if la_ == 1:
                self.state = 616
                self.match(jacParser.INT)
                pass

            elif la_ == 2:
                self.state = 617
                self.match(jacParser.FLOAT)
                pass

            elif la_ == 3:
                self.state = 618
                self.match(jacParser.STRING)
                pass

            elif la_ == 4:
                self.state = 619
                self.match(jacParser.BOOL)
                pass

            elif la_ == 5:
                self.state = 620
                self.match(jacParser.NULL)
                pass

            elif la_ == 6:
                self.state = 621
                self.node_edge_ref()
                pass

            elif la_ == 7:
                self.state = 622
                self.list_val()
                pass

            elif la_ == 8:
                self.state = 623
                self.dict_val()
                pass

            elif la_ == 9:
                self.state = 624
                self.dotted_name()
                pass

            elif la_ == 10:
                self.state = 625
                self.match(jacParser.LPAREN)
                self.state = 626
                self.expression()
                self.state = 627
                self.match(jacParser.RPAREN)
                pass

            elif la_ == 11:
                self.state = 629
                self.spawn()
                pass

            elif la_ == 12:
                self.state = 630
                self.ref()
                pass

            elif la_ == 13:
                self.state = 631
                self.deref()
                pass

            elif la_ == 14:
                self.state = 632
                self.any_type()
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 644
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,59,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 642
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,58,self._ctx)
                    if la_ == 1:
                        localctx = jacParser.AtomContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_atom)
                        self.state = 635
                        if not self.precpred(self._ctx, 6):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 6)")
                        self.state = 636
                        self.match(jacParser.DOT)
                        self.state = 637
                        self.built_in()
                        pass

                    elif la_ == 2:
                        localctx = jacParser.AtomContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_atom)
                        self.state = 638
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 639
                        self.index()
                        pass

                    elif la_ == 3:
                        localctx = jacParser.AtomContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_atom)
                        self.state = 640
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 641
                        self.index_range()
                        pass

             
                self.state = 646
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,59,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class RefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(jacParser.ExpressionContext,0)


        def getRuleIndex(self):
            return jacParser.RULE_ref

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRef" ):
                listener.enterRef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRef" ):
                listener.exitRef(self)




    def ref(self):

        localctx = jacParser.RefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_ref)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 647
            self.match(jacParser.T__1)
            self.state = 648
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DerefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MUL(self):
            return self.getToken(jacParser.MUL, 0)

        def expression(self):
            return self.getTypedRuleContext(jacParser.ExpressionContext,0)


        def getRuleIndex(self):
            return jacParser.RULE_deref

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeref" ):
                listener.enterDeref(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeref" ):
                listener.exitDeref(self)




    def deref(self):

        localctx = jacParser.DerefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_deref)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 650
            self.match(jacParser.MUL)
            self.state = 651
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Built_inContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def cast_built_in(self):
            return self.getTypedRuleContext(jacParser.Cast_built_inContext,0)


        def obj_built_in(self):
            return self.getTypedRuleContext(jacParser.Obj_built_inContext,0)


        def dict_built_in(self):
            return self.getTypedRuleContext(jacParser.Dict_built_inContext,0)


        def list_built_in(self):
            return self.getTypedRuleContext(jacParser.List_built_inContext,0)


        def string_built_in(self):
            return self.getTypedRuleContext(jacParser.String_built_inContext,0)


        def getRuleIndex(self):
            return jacParser.RULE_built_in

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBuilt_in" ):
                listener.enterBuilt_in(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBuilt_in" ):
                listener.exitBuilt_in(self)




    def built_in(self):

        localctx = jacParser.Built_inContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_built_in)
        try:
            self.state = 658
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,60,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 653
                self.cast_built_in()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 654
                self.obj_built_in()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 655
                self.dict_built_in()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 656
                self.list_built_in()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 657
                self.string_built_in()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Cast_built_inContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_type(self):
            return self.getTypedRuleContext(jacParser.Any_typeContext,0)


        def getRuleIndex(self):
            return jacParser.RULE_cast_built_in

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCast_built_in" ):
                listener.enterCast_built_in(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCast_built_in" ):
                listener.exitCast_built_in(self)




    def cast_built_in(self):

        localctx = jacParser.Cast_built_inContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_cast_built_in)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 660
            self.any_type()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Obj_built_inContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_CONTEXT(self):
            return self.getToken(jacParser.KW_CONTEXT, 0)

        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(jacParser.COLON)
            else:
                return self.getToken(jacParser.COLON, i)

        def name_list(self):
            return self.getTypedRuleContext(jacParser.Name_listContext,0)


        def KW_INFO(self):
            return self.getToken(jacParser.KW_INFO, 0)

        def KW_DETAILS(self):
            return self.getToken(jacParser.KW_DETAILS, 0)

        def getRuleIndex(self):
            return jacParser.RULE_obj_built_in

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObj_built_in" ):
                listener.enterObj_built_in(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObj_built_in" ):
                listener.exitObj_built_in(self)




    def obj_built_in(self):

        localctx = jacParser.Obj_built_inContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_obj_built_in)
        try:
            self.state = 683
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [jacParser.KW_CONTEXT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 662
                self.match(jacParser.KW_CONTEXT)
                self.state = 667
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,61,self._ctx)
                if la_ == 1:
                    self.state = 663
                    self.match(jacParser.COLON)
                    self.state = 664
                    self.name_list()
                    self.state = 665
                    self.match(jacParser.COLON)


                pass
            elif token in [jacParser.KW_INFO]:
                self.enterOuterAlt(localctx, 2)
                self.state = 669
                self.match(jacParser.KW_INFO)
                self.state = 674
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,62,self._ctx)
                if la_ == 1:
                    self.state = 670
                    self.match(jacParser.COLON)
                    self.state = 671
                    self.name_list()
                    self.state = 672
                    self.match(jacParser.COLON)


                pass
            elif token in [jacParser.KW_DETAILS]:
                self.enterOuterAlt(localctx, 3)
                self.state = 676
                self.match(jacParser.KW_DETAILS)
                self.state = 681
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,63,self._ctx)
                if la_ == 1:
                    self.state = 677
                    self.match(jacParser.COLON)
                    self.state = 678
                    self.name_list()
                    self.state = 679
                    self.match(jacParser.COLON)


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dict_built_inContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_KEYS(self):
            return self.getToken(jacParser.KW_KEYS, 0)

        def getRuleIndex(self):
            return jacParser.RULE_dict_built_in

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDict_built_in" ):
                listener.enterDict_built_in(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDict_built_in" ):
                listener.exitDict_built_in(self)




    def dict_built_in(self):

        localctx = jacParser.Dict_built_inContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_dict_built_in)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 685
            self.match(jacParser.KW_KEYS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class List_built_inContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_LENGTH(self):
            return self.getToken(jacParser.KW_LENGTH, 0)

        def KW_DESTROY(self):
            return self.getToken(jacParser.KW_DESTROY, 0)

        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(jacParser.COLON)
            else:
                return self.getToken(jacParser.COLON, i)

        def expression(self):
            return self.getTypedRuleContext(jacParser.ExpressionContext,0)


        def getRuleIndex(self):
            return jacParser.RULE_list_built_in

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterList_built_in" ):
                listener.enterList_built_in(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitList_built_in" ):
                listener.exitList_built_in(self)




    def list_built_in(self):

        localctx = jacParser.List_built_inContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_list_built_in)
        try:
            self.state = 693
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [jacParser.KW_LENGTH]:
                self.enterOuterAlt(localctx, 1)
                self.state = 687
                self.match(jacParser.KW_LENGTH)
                pass
            elif token in [jacParser.KW_DESTROY]:
                self.enterOuterAlt(localctx, 2)
                self.state = 688
                self.match(jacParser.KW_DESTROY)
                self.state = 689
                self.match(jacParser.COLON)
                self.state = 690
                self.expression()
                self.state = 691
                self.match(jacParser.COLON)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class String_built_inContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TYP_STRING(self):
            return self.getToken(jacParser.TYP_STRING, 0)

        def DOT(self):
            return self.getToken(jacParser.DOT, 0)

        def NAME(self):
            return self.getToken(jacParser.NAME, 0)

        def LPAREN(self):
            return self.getToken(jacParser.LPAREN, 0)

        def expr_list(self):
            return self.getTypedRuleContext(jacParser.Expr_listContext,0)


        def RPAREN(self):
            return self.getToken(jacParser.RPAREN, 0)

        def getRuleIndex(self):
            return jacParser.RULE_string_built_in

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterString_built_in" ):
                listener.enterString_built_in(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitString_built_in" ):
                listener.exitString_built_in(self)




    def string_built_in(self):

        localctx = jacParser.String_built_inContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_string_built_in)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 695
            self.match(jacParser.TYP_STRING)
            self.state = 696
            self.match(jacParser.DOT)
            self.state = 697
            self.match(jacParser.NAME)
            self.state = 702
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,66,self._ctx)
            if la_ == 1:
                self.state = 698
                self.match(jacParser.LPAREN)
                self.state = 699
                self.expr_list()
                self.state = 700
                self.match(jacParser.RPAREN)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Node_edge_refContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def node_ref(self):
            return self.getTypedRuleContext(jacParser.Node_refContext,0)


        def filter_ctx(self):
            return self.getTypedRuleContext(jacParser.Filter_ctxContext,0)


        def edge_ref(self):
            return self.getTypedRuleContext(jacParser.Edge_refContext,0)


        def getRuleIndex(self):
            return jacParser.RULE_node_edge_ref

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNode_edge_ref" ):
                listener.enterNode_edge_ref(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNode_edge_ref" ):
                listener.exitNode_edge_ref(self)




    def node_edge_ref(self):

        localctx = jacParser.Node_edge_refContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_node_edge_ref)
        try:
            self.state = 715
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [jacParser.KW_NODE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 704
                self.node_ref()
                self.state = 706
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,67,self._ctx)
                if la_ == 1:
                    self.state = 705
                    self.filter_ctx()


                pass
            elif token in [jacParser.T__2, jacParser.T__4, jacParser.T__5, jacParser.T__6, jacParser.MINUS]:
                self.enterOuterAlt(localctx, 2)
                self.state = 708
                self.edge_ref()
                self.state = 713
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,69,self._ctx)
                if la_ == 1:
                    self.state = 709
                    self.node_ref()
                    self.state = 711
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,68,self._ctx)
                    if la_ == 1:
                        self.state = 710
                        self.filter_ctx()




                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Node_refContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_NODE(self):
            return self.getToken(jacParser.KW_NODE, 0)

        def DBL_COLON(self):
            return self.getToken(jacParser.DBL_COLON, 0)

        def NAME(self):
            return self.getToken(jacParser.NAME, 0)

        def getRuleIndex(self):
            return jacParser.RULE_node_ref

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNode_ref" ):
                listener.enterNode_ref(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNode_ref" ):
                listener.exitNode_ref(self)




    def node_ref(self):

        localctx = jacParser.Node_refContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_node_ref)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 717
            self.match(jacParser.KW_NODE)
            self.state = 718
            self.match(jacParser.DBL_COLON)
            self.state = 719
            self.match(jacParser.NAME)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Walker_refContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_WALKER(self):
            return self.getToken(jacParser.KW_WALKER, 0)

        def DBL_COLON(self):
            return self.getToken(jacParser.DBL_COLON, 0)

        def NAME(self):
            return self.getToken(jacParser.NAME, 0)

        def getRuleIndex(self):
            return jacParser.RULE_walker_ref

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWalker_ref" ):
                listener.enterWalker_ref(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWalker_ref" ):
                listener.exitWalker_ref(self)




    def walker_ref(self):

        localctx = jacParser.Walker_refContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_walker_ref)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 721
            self.match(jacParser.KW_WALKER)
            self.state = 722
            self.match(jacParser.DBL_COLON)
            self.state = 723
            self.match(jacParser.NAME)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Graph_refContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_GRAPH(self):
            return self.getToken(jacParser.KW_GRAPH, 0)

        def DBL_COLON(self):
            return self.getToken(jacParser.DBL_COLON, 0)

        def NAME(self):
            return self.getToken(jacParser.NAME, 0)

        def getRuleIndex(self):
            return jacParser.RULE_graph_ref

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGraph_ref" ):
                listener.enterGraph_ref(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGraph_ref" ):
                listener.exitGraph_ref(self)




    def graph_ref(self):

        localctx = jacParser.Graph_refContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_graph_ref)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 725
            self.match(jacParser.KW_GRAPH)
            self.state = 726
            self.match(jacParser.DBL_COLON)
            self.state = 727
            self.match(jacParser.NAME)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Edge_refContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def edge_to(self):
            return self.getTypedRuleContext(jacParser.Edge_toContext,0)


        def edge_from(self):
            return self.getTypedRuleContext(jacParser.Edge_fromContext,0)


        def edge_any(self):
            return self.getTypedRuleContext(jacParser.Edge_anyContext,0)


        def getRuleIndex(self):
            return jacParser.RULE_edge_ref

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEdge_ref" ):
                listener.enterEdge_ref(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEdge_ref" ):
                listener.exitEdge_ref(self)




    def edge_ref(self):

        localctx = jacParser.Edge_refContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_edge_ref)
        try:
            self.state = 732
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,71,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 729
                self.edge_to()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 730
                self.edge_from()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 731
                self.edge_any()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Edge_toContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MINUS(self):
            return self.getToken(jacParser.MINUS, 0)

        def LSQUARE(self):
            return self.getToken(jacParser.LSQUARE, 0)

        def NAME(self):
            return self.getToken(jacParser.NAME, 0)

        def RSQUARE(self):
            return self.getToken(jacParser.RSQUARE, 0)

        def spawn_ctx(self):
            return self.getTypedRuleContext(jacParser.Spawn_ctxContext,0)


        def filter_ctx(self):
            return self.getTypedRuleContext(jacParser.Filter_ctxContext,0)


        def getRuleIndex(self):
            return jacParser.RULE_edge_to

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEdge_to" ):
                listener.enterEdge_to(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEdge_to" ):
                listener.exitEdge_to(self)




    def edge_to(self):

        localctx = jacParser.Edge_toContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_edge_to)
        self._la = 0 # Token type
        try:
            self.state = 746
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [jacParser.T__2]:
                self.enterOuterAlt(localctx, 1)
                self.state = 734
                self.match(jacParser.T__2)
                pass
            elif token in [jacParser.MINUS]:
                self.enterOuterAlt(localctx, 2)
                self.state = 735
                self.match(jacParser.MINUS)
                self.state = 743
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==jacParser.LSQUARE:
                    self.state = 736
                    self.match(jacParser.LSQUARE)
                    self.state = 737
                    self.match(jacParser.NAME)
                    self.state = 740
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,72,self._ctx)
                    if la_ == 1:
                        self.state = 738
                        self.spawn_ctx()

                    elif la_ == 2:
                        self.state = 739
                        self.filter_ctx()


                    self.state = 742
                    self.match(jacParser.RSQUARE)


                self.state = 745
                self.match(jacParser.T__3)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Edge_fromContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MINUS(self):
            return self.getToken(jacParser.MINUS, 0)

        def LSQUARE(self):
            return self.getToken(jacParser.LSQUARE, 0)

        def NAME(self):
            return self.getToken(jacParser.NAME, 0)

        def RSQUARE(self):
            return self.getToken(jacParser.RSQUARE, 0)

        def spawn_ctx(self):
            return self.getTypedRuleContext(jacParser.Spawn_ctxContext,0)


        def filter_ctx(self):
            return self.getTypedRuleContext(jacParser.Filter_ctxContext,0)


        def getRuleIndex(self):
            return jacParser.RULE_edge_from

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEdge_from" ):
                listener.enterEdge_from(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEdge_from" ):
                listener.exitEdge_from(self)




    def edge_from(self):

        localctx = jacParser.Edge_fromContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_edge_from)
        self._la = 0 # Token type
        try:
            self.state = 760
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [jacParser.T__4]:
                self.enterOuterAlt(localctx, 1)
                self.state = 748
                self.match(jacParser.T__4)
                pass
            elif token in [jacParser.T__5]:
                self.enterOuterAlt(localctx, 2)
                self.state = 749
                self.match(jacParser.T__5)
                self.state = 757
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==jacParser.LSQUARE:
                    self.state = 750
                    self.match(jacParser.LSQUARE)
                    self.state = 751
                    self.match(jacParser.NAME)
                    self.state = 754
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,75,self._ctx)
                    if la_ == 1:
                        self.state = 752
                        self.spawn_ctx()

                    elif la_ == 2:
                        self.state = 753
                        self.filter_ctx()


                    self.state = 756
                    self.match(jacParser.RSQUARE)


                self.state = 759
                self.match(jacParser.MINUS)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Edge_anyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LSQUARE(self):
            return self.getToken(jacParser.LSQUARE, 0)

        def NAME(self):
            return self.getToken(jacParser.NAME, 0)

        def RSQUARE(self):
            return self.getToken(jacParser.RSQUARE, 0)

        def spawn_ctx(self):
            return self.getTypedRuleContext(jacParser.Spawn_ctxContext,0)


        def filter_ctx(self):
            return self.getTypedRuleContext(jacParser.Filter_ctxContext,0)


        def getRuleIndex(self):
            return jacParser.RULE_edge_any

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEdge_any" ):
                listener.enterEdge_any(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEdge_any" ):
                listener.exitEdge_any(self)




    def edge_any(self):

        localctx = jacParser.Edge_anyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_edge_any)
        self._la = 0 # Token type
        try:
            self.state = 774
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [jacParser.T__6]:
                self.enterOuterAlt(localctx, 1)
                self.state = 762
                self.match(jacParser.T__6)
                pass
            elif token in [jacParser.T__5]:
                self.enterOuterAlt(localctx, 2)
                self.state = 763
                self.match(jacParser.T__5)
                self.state = 771
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==jacParser.LSQUARE:
                    self.state = 764
                    self.match(jacParser.LSQUARE)
                    self.state = 765
                    self.match(jacParser.NAME)
                    self.state = 768
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,78,self._ctx)
                    if la_ == 1:
                        self.state = 766
                        self.spawn_ctx()

                    elif la_ == 2:
                        self.state = 767
                        self.filter_ctx()


                    self.state = 770
                    self.match(jacParser.RSQUARE)


                self.state = 773
                self.match(jacParser.T__3)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class List_valContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LSQUARE(self):
            return self.getToken(jacParser.LSQUARE, 0)

        def RSQUARE(self):
            return self.getToken(jacParser.RSQUARE, 0)

        def expr_list(self):
            return self.getTypedRuleContext(jacParser.Expr_listContext,0)


        def getRuleIndex(self):
            return jacParser.RULE_list_val

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterList_val" ):
                listener.enterList_val(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitList_val" ):
                listener.exitList_val(self)




    def list_val(self):

        localctx = jacParser.List_valContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_list_val)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 776
            self.match(jacParser.LSQUARE)
            self.state = 778
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << jacParser.T__1) | (1 << jacParser.T__2) | (1 << jacParser.T__4) | (1 << jacParser.T__5) | (1 << jacParser.T__6) | (1 << jacParser.TYP_STRING) | (1 << jacParser.TYP_INT) | (1 << jacParser.TYP_FLOAT) | (1 << jacParser.TYP_LIST) | (1 << jacParser.TYP_DICT) | (1 << jacParser.TYP_BOOL) | (1 << jacParser.KW_TYPE) | (1 << jacParser.KW_NODE) | (1 << jacParser.KW_SPAWN) | (1 << jacParser.DBL_COLON) | (1 << jacParser.LBRACE) | (1 << jacParser.KW_EDGE) | (1 << jacParser.NOT))) != 0) or ((((_la - 76)) & ~0x3f) == 0 and ((1 << (_la - 76)) & ((1 << (jacParser.PLUS - 76)) | (1 << (jacParser.MINUS - 76)) | (1 << (jacParser.MUL - 76)) | (1 << (jacParser.LPAREN - 76)) | (1 << (jacParser.LSQUARE - 76)) | (1 << (jacParser.FLOAT - 76)) | (1 << (jacParser.STRING - 76)) | (1 << (jacParser.BOOL - 76)) | (1 << (jacParser.INT - 76)) | (1 << (jacParser.NULL - 76)) | (1 << (jacParser.NAME - 76)))) != 0):
                self.state = 777
                self.expr_list()


            self.state = 780
            self.match(jacParser.RSQUARE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IndexContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LSQUARE(self):
            return self.getToken(jacParser.LSQUARE, 0)

        def expression(self):
            return self.getTypedRuleContext(jacParser.ExpressionContext,0)


        def RSQUARE(self):
            return self.getToken(jacParser.RSQUARE, 0)

        def getRuleIndex(self):
            return jacParser.RULE_index

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndex" ):
                listener.enterIndex(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndex" ):
                listener.exitIndex(self)




    def index(self):

        localctx = jacParser.IndexContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_index)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 782
            self.match(jacParser.LSQUARE)
            self.state = 783
            self.expression()
            self.state = 784
            self.match(jacParser.RSQUARE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Index_rangeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LSQUARE(self):
            return self.getToken(jacParser.LSQUARE, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(jacParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(jacParser.ExpressionContext,i)


        def COLON(self):
            return self.getToken(jacParser.COLON, 0)

        def RSQUARE(self):
            return self.getToken(jacParser.RSQUARE, 0)

        def getRuleIndex(self):
            return jacParser.RULE_index_range

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndex_range" ):
                listener.enterIndex_range(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndex_range" ):
                listener.exitIndex_range(self)




    def index_range(self):

        localctx = jacParser.Index_rangeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_index_range)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 786
            self.match(jacParser.LSQUARE)
            self.state = 787
            self.expression()
            self.state = 788
            self.match(jacParser.COLON)
            self.state = 789
            self.expression()
            self.state = 790
            self.match(jacParser.RSQUARE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dict_valContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(jacParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(jacParser.RBRACE, 0)

        def kv_pair(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(jacParser.Kv_pairContext)
            else:
                return self.getTypedRuleContext(jacParser.Kv_pairContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(jacParser.COMMA)
            else:
                return self.getToken(jacParser.COMMA, i)

        def getRuleIndex(self):
            return jacParser.RULE_dict_val

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDict_val" ):
                listener.enterDict_val(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDict_val" ):
                listener.exitDict_val(self)




    def dict_val(self):

        localctx = jacParser.Dict_valContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_dict_val)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 792
            self.match(jacParser.LBRACE)
            self.state = 801
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==jacParser.STRING:
                self.state = 793
                self.kv_pair()
                self.state = 798
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==jacParser.COMMA:
                    self.state = 794
                    self.match(jacParser.COMMA)
                    self.state = 795
                    self.kv_pair()
                    self.state = 800
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 803
            self.match(jacParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Kv_pairContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING(self):
            return self.getToken(jacParser.STRING, 0)

        def COLON(self):
            return self.getToken(jacParser.COLON, 0)

        def expression(self):
            return self.getTypedRuleContext(jacParser.ExpressionContext,0)


        def getRuleIndex(self):
            return jacParser.RULE_kv_pair

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKv_pair" ):
                listener.enterKv_pair(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKv_pair" ):
                listener.exitKv_pair(self)




    def kv_pair(self):

        localctx = jacParser.Kv_pairContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_kv_pair)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 805
            self.match(jacParser.STRING)
            self.state = 806
            self.match(jacParser.COLON)
            self.state = 807
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SpawnContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_SPAWN(self):
            return self.getToken(jacParser.KW_SPAWN, 0)

        def spawn_object(self):
            return self.getTypedRuleContext(jacParser.Spawn_objectContext,0)


        def expression(self):
            return self.getTypedRuleContext(jacParser.ExpressionContext,0)


        def getRuleIndex(self):
            return jacParser.RULE_spawn

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSpawn" ):
                listener.enterSpawn(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSpawn" ):
                listener.exitSpawn(self)




    def spawn(self):

        localctx = jacParser.SpawnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_spawn)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 809
            self.match(jacParser.KW_SPAWN)
            self.state = 811
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,84,self._ctx)
            if la_ == 1:
                self.state = 810
                self.expression()


            self.state = 813
            self.spawn_object()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Spawn_objectContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def node_spawn(self):
            return self.getTypedRuleContext(jacParser.Node_spawnContext,0)


        def walker_spawn(self):
            return self.getTypedRuleContext(jacParser.Walker_spawnContext,0)


        def graph_spawn(self):
            return self.getTypedRuleContext(jacParser.Graph_spawnContext,0)


        def getRuleIndex(self):
            return jacParser.RULE_spawn_object

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSpawn_object" ):
                listener.enterSpawn_object(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSpawn_object" ):
                listener.exitSpawn_object(self)




    def spawn_object(self):

        localctx = jacParser.Spawn_objectContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_spawn_object)
        try:
            self.state = 818
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,85,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 815
                self.node_spawn()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 816
                self.walker_spawn()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 817
                self.graph_spawn()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Node_spawnContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def node_ref(self):
            return self.getTypedRuleContext(jacParser.Node_refContext,0)


        def edge_ref(self):
            return self.getTypedRuleContext(jacParser.Edge_refContext,0)


        def spawn_ctx(self):
            return self.getTypedRuleContext(jacParser.Spawn_ctxContext,0)


        def getRuleIndex(self):
            return jacParser.RULE_node_spawn

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNode_spawn" ):
                listener.enterNode_spawn(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNode_spawn" ):
                listener.exitNode_spawn(self)




    def node_spawn(self):

        localctx = jacParser.Node_spawnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_node_spawn)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 821
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << jacParser.T__2) | (1 << jacParser.T__4) | (1 << jacParser.T__5) | (1 << jacParser.T__6))) != 0) or _la==jacParser.MINUS:
                self.state = 820
                self.edge_ref()


            self.state = 823
            self.node_ref()
            self.state = 825
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,87,self._ctx)
            if la_ == 1:
                self.state = 824
                self.spawn_ctx()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Graph_spawnContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def edge_ref(self):
            return self.getTypedRuleContext(jacParser.Edge_refContext,0)


        def graph_ref(self):
            return self.getTypedRuleContext(jacParser.Graph_refContext,0)


        def getRuleIndex(self):
            return jacParser.RULE_graph_spawn

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGraph_spawn" ):
                listener.enterGraph_spawn(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGraph_spawn" ):
                listener.exitGraph_spawn(self)




    def graph_spawn(self):

        localctx = jacParser.Graph_spawnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_graph_spawn)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 827
            self.edge_ref()
            self.state = 828
            self.graph_ref()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Walker_spawnContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def walker_ref(self):
            return self.getTypedRuleContext(jacParser.Walker_refContext,0)


        def spawn_ctx(self):
            return self.getTypedRuleContext(jacParser.Spawn_ctxContext,0)


        def getRuleIndex(self):
            return jacParser.RULE_walker_spawn

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWalker_spawn" ):
                listener.enterWalker_spawn(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWalker_spawn" ):
                listener.exitWalker_spawn(self)




    def walker_spawn(self):

        localctx = jacParser.Walker_spawnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_walker_spawn)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 830
            self.walker_ref()
            self.state = 832
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,88,self._ctx)
            if la_ == 1:
                self.state = 831
                self.spawn_ctx()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Spawn_ctxContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(jacParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(jacParser.RPAREN, 0)

        def spawn_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(jacParser.Spawn_assignContext)
            else:
                return self.getTypedRuleContext(jacParser.Spawn_assignContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(jacParser.COMMA)
            else:
                return self.getToken(jacParser.COMMA, i)

        def getRuleIndex(self):
            return jacParser.RULE_spawn_ctx

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSpawn_ctx" ):
                listener.enterSpawn_ctx(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSpawn_ctx" ):
                listener.exitSpawn_ctx(self)




    def spawn_ctx(self):

        localctx = jacParser.Spawn_ctxContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_spawn_ctx)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 834
            self.match(jacParser.LPAREN)
            self.state = 843
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==jacParser.NAME:
                self.state = 835
                self.spawn_assign()
                self.state = 840
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==jacParser.COMMA:
                    self.state = 836
                    self.match(jacParser.COMMA)
                    self.state = 837
                    self.spawn_assign()
                    self.state = 842
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 845
            self.match(jacParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Filter_ctxContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(jacParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(jacParser.RPAREN, 0)

        def filter_compare(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(jacParser.Filter_compareContext)
            else:
                return self.getTypedRuleContext(jacParser.Filter_compareContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(jacParser.COMMA)
            else:
                return self.getToken(jacParser.COMMA, i)

        def getRuleIndex(self):
            return jacParser.RULE_filter_ctx

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFilter_ctx" ):
                listener.enterFilter_ctx(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFilter_ctx" ):
                listener.exitFilter_ctx(self)




    def filter_ctx(self):

        localctx = jacParser.Filter_ctxContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_filter_ctx)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 847
            self.match(jacParser.LPAREN)
            self.state = 856
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==jacParser.NAME:
                self.state = 848
                self.filter_compare()
                self.state = 853
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==jacParser.COMMA:
                    self.state = 849
                    self.match(jacParser.COMMA)
                    self.state = 850
                    self.filter_compare()
                    self.state = 855
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 858
            self.match(jacParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Spawn_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(jacParser.NAME, 0)

        def EQ(self):
            return self.getToken(jacParser.EQ, 0)

        def expression(self):
            return self.getTypedRuleContext(jacParser.ExpressionContext,0)


        def getRuleIndex(self):
            return jacParser.RULE_spawn_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSpawn_assign" ):
                listener.enterSpawn_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSpawn_assign" ):
                listener.exitSpawn_assign(self)




    def spawn_assign(self):

        localctx = jacParser.Spawn_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_spawn_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 860
            self.match(jacParser.NAME)
            self.state = 861
            self.match(jacParser.EQ)
            self.state = 862
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Filter_compareContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(jacParser.NAME, 0)

        def cmp_op(self):
            return self.getTypedRuleContext(jacParser.Cmp_opContext,0)


        def expression(self):
            return self.getTypedRuleContext(jacParser.ExpressionContext,0)


        def getRuleIndex(self):
            return jacParser.RULE_filter_compare

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFilter_compare" ):
                listener.enterFilter_compare(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFilter_compare" ):
                listener.exitFilter_compare(self)




    def filter_compare(self):

        localctx = jacParser.Filter_compareContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_filter_compare)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 864
            self.match(jacParser.NAME)
            self.state = 865
            self.cmp_op()
            self.state = 866
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Any_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TYP_STRING(self):
            return self.getToken(jacParser.TYP_STRING, 0)

        def TYP_INT(self):
            return self.getToken(jacParser.TYP_INT, 0)

        def TYP_FLOAT(self):
            return self.getToken(jacParser.TYP_FLOAT, 0)

        def TYP_LIST(self):
            return self.getToken(jacParser.TYP_LIST, 0)

        def TYP_DICT(self):
            return self.getToken(jacParser.TYP_DICT, 0)

        def TYP_BOOL(self):
            return self.getToken(jacParser.TYP_BOOL, 0)

        def KW_NODE(self):
            return self.getToken(jacParser.KW_NODE, 0)

        def KW_EDGE(self):
            return self.getToken(jacParser.KW_EDGE, 0)

        def KW_TYPE(self):
            return self.getToken(jacParser.KW_TYPE, 0)

        def getRuleIndex(self):
            return jacParser.RULE_any_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAny_type" ):
                listener.enterAny_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAny_type" ):
                listener.exitAny_type(self)




    def any_type(self):

        localctx = jacParser.Any_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_any_type)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 868
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << jacParser.TYP_STRING) | (1 << jacParser.TYP_INT) | (1 << jacParser.TYP_FLOAT) | (1 << jacParser.TYP_LIST) | (1 << jacParser.TYP_DICT) | (1 << jacParser.TYP_BOOL) | (1 << jacParser.KW_TYPE) | (1 << jacParser.KW_NODE) | (1 << jacParser.KW_EDGE))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dot_graphContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(jacParser.LBRACE, 0)

        def dot_stmt_list(self):
            return self.getTypedRuleContext(jacParser.Dot_stmt_listContext,0)


        def RBRACE(self):
            return self.getToken(jacParser.RBRACE, 0)

        def KW_GRAPH(self):
            return self.getToken(jacParser.KW_GRAPH, 0)

        def KW_DIGRAPH(self):
            return self.getToken(jacParser.KW_DIGRAPH, 0)

        def KW_STRICT(self):
            return self.getToken(jacParser.KW_STRICT, 0)

        def dot_id(self):
            return self.getTypedRuleContext(jacParser.Dot_idContext,0)


        def getRuleIndex(self):
            return jacParser.RULE_dot_graph

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDot_graph" ):
                listener.enterDot_graph(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDot_graph" ):
                listener.exitDot_graph(self)




    def dot_graph(self):

        localctx = jacParser.Dot_graphContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_dot_graph)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 871
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==jacParser.KW_STRICT:
                self.state = 870
                self.match(jacParser.KW_STRICT)


            self.state = 873
            _la = self._input.LA(1)
            if not(_la==jacParser.KW_GRAPH or _la==jacParser.KW_DIGRAPH):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 875
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << jacParser.KW_GRAPH) | (1 << jacParser.KW_NODE) | (1 << jacParser.KW_EDGE))) != 0) or ((((_la - 86)) & ~0x3f) == 0 and ((1 << (_la - 86)) & ((1 << (jacParser.FLOAT - 86)) | (1 << (jacParser.STRING - 86)) | (1 << (jacParser.INT - 86)) | (1 << (jacParser.NAME - 86)))) != 0):
                self.state = 874
                self.dot_id()


            self.state = 877
            self.match(jacParser.LBRACE)
            self.state = 878
            self.dot_stmt_list()
            self.state = 879
            self.match(jacParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dot_stmt_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dot_stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(jacParser.Dot_stmtContext)
            else:
                return self.getTypedRuleContext(jacParser.Dot_stmtContext,i)


        def SEMI(self, i:int=None):
            if i is None:
                return self.getTokens(jacParser.SEMI)
            else:
                return self.getToken(jacParser.SEMI, i)

        def getRuleIndex(self):
            return jacParser.RULE_dot_stmt_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDot_stmt_list" ):
                listener.enterDot_stmt_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDot_stmt_list" ):
                listener.exitDot_stmt_list(self)




    def dot_stmt_list(self):

        localctx = jacParser.Dot_stmt_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_dot_stmt_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 887
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << jacParser.KW_GRAPH) | (1 << jacParser.KW_SUBGRAPH) | (1 << jacParser.KW_NODE) | (1 << jacParser.LBRACE) | (1 << jacParser.KW_EDGE))) != 0) or ((((_la - 86)) & ~0x3f) == 0 and ((1 << (_la - 86)) & ((1 << (jacParser.FLOAT - 86)) | (1 << (jacParser.STRING - 86)) | (1 << (jacParser.INT - 86)) | (1 << (jacParser.NAME - 86)))) != 0):
                self.state = 881
                self.dot_stmt()
                self.state = 883
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==jacParser.SEMI:
                    self.state = 882
                    self.match(jacParser.SEMI)


                self.state = 889
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dot_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dot_node_stmt(self):
            return self.getTypedRuleContext(jacParser.Dot_node_stmtContext,0)


        def dot_edge_stmt(self):
            return self.getTypedRuleContext(jacParser.Dot_edge_stmtContext,0)


        def dot_attr_stmt(self):
            return self.getTypedRuleContext(jacParser.Dot_attr_stmtContext,0)


        def dot_id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(jacParser.Dot_idContext)
            else:
                return self.getTypedRuleContext(jacParser.Dot_idContext,i)


        def EQ(self):
            return self.getToken(jacParser.EQ, 0)

        def dot_subgraph(self):
            return self.getTypedRuleContext(jacParser.Dot_subgraphContext,0)


        def getRuleIndex(self):
            return jacParser.RULE_dot_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDot_stmt" ):
                listener.enterDot_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDot_stmt" ):
                listener.exitDot_stmt(self)




    def dot_stmt(self):

        localctx = jacParser.Dot_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_dot_stmt)
        try:
            self.state = 898
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,97,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 890
                self.dot_node_stmt()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 891
                self.dot_edge_stmt()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 892
                self.dot_attr_stmt()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 893
                self.dot_id()
                self.state = 894
                self.match(jacParser.EQ)
                self.state = 895
                self.dot_id()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 897
                self.dot_subgraph()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dot_attr_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dot_attr_list(self):
            return self.getTypedRuleContext(jacParser.Dot_attr_listContext,0)


        def KW_GRAPH(self):
            return self.getToken(jacParser.KW_GRAPH, 0)

        def KW_NODE(self):
            return self.getToken(jacParser.KW_NODE, 0)

        def KW_EDGE(self):
            return self.getToken(jacParser.KW_EDGE, 0)

        def getRuleIndex(self):
            return jacParser.RULE_dot_attr_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDot_attr_stmt" ):
                listener.enterDot_attr_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDot_attr_stmt" ):
                listener.exitDot_attr_stmt(self)




    def dot_attr_stmt(self):

        localctx = jacParser.Dot_attr_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_dot_attr_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 900
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << jacParser.KW_GRAPH) | (1 << jacParser.KW_NODE) | (1 << jacParser.KW_EDGE))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 901
            self.dot_attr_list()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dot_attr_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LSQUARE(self, i:int=None):
            if i is None:
                return self.getTokens(jacParser.LSQUARE)
            else:
                return self.getToken(jacParser.LSQUARE, i)

        def RSQUARE(self, i:int=None):
            if i is None:
                return self.getTokens(jacParser.RSQUARE)
            else:
                return self.getToken(jacParser.RSQUARE, i)

        def dot_a_list(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(jacParser.Dot_a_listContext)
            else:
                return self.getTypedRuleContext(jacParser.Dot_a_listContext,i)


        def getRuleIndex(self):
            return jacParser.RULE_dot_attr_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDot_attr_list" ):
                listener.enterDot_attr_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDot_attr_list" ):
                listener.exitDot_attr_list(self)




    def dot_attr_list(self):

        localctx = jacParser.Dot_attr_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_dot_attr_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 908 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 903
                self.match(jacParser.LSQUARE)
                self.state = 905
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << jacParser.KW_GRAPH) | (1 << jacParser.KW_NODE) | (1 << jacParser.KW_EDGE))) != 0) or ((((_la - 86)) & ~0x3f) == 0 and ((1 << (_la - 86)) & ((1 << (jacParser.FLOAT - 86)) | (1 << (jacParser.STRING - 86)) | (1 << (jacParser.INT - 86)) | (1 << (jacParser.NAME - 86)))) != 0):
                    self.state = 904
                    self.dot_a_list()


                self.state = 907
                self.match(jacParser.RSQUARE)
                self.state = 910 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==jacParser.LSQUARE):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dot_a_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dot_id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(jacParser.Dot_idContext)
            else:
                return self.getTypedRuleContext(jacParser.Dot_idContext,i)


        def EQ(self, i:int=None):
            if i is None:
                return self.getTokens(jacParser.EQ)
            else:
                return self.getToken(jacParser.EQ, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(jacParser.COMMA)
            else:
                return self.getToken(jacParser.COMMA, i)

        def getRuleIndex(self):
            return jacParser.RULE_dot_a_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDot_a_list" ):
                listener.enterDot_a_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDot_a_list" ):
                listener.exitDot_a_list(self)




    def dot_a_list(self):

        localctx = jacParser.Dot_a_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_dot_a_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 920 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 912
                self.dot_id()
                self.state = 915
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==jacParser.EQ:
                    self.state = 913
                    self.match(jacParser.EQ)
                    self.state = 914
                    self.dot_id()


                self.state = 918
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==jacParser.COMMA:
                    self.state = 917
                    self.match(jacParser.COMMA)


                self.state = 922 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << jacParser.KW_GRAPH) | (1 << jacParser.KW_NODE) | (1 << jacParser.KW_EDGE))) != 0) or ((((_la - 86)) & ~0x3f) == 0 and ((1 << (_la - 86)) & ((1 << (jacParser.FLOAT - 86)) | (1 << (jacParser.STRING - 86)) | (1 << (jacParser.INT - 86)) | (1 << (jacParser.NAME - 86)))) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dot_edge_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dot_edgeRHS(self):
            return self.getTypedRuleContext(jacParser.Dot_edgeRHSContext,0)


        def dot_node_id(self):
            return self.getTypedRuleContext(jacParser.Dot_node_idContext,0)


        def dot_subgraph(self):
            return self.getTypedRuleContext(jacParser.Dot_subgraphContext,0)


        def dot_attr_list(self):
            return self.getTypedRuleContext(jacParser.Dot_attr_listContext,0)


        def getRuleIndex(self):
            return jacParser.RULE_dot_edge_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDot_edge_stmt" ):
                listener.enterDot_edge_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDot_edge_stmt" ):
                listener.exitDot_edge_stmt(self)




    def dot_edge_stmt(self):

        localctx = jacParser.Dot_edge_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_dot_edge_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 926
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [jacParser.KW_GRAPH, jacParser.KW_NODE, jacParser.KW_EDGE, jacParser.FLOAT, jacParser.STRING, jacParser.INT, jacParser.NAME]:
                self.state = 924
                self.dot_node_id()
                pass
            elif token in [jacParser.KW_SUBGRAPH, jacParser.LBRACE]:
                self.state = 925
                self.dot_subgraph()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 928
            self.dot_edgeRHS()
            self.state = 930
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==jacParser.LSQUARE:
                self.state = 929
                self.dot_attr_list()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dot_edgeRHSContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dot_edgeop(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(jacParser.Dot_edgeopContext)
            else:
                return self.getTypedRuleContext(jacParser.Dot_edgeopContext,i)


        def dot_node_id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(jacParser.Dot_node_idContext)
            else:
                return self.getTypedRuleContext(jacParser.Dot_node_idContext,i)


        def dot_subgraph(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(jacParser.Dot_subgraphContext)
            else:
                return self.getTypedRuleContext(jacParser.Dot_subgraphContext,i)


        def getRuleIndex(self):
            return jacParser.RULE_dot_edgeRHS

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDot_edgeRHS" ):
                listener.enterDot_edgeRHS(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDot_edgeRHS" ):
                listener.exitDot_edgeRHS(self)




    def dot_edgeRHS(self):

        localctx = jacParser.Dot_edgeRHSContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_dot_edgeRHS)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 937 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 932
                self.dot_edgeop()
                self.state = 935
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [jacParser.KW_GRAPH, jacParser.KW_NODE, jacParser.KW_EDGE, jacParser.FLOAT, jacParser.STRING, jacParser.INT, jacParser.NAME]:
                    self.state = 933
                    self.dot_node_id()
                    pass
                elif token in [jacParser.KW_SUBGRAPH, jacParser.LBRACE]:
                    self.state = 934
                    self.dot_subgraph()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 939 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==jacParser.T__3 or _la==jacParser.T__7):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dot_edgeopContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return jacParser.RULE_dot_edgeop

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDot_edgeop" ):
                listener.enterDot_edgeop(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDot_edgeop" ):
                listener.exitDot_edgeop(self)




    def dot_edgeop(self):

        localctx = jacParser.Dot_edgeopContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_dot_edgeop)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 941
            _la = self._input.LA(1)
            if not(_la==jacParser.T__3 or _la==jacParser.T__7):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dot_node_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dot_node_id(self):
            return self.getTypedRuleContext(jacParser.Dot_node_idContext,0)


        def dot_attr_list(self):
            return self.getTypedRuleContext(jacParser.Dot_attr_listContext,0)


        def getRuleIndex(self):
            return jacParser.RULE_dot_node_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDot_node_stmt" ):
                listener.enterDot_node_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDot_node_stmt" ):
                listener.exitDot_node_stmt(self)




    def dot_node_stmt(self):

        localctx = jacParser.Dot_node_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_dot_node_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 943
            self.dot_node_id()
            self.state = 945
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==jacParser.LSQUARE:
                self.state = 944
                self.dot_attr_list()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dot_node_idContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dot_id(self):
            return self.getTypedRuleContext(jacParser.Dot_idContext,0)


        def dot_port(self):
            return self.getTypedRuleContext(jacParser.Dot_portContext,0)


        def getRuleIndex(self):
            return jacParser.RULE_dot_node_id

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDot_node_id" ):
                listener.enterDot_node_id(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDot_node_id" ):
                listener.exitDot_node_id(self)




    def dot_node_id(self):

        localctx = jacParser.Dot_node_idContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_dot_node_id)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 947
            self.dot_id()
            self.state = 949
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==jacParser.COLON:
                self.state = 948
                self.dot_port()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dot_portContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(jacParser.COLON)
            else:
                return self.getToken(jacParser.COLON, i)

        def dot_id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(jacParser.Dot_idContext)
            else:
                return self.getTypedRuleContext(jacParser.Dot_idContext,i)


        def getRuleIndex(self):
            return jacParser.RULE_dot_port

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDot_port" ):
                listener.enterDot_port(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDot_port" ):
                listener.exitDot_port(self)




    def dot_port(self):

        localctx = jacParser.Dot_portContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_dot_port)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 951
            self.match(jacParser.COLON)
            self.state = 952
            self.dot_id()
            self.state = 955
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==jacParser.COLON:
                self.state = 953
                self.match(jacParser.COLON)
                self.state = 954
                self.dot_id()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dot_subgraphContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(jacParser.LBRACE, 0)

        def dot_stmt_list(self):
            return self.getTypedRuleContext(jacParser.Dot_stmt_listContext,0)


        def RBRACE(self):
            return self.getToken(jacParser.RBRACE, 0)

        def KW_SUBGRAPH(self):
            return self.getToken(jacParser.KW_SUBGRAPH, 0)

        def dot_id(self):
            return self.getTypedRuleContext(jacParser.Dot_idContext,0)


        def getRuleIndex(self):
            return jacParser.RULE_dot_subgraph

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDot_subgraph" ):
                listener.enterDot_subgraph(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDot_subgraph" ):
                listener.exitDot_subgraph(self)




    def dot_subgraph(self):

        localctx = jacParser.Dot_subgraphContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_dot_subgraph)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 961
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==jacParser.KW_SUBGRAPH:
                self.state = 957
                self.match(jacParser.KW_SUBGRAPH)
                self.state = 959
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << jacParser.KW_GRAPH) | (1 << jacParser.KW_NODE) | (1 << jacParser.KW_EDGE))) != 0) or ((((_la - 86)) & ~0x3f) == 0 and ((1 << (_la - 86)) & ((1 << (jacParser.FLOAT - 86)) | (1 << (jacParser.STRING - 86)) | (1 << (jacParser.INT - 86)) | (1 << (jacParser.NAME - 86)))) != 0):
                    self.state = 958
                    self.dot_id()




            self.state = 963
            self.match(jacParser.LBRACE)
            self.state = 964
            self.dot_stmt_list()
            self.state = 965
            self.match(jacParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dot_idContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(jacParser.NAME, 0)

        def STRING(self):
            return self.getToken(jacParser.STRING, 0)

        def INT(self):
            return self.getToken(jacParser.INT, 0)

        def FLOAT(self):
            return self.getToken(jacParser.FLOAT, 0)

        def KW_GRAPH(self):
            return self.getToken(jacParser.KW_GRAPH, 0)

        def KW_NODE(self):
            return self.getToken(jacParser.KW_NODE, 0)

        def KW_EDGE(self):
            return self.getToken(jacParser.KW_EDGE, 0)

        def getRuleIndex(self):
            return jacParser.RULE_dot_id

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDot_id" ):
                listener.enterDot_id(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDot_id" ):
                listener.exitDot_id(self)




    def dot_id(self):

        localctx = jacParser.Dot_idContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_dot_id)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 967
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << jacParser.KW_GRAPH) | (1 << jacParser.KW_NODE) | (1 << jacParser.KW_EDGE))) != 0) or ((((_la - 86)) & ~0x3f) == 0 and ((1 << (_la - 86)) & ((1 << (jacParser.FLOAT - 86)) | (1 << (jacParser.STRING - 86)) | (1 << (jacParser.INT - 86)) | (1 << (jacParser.NAME - 86)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[51] = self.atom_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def atom_sempred(self, localctx:AtomContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 6)
         

            if predIndex == 1:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 2:
                return self.precpred(self._ctx, 4)
         




